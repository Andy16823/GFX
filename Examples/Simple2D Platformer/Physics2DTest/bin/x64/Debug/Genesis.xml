<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genesis</name>
    </assembly>
    <members>
        <member name="T:Genesis.Core.AssetManager">
            <summary>
            Manages game assets such as textures and fonts.
            </summary>
        </member>
        <member name="P:Genesis.Core.AssetManager.Textures">
            <summary>
            List of loaded textures.
            </summary>
        </member>
        <member name="P:Genesis.Core.AssetManager.Fonts">
            <summary>
            List of loaded fonts.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Core.AssetManager"/> class.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.AddTexture(System.String,System.Drawing.Bitmap)">
            <summary>
            Adds a texture to the asset manager.
            </summary>
            <param name="name">The name of the texture.</param>
            <param name="bitmap">The bitmap representing the texture.</param>
            <returns>The added texture.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetTexture(System.String)">
            <summary>
            Gets a texture by name.
            </summary>
            <param name="name">The name of the texture.</param>
            <returns>The texture with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetFont(System.String)">
            <summary>
            Gets a font by name.
            </summary>
            <param name="name">The name of the font.</param>
            <returns>The font with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.Init(Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the assets in the rendering device.
            </summary>
            <param name="renderDevice">The rendering device to load the assets into.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.DisposeTextures(Genesis.Core.Game)">
            <summary>
            Disposes of the loaded textures and fonts.
            </summary>
            <param name="game">The game object associated with the assets.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadTextures">
            <summary>
            Loads textures from the resource folder.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadFonts">
            <summary>
            Loads fonts from the resource folder.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.AddFont(Genesis.Graphics.Font)">
            <summary>
            Adds an font
            </summary>
            <param name="font">the font to add</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadSystemFont(System.String)">
            <summary>
            Loads a system font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Core.AssetManager.PackAssets(System.String)">
            <summary>
            Packs the assets into an asset library.
            </summary>
            <param name="file">The file path to save the asset library.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.ImportAssetLibary(System.String)">
            <summary>
            Imports assets from an asset library.
            </summary>
            <param name="file">The file path of the asset library to import.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetRessourcesDirectory">
            <summary>
            Gets the resource directory path.
            </summary>
            <returns>The path to the resource directory.</returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics2D.Rigidbody2D">
            <summary>
            Represents a 2D physics behavior for game elements.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this 2D physics behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.LinearFactor">
            <summary>
            Gets or sets the linear factor for the RigidBody's motion.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.AngularFactor">
            <summary>
            Gets or sets the angular factor for the RigidBody's rotation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.CreateRigidbody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Creates a RigidBody with the specified mass using the provided PhysicHandler.
            </summary>
            <param name="handler">The PhysicHandler responsible for managing physics elements.</param>
            <param name="mass">The mass of the RigidBody.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.UpdateRigidBody">
            <summary>
            Updates the RigidBody's motion state based on the parent's location.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being destroyed.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being initialized.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase of the game update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Updates the behavior during the game's update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.GetPhysicsObject">
            <summary>
            Gets the physics object associated with this behavior.
            </summary>
            <returns>The RigidBody physics object.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.GetPhysicsObject``1">
            <summary>
            Gets the physics object associated with this behavior, cast to the specified type.
            </summary>
            <typeparam name="T">The type to which the physics object is cast.</typeparam>
            <returns>The RigidBody physics object cast to the specified type.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.CreateRigidBody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Create the rigidbody for this behavior
            </summary>
            <param name="handler"></param>
            <param name="mass"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Gets called when the element collides with another
            </summary>
            <param name="scene"></param>
            <param name="game"></param>
            <param name="collisionObject"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.UpdateRigidBody">
            <summary>
            Sets the scaling for the RigidBody
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Destroys the behavior
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Check on init if the parent type is a Element3D
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Renderer callback
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Update callback
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.GetPhysicsObject">
            <summary>
            Returns the physic object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior">
            <summary>
            A ConvexHull Rigidbody for Element3D.
            </summary>
        </member>
        <member name="T:Genesis.Core.Game">
            <summary>
            Represents the main game class responsible for managing game loops, scenes, rendering, and updates.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Run">
            <summary>
            Gets or sets a value indicating whether the game loop is running.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.RenderDevice">
            <summary>
            Gets or sets the rendering device used by the game.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Scenes">
            <summary>
            Gets or sets the list of scenes in the game.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.SelectedScene">
            <summary>
            Gets or sets the currently selected scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.AssetManager">
            <summary>
            Gets or sets the asset manager for handling game assets.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Viewport">
            <summary>
            Gets or sets the viewport configuration for rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.TargetFPS">
            <summary>
            Gets or sets the target frames per second for the game loop.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.FPS">
            <summary>
            Gets or sets the current frames per second achieved by the game loop.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.LastFrame">
            <summary>
            Gets or sets the timestamp of the last frame.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.DeltaTime">
            <summary>
            Gets or sets the time elapsed since the last frame in milliseconds.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Storage">
            <summary>
            Gets or sets the storage object for managing game data.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnInit">
            <summary>
            Event triggered when the game initializes.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.BeforeUpdate">
            <summary>
            Event triggered before the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnUpdate">
            <summary>
            Event triggered during the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.AfterUpdate">
            <summary>
            Event triggered after the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.BeforeRender">
            <summary>
            Event triggered before rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnRenderBeginn">
            <summary>
            Event triggered at the beginning of rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnRenderEnd">
            <summary>
            Event triggered at the end of rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.AfterRender">
            <summary>
            Event triggered after rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnDispose">
            <summary>
            Event triggered when the game is disposed.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.#ctor(Genesis.Graphics.IRenderDevice,Genesis.Graphics.Viewport)">
            <summary>
            Creates a new instance of the Game class.
            </summary>
            <param name="renderDevice">The rendering device to use.</param>
            <param name="viewport">The viewport configuration.</param>
        </member>
        <member name="M:Genesis.Core.Game.Start">
            <summary>
            Starts the main game loop.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Loop">
            <summary>
            Main game loop. Handles updates and rendering.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Stop">
            <summary>
            Stops the main game loop.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.GetElementScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Get the screen coordinates of the given element.
            </summary>
            <param name="element">The GameElement to get the screen coordinates for.</param>
            <returns>A Vec3 representing the screen coordinates of the element.</returns>
        </member>
        <member name="M:Genesis.Core.Game.GetElementCenterScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Returns the screen location of the given element with a center anchor.
            </summary>
            <param name="element">The GameElement to get the centered screen coordinates for.</param>
            <returns>A Vec3 representing the centered screen coordinates of the element.</returns>
        </member>
        <member name="M:Genesis.Core.Game.GetSceneCord(Genesis.Math.Vec3)">
            <summary>
            Transforms a display vector to a vector inside the scene.
            </summary>
            <param name="location">The display vector to transform.</param>
            <returns>A Vec3 representing the transformed vector inside the scene.</returns>
        </member>
        <member name="M:Genesis.Core.Game.AddScene(Genesis.Core.Scene)">
            <summary>
            Adds a scene to the list of scenes.
            </summary>
            <param name="scene">The Scene object to be added.</param>
            <returns>The added Scene object.</returns>
        </member>
        <member name="M:Genesis.Core.Game.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Initializes a GameElement within the game environment.
            </summary>
            <param name="element">The GameElement to be initialized.</param>
        </member>
        <member name="M:Genesis.Core.Game.LoadScene(System.String)">
            <summary>
            Loads a scene with the given name.
            </summary>
            <param name="name">The name of the scene to be loaded.</param>
        </member>
        <member name="T:Genesis.Core.GameElement">
            <summary>
            Represents a base class for game elements in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Name">
            <summary>
            Gets or sets the name of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Tag">
            <summary>
            Gets or sets the tag associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Location">
            <summary>
            Gets or sets the 3D coordinates of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Rotation">
            <summary>
            Gets or sets the 3D rotation of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Size">
            <summary>
            Gets or sets the 3D size of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Behaviors">
            <summary>
            Gets or sets the list of behaviors associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Scene">
            <summary>
            Gets or sets the scene to which the game element belongs.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Enabled">
            <summary>
            Gets or sets a value indicating whether the game element is enabled.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Propertys">
            <summary>
            Gets or sets the properties associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Children">
            <summary>
            Gets or sets the list of child game elements.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Parent">
            <summary>
            Gets or sets the parent game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.UUID">
            <summary>
            Gets or sets the unique identifier for the game element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElement.#ctor">
            <summary>
            Creates a new instance of the GameElement class.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElement.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is initialized.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is rendered.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is updated.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the game element is disposed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior``1(``0)">
            <summary>
            Adds a behavior of type T to the game element and returns it.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <param name="behavior">The behavior to be added.</param>
            <returns>The added behavior of type T.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior(Genesis.Core.IGameBehavior)">
            <summary>
            Adds a behavior to the game element.
            </summary>
            <param name="behavior">The behavior to be added.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehavior``1">
            <summary>
            Gets the first game behavior of type T.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <returns>The first game behavior of type T, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehaviors``1">
            <summary>
            Returns all behaviors of type T.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <returns>A list of all behaviors of type T.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddChild(Genesis.Core.GameElement)">
            <summary>
            Adds a child game element to the current game element.
            </summary>
            <param name="element">The child game element to be added.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetInstance(Genesis.Core.GameElement)">
            <summary>
            Copies the properties from another game element instance to the current one.
            </summary>
            <param name="element">The game element from which to copy properties.</param>
        </member>
        <member name="T:Genesis.Core.IGameBehavior">
            <summary>
            Represents the base class for game behaviors in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.IGameBehavior.Parent">
            <summary>
            Gets or sets the parent game element to which this behavior is attached.
            </summary>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is initialized.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is updated.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is rendered.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is being destroyed.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="T:Genesis.Core.Input">
            <summary>
            Provides utility methods for handling user input in the Genesis framework.
            </summary>
        </member>
        <member name="M:Genesis.Core.Input.GetAsyncKeyState(System.Windows.Forms.Keys)">
            <summary>
            Gets the state of the specified key.
            </summary>
            <param name="vKey">The virtual key code to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetAsyncKeyState(System.Int32)">
            <summary>
            Gets the state of the specified key.
            </summary>
            <param name="vKey">The virtual key code to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the specified key is currently pressed.
            </summary>
            <param name="vKey">The virtual key to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetMousePos">
            <summary>
            Gets the current mouse position.
            </summary>
            <returns>A Vec3 representing the current mouse position.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(System.Windows.Forms.Control)">
            <summary>
            Gets the mouse position relative to the specified control.
            </summary>
            <param name="control">The control relative to which the mouse position is obtained.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(System.IntPtr)">
            <summary>
            Gets the mouse position relative to the control associated with the specified handle.
            </summary>
            <param name="handle">The handle of the control.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(Genesis.Core.Game)">
            <summary>
            Gets the mouse position relative to the control associated with the specified game instance.
            </summary>
            <param name="game">The game instance.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="T:Genesis.Core.Layer">
            <summary>
            Represents a layer containing game elements in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.Name">
            <summary>
            Gets or sets the name of the layer.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.Elements">
            <summary>
            Gets or sets the list of game elements within the layer.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.UpdateElements">
            <summary>
            Gets or sets a value indicating whether the elements within the layer should be updated.
            </summary>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor">
            <summary>
            Creates a new instance of the Layer class.
            </summary>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor(System.String)">
            <summary>
            Creates a new instance of the Layer class with the specified name.
            </summary>
            <param name="name">The name of the layer.</param>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the Layer class with the specified name and updateElements flag.
            </summary>
            <param name="name">The name of the layer.</param>
            <param name="updateElements">Flag indicating whether the elements within the layer should be updated.</param>
        </member>
        <member name="M:Genesis.Core.Layer.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates all game elements within the layer if the UpdateElements flag is true.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnDestroy(Genesis.Core.Game)">
            <summary>
            Destroys all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="T:Genesis.Core.Light">
            <summary>
            Represents a light source in the Genesis framework.
            </summary>
        </member>
        <member name="M:Genesis.Core.Light.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Creates a new instance of the Light class with the specified name and location.
            </summary>
            <param name="name">The name of the light.</param>
            <param name="location">The 3D location of the light.</param>
        </member>
        <member name="P:Genesis.Core.Light.LightColor">
            <summary>
            Gets or sets the color of the light.
            </summary>
        </member>
        <member name="P:Genesis.Core.Light.Intensity">
            <summary>
            Gets or sets the intensity of the light.
            </summary>
        </member>
        <member name="M:Genesis.Core.Light.GetLightDirection(Genesis.Graphics.Camera)">
            <summary>
            Returns the direction vector from the light to the camera.
            </summary>
            <param name="camera">The camera to which the direction is calculated.</param>
            <returns>The normalized vector representing the light direction.</returns>
        </member>
        <member name="M:Genesis.Core.Light.GetLightColor">
            <summary>
            Returns the light color in RGB values normalized between 0 and 1.
            </summary>
            <returns>A Vec3 representing the normalized RGB values of the light color.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.BufferedSprite">
            <summary>
            Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Verticies">
            <summary>
            Gets or sets the list of vertices for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Colors">
            <summary>
            Gets or sets the list of colors for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.TexCoords">
            <summary>
            Gets or sets the list of texture coordinates for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Texture">
            <summary>
            Gets or sets the texture applied to the sprite.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.#ctor(System.String,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Creates a new buffered sprite with the specified name, location, and texture.
            </summary>
            <param name="name">The name of the game element.</param>
            <param name="location">The location of the game element.</param>
            <param name="texture">The texture applied to the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.AddShape(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Adds a new rectangular shape at the given location and with the given size to the sprite.
            </summary>
            <param name="location">The location for the sprite.</param>
            <param name="size">The size for the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.CameraElement">
            <summary>
            Represents a game element that serves as a camera within the game world.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Camera">
            <summary>
            Gets or sets the camera associated with this element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Location">
            <summary>
            Gets or sets the location of the camera within the game world.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Rotation">
            <summary>
            Gets or sets the rotation of the camera.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Size">
            <summary>
            Gets or sets the size of the camera.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.CameraElement.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.CameraType)">
            <summary>
            Initializes a new instance of the CameraElement class with specified parameters.
            </summary>
            <param name="name">The name of the camera element.</param>
            <param name="location">The initial location of the camera.</param>
            <param name="cameraSize">The size of the camera.</param>
            <param name="near">The near clipping plane distance of the camera.</param>
            <param name="far">The far clipping plane distance of the camera.</param>
            <param name="type">The type of the camera (perspective or orthographic).</param>
        </member>
        <member name="M:Genesis.Core.GameElements.CameraElement.#ctor(System.String,Genesis.Graphics.Camera)">
            <summary>
            Initializes a new instance of the CameraElement class with an existing camera.
            </summary>
            <param name="name">The name of the camera element.</param>
            <param name="camera">The camera object to associate with this element.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.TerrainData">
            <summary>
            Represents a 3D terrain element.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Terrain3D">
            <summary>
            Represents a 3D terrain element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.TerrainData">
            <summary>
            Gets or sets the terrain data.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.Color">
            <summary>
            Gets or sets the color of the terrain.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.AltColor">
            <summary>
            Gets or sets the alternate color of the terrain.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Terrain3D class with default values.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3,System.Single,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the Terrain3D class with specified name, location, height value, and heightmap.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="heightValue">The height value of the terrain.</param>
            <param name="heightmap">The heightmap for generating the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Terrain3D class with specified name, location, cell counts, and cell dimensions.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="cellsX">The number of cells in the X direction.</param>
            <param name="cellsZ">The number of cells in the Z direction.</param>
            <param name="cellWidth">The width of each cell.</param>
            <param name="cellHeight">The height of each cell.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrainData(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Generates terrain data based on specified parameters.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrain(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Generates terrain data from a heightmap.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrainTile(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Generates a tile for the terrain grid.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.CreateTerrainTileColor(System.Drawing.Color)">
            <summary>
            Creates color data for a terrain tile.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the terrain element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the terrain element.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Element3D">
            <summary>
            Represents a 3D element in the game world, such as a 3D model with shaders.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.Shader">
            <summary>
            Gets or sets the shader program associated with this 3D element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.Model">
            <summary>
            Gets or sets the 3D model associated with this element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.#ctor(System.String,System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Element3D class with specified parameters.
            </summary>
            <param name="name">The name of the 3D element.</param>
            <param name="path">The file path to the 3D model.</param>
            <param name="location">The initial location of the 3D element.</param>
            <param name="rotation">The initial rotation of the 3D element.</param>
            <param name="scale">The initial scale of the 3D element.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being updated. Override to provide custom update logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being initialized. Override to provide custom initialization logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being rendered. Override to provide custom rendering logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the game element is being destroyed. Override to provide custom cleanup logic.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.Empty">
            <summary>
            Represents an empty game element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Empty.#ctor">
            <summary>
            Initializes a new instance of the Empty class.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Model">
            <summary>
            Represents a game element with a 3D model mesh, now deprecated in favor of the Element3D class.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Model.Mesh">
            <summary>
            Gets or sets the mesh associated with this model.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Model.#ctor(Genesis.Math.Mesh)">
            <summary>
            Initializes a new instance of the Model class with the specified mesh.
            </summary>
            <param name="mesh">The mesh associated with the model.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Model.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the game element and its associated mesh.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Model.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element with its associated mesh.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.Qube">
            <summary>
            Represents a cube-shaped game element with customizable appearance.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Shader">
            <summary>
            Gets or sets the shader program associated with this cube.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Shape">
            <summary>
            Gets or sets the cube shape definition.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Color">
            <summary>
            Gets or sets the color of the cube.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with default settings.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with specified size.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
            <param name="size">The size of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with specified size and rotation.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
            <param name="size">The size of the cube.</param>
            <param name="rotation">The initial rotation of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.GetColors(System.Drawing.Color)">
            <summary>
            Gets an array of color values based on the specified color.
            </summary>
            <param name="color">The color for the cube faces.</param>
            <returns>An array of color values for the cube faces.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.RectElement">
            <summary>
            Simple rectangle element
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.BorderColor">
            <summary>
            Gets or sets the color of the rectangle border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.BorderWidth">
            <summary>
            Gets or sets the width of the rectangle border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.HasBorder">
            <summary>
            Gets or sets a value indicating whether the rectangle has a border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.Fill">
            <summary>
            Gets or sets the fill color of the rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.HasFill">
            <summary>
            Gets or sets a value indicating whether the rectangle has fill color.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.RectElement.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="name">The name of the rectangle.</param>
            <param name="location">The location of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.RectElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the rectangle
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.Sprite">
            <summary>
            Represents a sprite element in a 2D or 3D environment.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.Texture">
            <summary>
            Gets or sets the texture of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.Color">
            <summary>
            Gets or sets the color of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.TexCoords">
            <summary>
            Gets or sets the texture coordinates of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.OcclusionCulling">
            <summary>
            Gets or sets a value indicating whether occlusion culling is enabled for the sprite.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the Sprite class with specified name, location, size, and texture.
            </summary>
            <param name="name">The name of the sprite.</param>
            <param name="location">The initial location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="texture">The texture for the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the sprite element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the sprite element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.OnDestroy(Genesis.Core.Game)">
            <summary>
            Handles cleanup and resource disposal when the sprite is destroyed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.GetBounds2D">
            <summary>
            Gets the 2D bounds of the sprite.
            </summary>
            <returns>A rectangular region representing the 2D bounds of the sprite.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.GetCenterLocation">
            <summary>
            Gets the center location of the sprite.
            </summary>
            <returns>The center location of the sprite.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.CalculateVerticies">
            <summary>
            Calculates the vertex coordinates of the sprite.
            </summary>
            <returns>An array containing the vertex coordinates of the sprite.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.Terrain2D">
            <summary>
            Represents a 2D terrain element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.Texture">
            <summary>
            Gets or sets the texture of the terrain.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellsX">
            <summary>
            Gets or sets the number of cells in the X direction.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellsY">
            <summary>
            Gets or sets the number of cells in the Y direction.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellSize">
            <summary>
            Gets or sets the size of each cell.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.#ctor(System.String,Genesis.Math.Vec3,System.Single,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the Terrain2D class with specified name, location, cell counts, cell size, and texture.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="cellsX">The number of cells in the X direction.</param>
            <param name="cellsY">The number of cells in the Y direction.</param>
            <param name="cellSize">The size of each cell.</param>
            <param name="texture">The texture for the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the terrain element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the terrain element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.OnDestroy(Genesis.Core.Game)">
            <summary>
            Handles cleanup and resource disposal when the terrain is destroyed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.GetBounds">
            <summary>
            Gets the 2D bounds of the terrain.
            </summary>
            <returns>A rectangular region representing the 2D bounds of the terrain.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.Skybox">
            <summary>
            Represents a skybox element in a 3D environment.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Skybox.#ctor(System.String,System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Skybox class with specified name, texture path, location, rotation, and scale.
            </summary>
            <param name="name">The name of the skybox.</param>
            <param name="path">The path to the texture for the skybox.</param>
            <param name="location">The initial location of the skybox.</param>
            <param name="rotation">The initial rotation of the skybox.</param>
            <param name="scale">The initial scale of the skybox.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Skybox.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates the skybox position based on the selected scene's camera location.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.Scene3D">
            <summary>
            Creates a scene for 3D rendering. This scene contains
            lightning and a optional skybox.
            </summary>
        </member>
        <member name="T:Genesis.Core.Scene">
            <summary>
            Represents a game scene in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Name">
            <summary>
            Gets or sets the name of the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Layer">
            <summary>
            Gets or sets the list of layers within the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Camera">
            <summary>
            Gets or sets the camera used for rendering the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Canvas">
            <summary>
            Gets or sets the list of UI canvases within the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.PhysicHandler">
            <summary>
            Gets or sets the physics handler for the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeScenePreperation">
            <summary>
            Event handler triggered before scene preparation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeSceneRender">
            <summary>
            Event handler triggered before scene rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.AfterSceneRender">
            <summary>
            Event handler triggered after scene rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeCanvasPreperation">
            <summary>
            Event handler triggered before UI canvas preparation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeCanvasRender">
            <summary>
            Event handler triggered before UI canvas rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.AfterCanvasRender">
            <summary>
            Event handler triggered after UI canvas rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.OnSceneResize">
            <summary>
            Event handler triggered when the scene is resized.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor">
            <summary>
            Creates a new game scene.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor(System.String)">
            <summary>
            Creates a new game scene with the specified name.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(Genesis.Core.Layer)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(System.String)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layerName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddCanvas(Genesis.UI.Canvas)">
            <summary>
            Adds a new ui canvas to the scene
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveLayer(Genesis.Core.Layer)">
            <summary>
            Removes a layer from the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetLayer(System.String)">
            <summary>
            Gets the layer with the given name
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Adds a GameElement in the scene. It will be placed in the given layer
            </summary>
            <param name="layerName"></param>
            <param name="gameElement"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElements(System.String,System.Collections.Generic.List{Genesis.Core.GameElement})">
            <summary>
            Adds GameElements into the scene. The elements will be placed in the given layer
            </summary>
            <param name="layer"></param>
            <param name="gameElements"></param>
        </member>
        <member name="M:Genesis.Core.Scene.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initial the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Update the scene and the elements. Called every frame
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnDestroy(Genesis.Core.Game)">
            <summary>
            Destroys the scene data
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String)">
            <summary>
            Gets the elements from the given layer
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String[])">
            <summary>
            Gets the elements from the given layers
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String)">
            <summary>
            Gets the element with the given name. This function searchs
            in every layer until it finds a element with an equal name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String,System.String)">
            <summary>
            Gets the element with the given name out of the given layer.
            </summary>
            <param name="layerName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetCanvas(System.String)">
            <summary>
            Gets the canvas with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetWidget(System.String,System.String)">
            <summary>
            Gets a entity with the given name from the canvas
            </summary>
            <param name="canvasName"></param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(Genesis.Core.GameElement)">
            <summary>
            Removes a element from the scene. This function will look in all 
            layer for the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Removes a element from the given layer
            </summary>
            <param name="layerName"></param>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(Genesis.UI.Canvas)">
            <summary>
            Removes the ui canvas from the scene
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(System.String)">
            <summary>
            Removes the ui canvas with the given name from the scene
            </summary>
            <param name="canvasName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.ResizeScene(Genesis.Graphics.Viewport)">
            <summary>
            Resizes the scene by invoking the event handler for scene resize.
            </summary>
            <param name="viewport">The viewport containing information about the new dimensions.</param>
        </member>
        <member name="T:Genesis.Core.Storage">
            <summary>
            Class for dynamic clearing not used elements.
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.#ctor">
            <summary>
            Create a new Storage instance
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.ManageElement(Genesis.Core.GameElement)">
            <summary>
            Add an element which get managed
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Storage.Process(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Removes disabled elements from the game and the garbage collector
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyNormalMap(System.Int32,System.Int32)">
            <summary>
            Creates an empty normal map
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyTexture(System.Int32,System.Int32)">
            <summary>
            Creates an empty texture
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldLocation(Genesis.Core.GameElement)">
            <summary>
            Returns the world location for the Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the World rotation for the element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldScale(Genesis.Core.GameElement)">
            <summary>
            Returns the world scale for the element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceLocation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts world transform to model space transform
            </summary>
            <param name="element"></param>
            <param name="worldPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceScale(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world scale to the model space scale
            </summary>
            <param name="element"></param>
            <param name="worldScale"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceRotation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world rotation to the model space rotation
            </summary>
            <param name="element"></param>
            <param name="worldRotation"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelTransformation(Genesis.Core.GameElement)">
            <summary>
            Returns the model transform matrix relative to the world location
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the model rotation matrix relativ to the world rotation
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelScale(Genesis.Core.GameElement)">
            <summary>
            Returns the model scale matrix relativ to the world scale
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.EulerToQuaternion(Genesis.Math.Vec3)">
            <summary>
            Converts an euler to an quaternion
            </summary>
            <param name="euler"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.LookAt(Genesis.Graphics.Camera,Genesis.Math.Vec3)">
            <summary>
            Let the camera look at an position
            </summary>
            <param name="camera"></param>
            <param name="targetPosition"></param>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateYaw(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the yaw
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculatePitch(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculate the pitch
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertColor(System.Drawing.Color)">
            <summary>
            Convert an System.Drawing.Color into an float array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.GLRenderer.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteColor(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteTexCords(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.Experimental2.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteColor(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteTexCords(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.GLRenderer2.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteColor(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteTexCords(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Genesis.Graphics.TexCoords">
            <summary>
            Values for texture coords
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor">
            <summary>
            Creates a new Aabb
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor(BulletSharp.Math.Vector3,BulletSharp.Math.Vector3)">
            <summary>
            Creates a new Aabb
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Genesis.Physics.Aabb.FromBulletRigidBody(BulletSharp.RigidBody)">
            <summary>
            Returns the aabb from a bullet rigidbody
            </summary>
            <param name="rigidBody"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Physics.Aabb.Contains(Genesis.Math.Vec3)">
            <summary>
            Checks if the aabb contains a point
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:Genesis.Physics.PhysicsHandler2D">
            <summary>
            Represents a 2D physics handler responsible for managing physics simulation in a game.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.PhysicsWorld">
            <summary>
            Gets or sets the 2D physics world used for simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.ProcessPhysics">
            <summary>
            Gets or sets a flag indicating whether physics simulation should be processed.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.TickRate">
            <summary>
            Gets or sets the tick rate for physics simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.Substepps">
            <summary>
            Gets ore sets the substepps for physic simulation
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PhysicsHandler2D class with specified gravity values.
            </summary>
            <param name="gravityX">The X component of gravity.</param>
            <param name="gravityY">The Y component of gravity.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.Process(Genesis.Core.Scene,Genesis.Core.Game)">
            <summary>
            Processes the physics simulation for the given scene and game.
            </summary>
            <param name="scene">The current game scene.</param>
            <param name="game">The current game instance.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.ManageElement(Genesis.Physics.PhysicsBehavior)">
            <summary>
            Manages a physics behavior element by adding its RigidBody to the physics world.
            </summary>
            <param name="rigidBody">The PhysicsBehavior representing the rigid body element.</param>
        </member>
        <member name="T:Genesis.Physics.PhysicsHandler3D">
            <summary>
            Represents a 3D physics handler responsible for managing physics simulation in a game.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler3D.PhysicsWorld">
            <summary>
            Gets or sets the 3D physics world used for simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler3D.ProcessPhysics">
            <summary>
            Gets or sets a flag indicating whether physics simulation should be processed.
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.#ctor(Genesis.Physics.PhysicPropeterys)">
            <summary>
            Initializes a new instance of the PhysicsHandler3D class with specified PhysicPropeterys.
            </summary>
            <param name="propeterys">The physics properties containing gravity values.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PhysicsHandler3D class with specified gravity values.
            </summary>
            <param name="gravityX">The X component of gravity.</param>
            <param name="gravityY">The Y component of gravity.</param>
            <param name="gravityZ">The Z component of gravity.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.Process(Genesis.Core.Scene,Genesis.Core.Game)">
            <summary>
            Processes the physics simulation for the given scene and game.
            </summary>
            <param name="scene">The current game scene.</param>
            <param name="game">The current game instance.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.ManageElement(Genesis.Physics.PhysicsBehavior)">
            <summary>
            Manages a physics behavior element by adding its RigidBody to the physics world.
            </summary>
            <param name="rigidBody">The PhysicsBehavior representing the rigid body element.</param>
        </member>
        <member name="T:Genesis.Math.Vec3">
            <summary>
            Vector for coordinates
            </summary>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Zero">
            <summary>
            Create a new vector with X = 0, Y = 0, Z = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(System.Single,System.Single)">
            <summary>
            Returns the offset angle to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(Genesis.Math.Vec3)">
            <summary>
            Returns the offset angle to the vector
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards(System.Single,System.Single)">
            <summary>
            Returns a new vector with the offset cordinates towards the given vector.
            </summary>
            <param name="degrees"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards2D(System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns a new vector towards the given direction.
            </summary>
            <param name="degrees"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the Vector towards in 3D
            </summary>
            <param name="rotation"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(System.Single,System.Single,System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the towards vector
            </summary>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="rotZ"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Distance(Genesis.Math.Vec3)">
            <summary>
            Returns the distance between two vectors
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(Genesis.Math.Vec3)">
            <summary>
            Adds the value from a vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddX(System.Single)">
            <summary>
            Add the value to the X param
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddY(System.Single)">
            <summary>
            Add the value to the y param
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddZ(System.Single)">
            <summary>
            Add the value to the z param
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Sub(Genesis.Math.Vec3)">
            <summary>
            Subtract the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(Genesis.Math.Vec3)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Forward(Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns the forward vector
            </summary>
            <param name="rotation"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Addition(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Add operator
            </summary>
            <param name="vec1"></param>
            <param name="vec2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Multiply(Genesis.Math.Vec3,System.Single)">
            <summary>
            Multiply with float
            </summary>
            <param name="vec"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Subtraction(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Sub operator
            </summary>
            <param name="vec1"></param>
            <param name="vec2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new canvas instance
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.AddWidget(Genesis.UI.Widget)">
            <summary>
            Adds a entity to the canvas
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnInit(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Initial the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Update the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene)">
            <summary>
            Renders the canvas
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnDispose(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Dispose the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.GetWidget(System.String)">
            <summary>
            Return a widget with the specified name, searching within entities and their children.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetBounds">
            <summary>
            Returns the bounds from the canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetScreenBounds">
            <summary>
            Returns the screen bounds from the canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.CenterWidget(Genesis.UI.Canvas,Genesis.UI.Widget)">
            <summary>
            Centers the widget in the middle of the canvas
            </summary>
            <param name="canvas"></param>
            <param name="widget"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadCanvas(System.String,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a canvas from a specified JSON file using a UI parser and asset manager.
            </summary>
            <param name="File">Path to the JSON file containing canvas configuration.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created canvas based on the JSON configuration.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadWidget(Newtonsoft.Json.Linq.JObject,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a widget from provided JSON data using a UI parser and asset manager.
            </summary>
            <param name="data">JSON data containing the configuration of the widget to be created.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created widget based on the JSON data.</returns>
        </member>
        <member name="T:Genesis.UI.UIParser">
            <summary>
            This class provides funtions to parse an json object as an widget.
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.#ctor">
            <summary>
            Creates a new instance for a entitiy
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.AddChildren(Genesis.UI.Widget)">
            <summary>
            Adds a children to the entity. Also sets the perent of the child entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnInit(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Initial the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Update the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the entity
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnDispose(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Dispose the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativePos(Genesis.UI.Canvas)">
            <summary>
            Get the relative postion to the screen.
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetChildren(System.String)">
            <summary>
            Returns the children with the name name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativeBounds2D(Genesis.UI.Canvas)">
            <summary>
            Get the bounds relative to the canvas
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.IsHover(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Rework!!!
            Checks if the mouse hovers over the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.FindChildren(System.String)">
            <summary>
            Recursively find a child widget with the given name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Label.#ctor(System.String,Genesis.Math.Vec3,System.String,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Create a new instance of the label
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.UI.Label.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the label
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Label.GetStringWidht">
            <summary>
            Returns the width from the string in float
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Label.GetStringBounds(Genesis.Math.Vec3)">
            <summary>
            Returns the display bounds from the string
            </summary>
            <param name="location">Location from the string</param>
            <returns></returns>
        </member>
        <member name="T:Genesis.UI.ProgressBar">
            <summary>
            ProgressBar Class
            </summary>
        </member>
        <member name="M:Genesis.UI.ProgressBar.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new progress bar
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Genesis.UI.ProgressBar.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the progress bar
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
    </members>
</doc>
