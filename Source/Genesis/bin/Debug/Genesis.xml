<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genesis</name>
    </assembly>
    <members>
        <member name="T:Genesis.Core.AssetManager">
            <summary>
            Manages game assets such as textures and fonts.
            </summary>
        </member>
        <member name="P:Genesis.Core.AssetManager.Textures">
            <summary>
            List of loaded textures.
            </summary>
        </member>
        <member name="P:Genesis.Core.AssetManager.Fonts">
            <summary>
            List of loaded fonts.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Core.AssetManager"/> class.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.AddTexture(System.String,System.Drawing.Bitmap)">
            <summary>
            Adds a texture to the asset manager.
            </summary>
            <param name="name">The name of the texture.</param>
            <param name="bitmap">The bitmap representing the texture.</param>
            <returns>The added texture.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetTexture(System.String)">
            <summary>
            Gets a texture by name.
            </summary>
            <param name="name">The name of the texture.</param>
            <returns>The texture with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetFont(System.String)">
            <summary>
            Gets a font by name.
            </summary>
            <param name="name">The name of the font.</param>
            <returns>The font with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.AssetManager.Init(Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the assets in the rendering device.
            </summary>
            <param name="renderDevice">The rendering device to load the assets into.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.DisposeTextures(Genesis.Core.Game)">
            <summary>
            Disposes of the loaded textures and fonts.
            </summary>
            <param name="game">The game object associated with the assets.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadTextures">
            <summary>
            Loads textures from the resource folder.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadFonts">
            <summary>
            Loads fonts from the resource folder.
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.AddFont(Genesis.Graphics.Font)">
            <summary>
            Adds an font
            </summary>
            <param name="font">the font to add</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.LoadSystemFont(System.String)">
            <summary>
            Loads a system font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Core.AssetManager.PackAssets(System.String)">
            <summary>
            Packs the assets into an asset library.
            </summary>
            <param name="file">The file path to save the asset library.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.ImportAssetLibary(System.String)">
            <summary>
            Imports assets from an asset library.
            </summary>
            <param name="file">The file path of the asset library to import.</param>
        </member>
        <member name="M:Genesis.Core.AssetManager.GetRessourcesDirectory">
            <summary>
            Gets the resource directory path.
            </summary>
            <returns>The path to the resource directory.</returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.AnimationBehavior">
            <summary>
            Represents a behavior that enables sprite animations in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.AnimationSheet">
            <summary>
            Gets or sets the texture containing the animation frames.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.FrameTime">
            <summary>
            Gets or sets the time in milliseconds between animation frames.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.Cells">
            <summary>
            Gets or sets the number of cells (frames) in a row in the animation sheet.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.Rows">
            <summary>
            Gets or sets the number of rows in the animation sheet.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.Animations">
            <summary>
            Gets or sets the list of animations available for this behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.AnimationBehavior.SelectedAnimation">
            <summary>
            Gets or sets the currently selected animation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.#ctor">
            <summary>
            Initializes a new instance of the AnimationBehavior class.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.#ctor(System.Single,System.Single,System.Int64,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the AnimationBehavior class with specified parameters.
            </summary>
            <param name="cells">The number of cells (frames) in a row in the animation sheet.</param>
            <param name="rows">The number of rows in the animation sheet.</param>
            <param name="frameTime">The time in milliseconds between animation frames.</param>
            <param name="animationSheet">The texture containing the animation frames.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game element is initialized.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.AddAnimation(Genesis.Graphics.Animation)">
            <summary>
            Adds an animation to the list of available animations.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.LoadAnimation(System.String)">
            <summary>
            Loads the specified animation by name.
            </summary>
            <param name="name">The name of the animation to load.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.Play">
            <summary>
            Starts playing the animation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.Stop">
            <summary>
            Stops playing the animation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.AnimationBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game element is updated.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.MovementFlags">
            <summary>
            Enumeration for defining movement flags.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.CameraFlags">
            <summary>
            Enumeration for defining camera flags.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.ControllerPreset">
            <summary>
            Enumeration for defining controller presets.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.MoveDirection">
            <summary>
            Enumeration for the move direction
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.CharacterController2D">
            <summary>
            Class representing a 2D character controller as a game behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.Mass">
            <summary>
            Gets or sets the mass of the character.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.Speed">
            <summary>
            Gets or sets the speed of the character movement.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.JumpSpeed">
            <summary>
            Gets or sets the jump speed of the character.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.UpKey">
            <summary>
            Gets or sets the key for moving the character up.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.DownKey">
            <summary>
            Gets or sets the key for moving the character down.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.LeftKey">
            <summary>
            Gets or sets the key for moving the character right.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.RightKey">
            <summary>
            Gets or sets the key for making the character jump.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.JumpKey">
            <summary>
            Gets or sets whether jumping is allowed.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.AllowJump">
            <summary>
            Gets or sets the jump cooldown duration in milliseconds.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.JumpCooldown">
            <summary>
            Gets or sets the jump cooldown in milliseconds
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.CameraFlags">
            <summary>
            Gets or sets the camera flags for character control.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.MovementFlags">
            <summary>
            Gets or sets the movement flags for character control.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.MoveDirection">
            <summary>
            Gets the last movement direction from the character
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.Rigidbody">
            <summary>
            Gets or sets the Rigidbody2D component for character physics.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.ColliderRadius">
            <summary>
            Gets or sets the collider radius
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.CharacterController2D.ColliderHeight">
            <summary>
            Gets or sets the follider height
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.#ctor">
            <summary>
            Default constructor for CharacterController2D.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Initialization method called when the game starts.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent GameElement of the behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.CreatePhysics(Genesis.Physics.PhysicHandler,Genesis.Core.Behaviors.ControllerPreset)">
            <summary>
            Creates physics for the character based on the specified controller preset.
            </summary>
            <param name="physicsHandler">The physics handler for creating the physics.</param>
            <param name="controllerPreset">The preset for the controller.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.CreatePhysics(Genesis.Physics.PhysicHandler)">
            <summary>
            Creates default physics for the character with no specified factors.
            </summary>
            <param name="physicHandler">The physics handler for creating the physics.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.CreatePhysics(Genesis.Physics.PhysicHandler,Genesis.Math.Vec3,Genesis.Math.Vec3,System.Boolean)">
            <summary>
            Creates physics for the character with specified factors and physics enabling.
            </summary>
            <param name="physicHandler">The physics handler for creating the physics.</param>
            <param name="linearFactor">The linear factor for the physics.</param>
            <param name="angularFactor">The angular factor for the physics.</param>
            <param name="enablePhysics">Specifies whether physics should be enabled initially.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Updates the character state on each frame.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent GameElement of the behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.CharacterProcess(Genesis.Core.Game)">
            <summary>
            Processes character movement and behavior based on user input.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Destruction method called when the game ends or the behavior is removed.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent GameElement of the behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.CharacterController2D.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Rendering method called during the rendering phase.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent GameElement of the behavior.</param>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider">
            <summary>
            Represents a behavior for creating a physics collider for 2D sprites using BulletSharp.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.RigidBody">
            <summary>
            Gets or sets the rigid body associated with the collider.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.LinearFactor">
            <summary>
            Gets or sets the linear factor for the RigidBody's motion.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.AngularFactor">
            <summary>
            Gets or sets the angular factor for the RigidBody's rotation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.GetPhysicsObject">
            <summary>
            Gets the physics object associated with the collider.
            </summary>
            <returns>The rigid body associated with the collider.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.GetPhysicsObject``1">
            <summary>
            Gets the typed physics object associated with the collider.
            </summary>
            <typeparam name="T">Type of the physics object.</typeparam>
            <returns>The typed rigid body associated with the collider.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.CreateRigidBody(System.Single,Genesis.Physics.PhysicHandler)">
            <summary>
            Creates a rigid body for the collider.
            </summary>
            <param name="mass">The mass of the rigid body.</param>
            <param name="handler">The physics handler for managing the collider.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Placeholder for OnDestroy event. No implementation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Placeholder for OnInit event. No implementation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Placeholder for OnRender event. No implementation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Placeholder for OnUpdate event. No implementation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this 2D physics behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.LinearFactor">
            <summary>
            Gets or sets the linear factor for the RigidBody's motion.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.AngularFactor">
            <summary>
            Gets or sets the angular factor for the RigidBody's rotation.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.CreateRigidbody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Creates a RigidBody with the specified mass using the provided PhysicHandler.
            </summary>
            <param name="handler">The PhysicHandler responsible for managing physics elements.</param>
            <param name="mass">The mass of the RigidBody.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.UpdateRigidBody">
            <summary>
            Updates the RigidBody's motion state based on the parent's location.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being destroyed.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being initialized.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase of the game update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Updates the behavior during the game's update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.GetPhysicsObject">
            <summary>
            Gets the physics object associated with this behavior.
            </summary>
            <returns>The RigidBody physics object.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.GetPhysicsObject``1">
            <summary>
            Gets the physics object associated with this behavior, cast to the specified type.
            </summary>
            <typeparam name="T">The type to which the physics object is cast.</typeparam>
            <returns>The RigidBody physics object cast to the specified type.</returns>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this 2D physics behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.LinearFactor">
            <summary>
            Gets or sets the linear factor for the RigidBody's motion.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.AngularFactor">
            <summary>
            Gets or sets the angular factor for the RigidBody's rotation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.EnablePhysic">
            <summary>
            Gets or sets a value indicating whether physics is enabled for this behavior.
            </summary>
            <value><c>true</c> if physics is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.CreateRigidbody(Genesis.Physics.PhysicHandler,System.Single,System.Single[])">
            <summary>
            Creates a RigidBody with the specified mass using the provided PhysicHandler.
            </summary>
            <param name="handler">The PhysicHandler responsible for managing physics elements.</param>
            <param name="mass">The mass of the RigidBody.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.UpdateRigidBody">
            <summary>
            Updates the RigidBody's motion state based on the parent's location.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being destroyed.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being initialized.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase of the game update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Updates the behavior during the game's update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.GetPhysicsObject">
            <summary>
            Gets the physics object associated with this behavior.
            </summary>
            <returns>The RigidBody physics object.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.GetPhysicsObject``1">
            <summary>
            Gets the physics object associated with this behavior, cast to the specified type.
            </summary>
            <typeparam name="T">The type to which the physics object is cast.</typeparam>
            <returns>The RigidBody physics object cast to the specified type.</returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics2D.Rigidbody2D">
            <summary>
            Represents a 2D physics behavior for game elements.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this 2D physics behavior.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.LinearFactor">
            <summary>
            Gets or sets the linear factor for the RigidBody's motion.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.AngularFactor">
            <summary>
            Gets or sets the angular factor for the RigidBody's rotation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.EnablePhysic">
            <summary>
            Gets or sets whether physics is enabled.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.CreateRigidbody(Genesis.Physics.PhysicHandler,System.Single,System.Single,System.Single)">
            <summary>
            Creates a RigidBody with the specified mass using the provided PhysicHandler.
            </summary>
            <param name="handler">The PhysicHandler responsible for managing physics elements.</param>
            <param name="mass">The mass of the RigidBody.</param>
            <param name="capsuleRadius">The radius of the capsule shape of the RigidBody.</param>
            <param name="capsuleHeight">The height of the capsule shape of the RigidBody.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.CreateRigidbody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Creates a RigidBody with the specified mass using the provided PhysicHandler and default values for capsule radius and height.
            </summary>
            <param name="handler">The PhysicHandler responsible for managing physics elements.</param>
            <param name="mass">The mass of the RigidBody.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.UpdateRigidBody">
            <summary>
            Updates the RigidBody's motion state based on the parent's location.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being destroyed.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is being initialized.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase of the game update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Updates the behavior during the game's update cycle.
            </summary>
            <param name="game">The current game instance.</param>
            <param name="parent">The parent game element associated with this behavior.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.GetPhysicsObject">
            <summary>
            Gets the physics object associated with this behavior.
            </summary>
            <returns>The RigidBody physics object.</returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics2D.Rigidbody2D.GetPhysicsObject``1">
            <summary>
            Gets the physics object associated with this behavior, cast to the specified type.
            </summary>
            <typeparam name="T">The type to which the physics object is cast.</typeparam>
            <returns>The RigidBody physics object cast to the specified type.</returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics3D.QubeConvexHull">
            <summary>
            Represents a Physics behavior for a 3D cube with a convex hull shape.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this behavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.CreateRigidBody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Creates a RigidBody for the QubeConvexHull behavior.
            </summary>
            <param name="handler">Physics handler responsible for managing elements.</param>
            <param name="mass">Mass of the rigid body.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Handles collision events for the QubeConvexHull behavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.UpdateRigidBody">
            <summary>
            Updates the RigidBody's position and rotation based on the associated parent element.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.GetPhysicsObject">
            <summary>
            Gets the associated RigidBody as an object.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.GetPhysicsObject``1">
            <summary>
            Gets the associated RigidBody with the specified type.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is destroyed.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is initialized.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.QubeConvexHull.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the update phase.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior">
            <summary>
            Represents a Physics behavior for a static mesh in 3D.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this behavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.CreateRigidBody(Genesis.Physics.PhysicHandler,System.Single,Genesis.Graphics.Mesh)">
            <summary>
            Creates the RigidBody for the StaticMeshBehavior.
            </summary>
            <param name="handler">Physics handler responsible for managing elements.</param>
            <param name="mass">Mass of the rigid body.</param>
            <param name="mesh">Mesh data for creating the collision shape.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the parent element is not of type Element3D.</exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Handles collision events for the StaticMeshBehavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.UpdateRigidBody">
            <summary>
            Updates the RigidBody's position and scaling based on the associated parent element.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Destroys the behavior.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Checks on init if the parent type is an Element3D.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
            <exception cref="T:System.InvalidOperationException">Thrown when the parent element is not of type Element3D.</exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Renderer callback
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Update callback.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.GetPhysicsObject">
            <summary>
            Returns the physics object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.GetPhysicsObject``1">
            <summary>
            Returns the physics object with the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior">
            <summary>
            Represents a ConvexHull Rigidbody for Element3D.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.RigidBody">
            <summary>
            Gets or sets the RigidBody associated with this behavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.CreateRigidBody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Creates a RigidBody for the ConvexHullBehavior.
            </summary>
            <param name="handler">Physics handler responsible for managing elements.</param>
            <param name="mass">Mass of the rigid body.</param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Handles collision events for the ConvexHullBehavior.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.UpdateRigidBody">
            <summary>
            Updates the RigidBody's position, rotation, and scale based on the associated parent element.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is destroyed.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the associated game element is initialized.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the update phase.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.GetPhysicsObject">
            <summary>
            Gets the associated RigidBody as an object.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.GetPhysicsObject``1">
            <summary>
            Gets the associated RigidBody with the specified type.
            </summary>
        </member>
        <member name="T:Genesis.Core.Behaviors.SpriteMovementController">
            <summary>
            Represents a behavior for controlling the movement of a sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.SpriteMovementController.Automove">
            <summary>
            Gets or sets a flag indicating whether automatic movement is enabled.
            </summary>
        </member>
        <member name="P:Genesis.Core.Behaviors.SpriteMovementController.MoveSpeed">
            <summary>
            Gets or sets the speed of the sprite movement.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.#ctor">
            <summary>
            Initializes a new instance of the SpriteMovementController class.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the behavior is destroyed.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the behavior is initialized.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the rendering phase.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called during the update phase.
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.MoveUp">
            <summary>
            Moves the sprite upwards.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.MoveDown">
            <summary>
            Moves the sprite downwards.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.MoveLeft">
            <summary>
            Moves the sprite to the left.
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.SpriteMovementController.MoveRight">
            <summary>
            Moves the sprite to the right.
            </summary>
        </member>
        <member name="T:Genesis.Core.Game">
            <summary>
            Represents the main game class responsible for managing game loops, scenes, rendering, and updates.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Run">
            <summary>
            Gets or sets a value indicating whether the game loop is running.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.RenderDevice">
            <summary>
            Gets or sets the rendering device used by the game.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Scenes">
            <summary>
            Gets or sets the list of scenes in the game.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.SelectedScene">
            <summary>
            Gets or sets the currently selected scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.AssetManager">
            <summary>
            Gets or sets the asset manager for handling game assets.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Viewport">
            <summary>
            Gets or sets the viewport configuration for rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.TargetFPS">
            <summary>
            Gets or sets the target frames per second for the game loop.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.FPS">
            <summary>
            Gets or sets the current frames per second achieved by the game loop.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.LastFrame">
            <summary>
            Gets or sets the timestamp of the last frame.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.DeltaTime">
            <summary>
            Gets or sets the time elapsed since the last frame in milliseconds.
            </summary>
        </member>
        <member name="P:Genesis.Core.Game.Storage">
            <summary>
            Gets or sets the storage object for managing game data.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnInit">
            <summary>
            Event triggered when the game initializes.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.BeforeUpdate">
            <summary>
            Event triggered before the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnUpdate">
            <summary>
            Event triggered during the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.AfterUpdate">
            <summary>
            Event triggered after the game update.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.BeforeRender">
            <summary>
            Event triggered before rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnRenderBeginn">
            <summary>
            Event triggered at the beginning of rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnRenderEnd">
            <summary>
            Event triggered at the end of rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.AfterRender">
            <summary>
            Event triggered after rendering.
            </summary>
        </member>
        <member name="E:Genesis.Core.Game.OnDispose">
            <summary>
            Event triggered when the game is disposed.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.#ctor(Genesis.Graphics.IRenderDevice,Genesis.Graphics.Viewport)">
            <summary>
            Creates a new instance of the Game class.
            </summary>
            <param name="renderDevice">The rendering device to use.</param>
            <param name="viewport">The viewport configuration.</param>
        </member>
        <member name="M:Genesis.Core.Game.Start">
            <summary>
            Starts the main game loop.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Loop">
            <summary>
            Main game loop. Handles updates and rendering.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Stop">
            <summary>
            Stops the main game loop.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.GetElementScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Get the screen coordinates of the given element.
            </summary>
            <param name="element">The GameElement to get the screen coordinates for.</param>
            <returns>A Vec3 representing the screen coordinates of the element.</returns>
        </member>
        <member name="M:Genesis.Core.Game.GetElementCenterScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Returns the screen location of the given element with a center anchor.
            </summary>
            <param name="element">The GameElement to get the centered screen coordinates for.</param>
            <returns>A Vec3 representing the centered screen coordinates of the element.</returns>
        </member>
        <member name="M:Genesis.Core.Game.GetSceneCord(Genesis.Math.Vec3)">
            <summary>
            Transforms a display vector to a vector inside the scene.
            </summary>
            <param name="location">The display vector to transform.</param>
            <returns>A Vec3 representing the transformed vector inside the scene.</returns>
        </member>
        <member name="M:Genesis.Core.Game.AddScene(Genesis.Core.Scene)">
            <summary>
            Adds a scene to the list of scenes.
            </summary>
            <param name="scene">The Scene object to be added.</param>
            <returns>The added Scene object.</returns>
        </member>
        <member name="M:Genesis.Core.Game.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Initializes a GameElement within the game environment.
            </summary>
            <param name="element">The GameElement to be initialized.</param>
        </member>
        <member name="M:Genesis.Core.Game.LoadScene(System.String)">
            <summary>
            Loads a scene with the given name.
            </summary>
            <param name="name">The name of the scene to be loaded.</param>
        </member>
        <member name="T:Genesis.Core.GameElement">
            <summary>
            Represents a base class for game elements in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Name">
            <summary>
            Gets or sets the name of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Tag">
            <summary>
            Gets or sets the tag associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Location">
            <summary>
            Gets or sets the 3D coordinates of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Rotation">
            <summary>
            Gets or sets the 3D rotation of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Size">
            <summary>
            Gets or sets the 3D size of the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Behaviors">
            <summary>
            Gets or sets the list of behaviors associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Scene">
            <summary>
            Gets or sets the scene to which the game element belongs.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Enabled">
            <summary>
            Gets or sets a value indicating whether the game element is enabled.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Propertys">
            <summary>
            Gets or sets the properties associated with the game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Children">
            <summary>
            Gets or sets the list of child game elements.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.Parent">
            <summary>
            Gets or sets the parent game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElement.UUID">
            <summary>
            Gets or sets the unique identifier for the game element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElement.#ctor">
            <summary>
            Creates a new instance of the GameElement class.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElement.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is initialized.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is rendered.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is updated.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the game element is disposed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior``1(``0)">
            <summary>
            Adds a behavior of type T to the game element and returns it.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <param name="behavior">The behavior to be added.</param>
            <returns>The added behavior of type T.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior(Genesis.Core.IGameBehavior)">
            <summary>
            Adds a behavior to the game element.
            </summary>
            <param name="behavior">The behavior to be added.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehavior``1">
            <summary>
            Gets the first game behavior of type T.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <returns>The first game behavior of type T, or null if not found.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehaviors``1">
            <summary>
            Returns all behaviors of type T.
            </summary>
            <typeparam name="T">The type of the behavior.</typeparam>
            <returns>A list of all behaviors of type T.</returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddChild(Genesis.Core.GameElement)">
            <summary>
            Adds a child game element to the current game element.
            </summary>
            <param name="element">The child game element to be added.</param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetInstance(Genesis.Core.GameElement)">
            <summary>
            Copies the properties from another game element instance to the current one.
            </summary>
            <param name="element">The game element from which to copy properties.</param>
        </member>
        <member name="T:Genesis.Core.GameElments.ParticleBuffers">
            <summary>
            Represents the buffers for particle data, including vertices, texture coordinates, colors, positions, rotations, and scales.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElments.ParticleDeffinition">
            <summary>
            Represents the definition of a particle, including location, rotation, size, delay, last update time, speed, rotation speed, and particle color.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.Location">
            <summary>
            Gets or sets the location of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.Rotation">
            <summary>
            Gets or sets the rotation of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.Size">
            <summary>
            Gets or sets the size of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.Delay">
            <summary>
            Gets or sets the delay before the particle becomes active.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.LastUpdate">
            <summary>
            Gets or sets the last update time of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.Speed">
            <summary>
            Gets or sets the speed of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.RotationSpeed">
            <summary>
            Gets or sets the rotation speed of the particle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleDeffinition.ParticleColor">
            <summary>
            Gets or sets the color of the particle.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElments.ParticleEmitter">
            <summary>
            Represents a particle emitter as a game element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.Texture">
            <summary>
            Gets or sets the texture used for the particles.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.ParticleDirection">
            <summary>
            Gets or sets the primary direction of particle movement.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.ParticleDirection2">
            <summary>
            Gets or sets the secondary direction of particle movement.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.ParticleDistance">
            <summary>
            Gets or sets the maximum distance a particle can travel before being reset.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.ParticleMask">
            <summary>
            Gets or sets the mask for the particles
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElments.ParticleEmitter.ParticleDeffinitions">
            <summary>
            Gets or sets the list of particle definitions managed by the emitter.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the ParticleEmitter class with specified parameters.
            </summary>
            <param name="name">The name of the particle emitter.</param>
            <param name="location">The initial location of the particle emitter.</param>
            <param name="rotation">The initial rotation of the particle emitter.</param>
            <param name="size">The initial size of the particle emitter.</param>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.CreateParticles(System.Int32,Genesis.Math.Vec3)">
            <summary>
            Generates particles with default settings, using the provided particle size.
            </summary>
            <param name="numPartikel">The number of particles to create.</param>
            <param name="particleSize">The size of each particle.</param>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.CreateParticles(System.Int32,Genesis.Math.Vec3,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Generates particles with default settings, using the provided particle size and specified colors.
            </summary>
            <param name="numPartikel">The number of particles to create.</param>
            <param name="particleSize">The size of each particle.</param>
            <param name="colorA">The minimum color of particles.</param>
            <param name="colorB">The maximum color of particles.</param>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.CreateParticles(System.Int32,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Generates particles with custom settings, including particle size, rotation, delay, speed, and rotation speed.
            </summary>
            <param name="numPartikel">The number of particles to create.</param>
            <param name="particleSize">The size of each particle.</param>
            <param name="minRotation">The minimum rotation of particles.</param>
            <param name="maxRotation">The maximum rotation of particles.</param>
            <param name="minDelay">The minimum delay before particles become active.</param>
            <param name="maxDelay">The maximum delay before particles become active.</param>
            <param name="minSpeed">The minimum speed of particles.</param>
            <param name="maxSpeed">The maximum speed of particles.</param>
            <param name="minRotationSpeed">The minimum rotation speed of particles.</param>
            <param name="maxRotationSpeed">The maximum rotation speed of particles.</param>
            <param name="colorA">The minimum color of particles.</param>
            <param name="colorB">The maximum color of particles.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Genesis.Core.GameElments.ParticleEmitter.CreateParticles(System.Int32,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color)" -->
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.ProcessParticle(Genesis.Core.GameElments.ParticleDeffinition,System.Int64)">
            <summary>
            Processes the movement and rotation of a particle based on its current state.
            </summary>
            <param name="particle">The particle definition to be processed.</param>
            <param name="now">The current time in milliseconds.</param>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.GetParticleBuffers">
            <summary>
            Generates the buffer for the particles, including vertices, colors, texture coordinates, positions, rotations, and scales.
            </summary>
            <returns>Particle buffers containing vertices, colors, texture coordinates, positions, rotations, and scales.</returns>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the particle emitter is being destroyed in the game.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElments.ParticleEmitter.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the particle emitter using the specified render device.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.IGameBehavior">
            <summary>
            Represents the base class for game behaviors in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.IGameBehavior.Parent">
            <summary>
            Gets or sets the parent game element to which this behavior is attached.
            </summary>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is initialized.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is updated.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is rendered.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="M:Genesis.Core.IGameBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Called when the game behavior is being destroyed.
            </summary>
            <param name="game">The game instance.</param>
            <param name="parent">The parent game element.</param>
        </member>
        <member name="T:Genesis.Core.Input">
            <summary>
            Provides utility methods for handling user input in the Genesis framework.
            </summary>
        </member>
        <member name="M:Genesis.Core.Input.GetAsyncKeyState(System.Windows.Forms.Keys)">
            <summary>
            Gets the state of the specified key.
            </summary>
            <param name="vKey">The virtual key code to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetAsyncKeyState(System.Int32)">
            <summary>
            Gets the state of the specified key.
            </summary>
            <param name="vKey">The virtual key code to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.IsKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Checks if the specified key is currently pressed.
            </summary>
            <param name="vKey">The virtual key to check.</param>
            <returns>True if the key is down; otherwise, false.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetMousePos">
            <summary>
            Gets the current mouse position.
            </summary>
            <returns>A Vec3 representing the current mouse position.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(System.Windows.Forms.Control)">
            <summary>
            Gets the mouse position relative to the specified control.
            </summary>
            <param name="control">The control relative to which the mouse position is obtained.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(System.IntPtr)">
            <summary>
            Gets the mouse position relative to the control associated with the specified handle.
            </summary>
            <param name="handle">The handle of the control.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="M:Genesis.Core.Input.GetRefMousePos(Genesis.Core.Game)">
            <summary>
            Gets the mouse position relative to the control associated with the specified game instance.
            </summary>
            <param name="game">The game instance.</param>
            <returns>A Vec3 representing the mouse position relative to the control.</returns>
        </member>
        <member name="T:Genesis.Core.Layer">
            <summary>
            Represents a layer containing game elements in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.Name">
            <summary>
            Gets or sets the name of the layer.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.Elements">
            <summary>
            Gets or sets the list of game elements within the layer.
            </summary>
        </member>
        <member name="P:Genesis.Core.Layer.UpdateElements">
            <summary>
            Gets or sets a value indicating whether the elements within the layer should be updated.
            </summary>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor">
            <summary>
            Creates a new instance of the Layer class.
            </summary>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor(System.String)">
            <summary>
            Creates a new instance of the Layer class with the specified name.
            </summary>
            <param name="name">The name of the layer.</param>
        </member>
        <member name="M:Genesis.Core.Layer.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the Layer class with the specified name and updateElements flag.
            </summary>
            <param name="name">The name of the layer.</param>
            <param name="updateElements">Flag indicating whether the elements within the layer should be updated.</param>
        </member>
        <member name="M:Genesis.Core.Layer.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates all game elements within the layer if the UpdateElements flag is true.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The rendering device.</param>
        </member>
        <member name="M:Genesis.Core.Layer.OnDestroy(Genesis.Core.Game)">
            <summary>
            Destroys all game elements within the layer.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="T:Genesis.Core.Light">
            <summary>
            Represents a light source in the Genesis framework.
            </summary>
        </member>
        <member name="M:Genesis.Core.Light.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Creates a new instance of the Light class with the specified name and location.
            </summary>
            <param name="name">The name of the light.</param>
            <param name="location">The 3D location of the light.</param>
        </member>
        <member name="P:Genesis.Core.Light.LightColor">
            <summary>
            Gets or sets the color of the light.
            </summary>
        </member>
        <member name="P:Genesis.Core.Light.Intensity">
            <summary>
            Gets or sets the intensity of the light.
            </summary>
        </member>
        <member name="M:Genesis.Core.Light.GetLightDirection(Genesis.Graphics.Camera)">
            <summary>
            Returns the direction vector from the light to the camera.
            </summary>
            <param name="camera">The camera to which the direction is calculated.</param>
            <returns>The normalized vector representing the light direction.</returns>
        </member>
        <member name="M:Genesis.Core.Light.GetLightColor">
            <summary>
            Returns the light color in RGB values normalized between 0 and 1.
            </summary>
            <returns>A Vec3 representing the normalized RGB values of the light color.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.SpriteShapeDeffinition">
            <summary>
            Represents the definition of the shape for a sprite, including its location and size.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.BufferedSprite">
            <summary>
            Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Verticies">
            <summary>
            Gets or sets the list of vertices for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Colors">
            <summary>
            Gets or sets the list of colors for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.TexCoords">
            <summary>
            Gets or sets the list of texture coordinates for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.ShapeDeffinitions">
            <summary>
            Gets or sets the list of shape definitions for the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.BufferedSprite.Texture">
            <summary>
            Gets or sets the texture applied to the sprite.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.#ctor(System.String,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Creates a new buffered sprite with the specified name, location, and texture.
            </summary>
            <param name="name">The name of the game element.</param>
            <param name="location">The location of the game element.</param>
            <param name="texture">The texture applied to the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.AddShape(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Adds a new rectangular shape at the given location and with the given size to the sprite.
            </summary>
            <param name="location">The location for the sprite.</param>
            <param name="size">The size for the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.AddShape(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.TexCoords)">
            <summary>
            Adds a new rectangular shape at the given location, size, and texture coordinates to the sprite.
            </summary>
            <param name="location">The location for the sprite.</param>
            <param name="size">The size for the sprite.</param>
            <param name="texCoords">The texture coordinates for the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.BufferedSprite.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.CameraElement">
            <summary>
            Represents a game element that serves as a camera within the game world.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Camera">
            <summary>
            Gets or sets the camera associated with this element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Location">
            <summary>
            Gets or sets the location of the camera within the game world.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Rotation">
            <summary>
            Gets or sets the rotation of the camera.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.CameraElement.Size">
            <summary>
            Gets or sets the size of the camera.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.CameraElement.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.CameraType)">
            <summary>
            Initializes a new instance of the CameraElement class with specified parameters.
            </summary>
            <param name="name">The name of the camera element.</param>
            <param name="location">The initial location of the camera.</param>
            <param name="cameraSize">The size of the camera.</param>
            <param name="near">The near clipping plane distance of the camera.</param>
            <param name="far">The far clipping plane distance of the camera.</param>
            <param name="type">The type of the camera (perspective or orthographic).</param>
        </member>
        <member name="M:Genesis.Core.GameElements.CameraElement.#ctor(System.String,Genesis.Graphics.Camera)">
            <summary>
            Initializes a new instance of the CameraElement class with an existing camera.
            </summary>
            <param name="name">The name of the camera element.</param>
            <param name="camera">The camera object to associate with this element.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.TerrainData">
            <summary>
            Represents a 3D terrain element.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Terrain3D">
            <summary>
            Represents a 3D terrain element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.TerrainData">
            <summary>
            Gets or sets the terrain data.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.Color">
            <summary>
            Gets or sets the color of the terrain.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain3D.AltColor">
            <summary>
            Gets or sets the alternate color of the terrain.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Terrain3D class with default values.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3,System.Single,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the Terrain3D class with specified name, location, height value, and heightmap.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="heightValue">The height value of the terrain.</param>
            <param name="heightmap">The heightmap for generating the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.#ctor(System.String,Genesis.Math.Vec3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Terrain3D class with specified name, location, cell counts, and cell dimensions.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="cellsX">The number of cells in the X direction.</param>
            <param name="cellsZ">The number of cells in the Z direction.</param>
            <param name="cellWidth">The width of each cell.</param>
            <param name="cellHeight">The height of each cell.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrainData(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Generates terrain data based on specified parameters.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrain(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Generates terrain data from a heightmap.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.GenerateTerrainTile(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Generates a tile for the terrain grid.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.CreateTerrainTileColor(System.Drawing.Color)">
            <summary>
            Creates color data for a terrain tile.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the terrain element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain3D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the terrain element.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Element3D">
            <summary>
            Represents a 3D element in the game world, such as a 3D model with shaders.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.Shader">
            <summary>
            Gets or sets the shader program associated with this 3D element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.Meshes">
            <summary>
            Gets or sets the meshes from the model
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.Materials">
            <summary>
            Gets or sets the materials from the model
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Element3D.HasTransparancy">
            <summary>
            Gets or sets a value indicating whether the object has transparency.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.#ctor(System.String,System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Element3D class with specified parameters.
            </summary>
            <param name="name">The name of the 3D element.</param>
            <param name="path">The file path to the 3D model.</param>
            <param name="location">The initial location of the 3D element.</param>
            <param name="rotation">The initial rotation of the 3D element.</param>
            <param name="scale">The initial scale of the 3D element.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being updated. Override to provide custom update logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being initialized. Override to provide custom initialization logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game is being rendered. Override to provide custom rendering logic.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the game element is being destroyed. Override to provide custom cleanup logic.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.GetShape">
            <summary>
            Gets the shape data of the 3D element.
            </summary>
            <returns>An array representing the shape data.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Element3D.GetMaterialBuffers(Genesis.Graphics.Material)">
            <summary>
            Gets the material buffers for a specific material index.
            </summary>
            <param name="material">The material index.</param>
            <returns>A MaterialBuffer containing vertex, normal, and texture coordinate data.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.Empty">
            <summary>
            Represents an empty game element.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Empty.#ctor">
            <summary>
            Initializes a new instance of the Empty class.
            </summary>
        </member>
        <member name="T:Genesis.Core.GameElements.Qube">
            <summary>
            Represents a cube-shaped game element with customizable appearance.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Shader">
            <summary>
            Gets or sets the shader program associated with this cube.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Shape">
            <summary>
            Gets or sets the cube shape definition.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Qube.Color">
            <summary>
            Gets or sets the color of the cube.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with default settings.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with specified size.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
            <param name="size">The size of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Qube class with specified size and rotation.
            </summary>
            <param name="name">The name of the cube.</param>
            <param name="location">The initial location of the cube.</param>
            <param name="size">The size of the cube.</param>
            <param name="rotation">The initial rotation of the cube.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.GetColors(System.Drawing.Color)">
            <summary>
            Gets an array of color values based on the specified color.
            </summary>
            <param name="color">The color for the cube faces.</param>
            <returns>An array of color values for the cube faces.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Qube.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.RectElement">
            <summary>
            Simple rectangle element
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.BorderColor">
            <summary>
            Gets or sets the color of the rectangle border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.BorderWidth">
            <summary>
            Gets or sets the width of the rectangle border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.HasBorder">
            <summary>
            Gets or sets a value indicating whether the rectangle has a border.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.Fill">
            <summary>
            Gets or sets the fill color of the rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.RectElement.HasFill">
            <summary>
            Gets or sets a value indicating whether the rectangle has fill color.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.RectElement.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="name">The name of the rectangle.</param>
            <param name="location">The location of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.RectElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the rectangle
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.GameElements.Sprite">
            <summary>
            Represents a sprite element in a 2D or 3D environment.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.Texture">
            <summary>
            Gets or sets the texture of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.Color">
            <summary>
            Gets or sets the color of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.TexCoords">
            <summary>
            Gets or sets the texture coordinates of the sprite.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Sprite.OcclusionCulling">
            <summary>
            Gets or sets a value indicating whether occlusion culling is enabled for the sprite.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the Sprite class with specified name, location, size, and texture.
            </summary>
            <param name="name">The name of the sprite.</param>
            <param name="location">The initial location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="texture">The texture for the sprite.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the sprite element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the sprite element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.OnDestroy(Genesis.Core.Game)">
            <summary>
            Handles cleanup and resource disposal when the sprite is destroyed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.GetBounds2D">
            <summary>
            Gets the 2D bounds of the sprite.
            </summary>
            <returns>A rectangular region representing the 2D bounds of the sprite.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.GetCenterLocation">
            <summary>
            Gets the center location of the sprite.
            </summary>
            <returns>The center location of the sprite.</returns>
        </member>
        <member name="M:Genesis.Core.GameElements.Sprite.CalculateVerticies">
            <summary>
            Calculates the vertex coordinates of the sprite.
            </summary>
            <returns>An array containing the vertex coordinates of the sprite.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.Terrain2D">
            <summary>
            Represents a 2D terrain element.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.Texture">
            <summary>
            Gets or sets the texture of the terrain.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellsX">
            <summary>
            Gets or sets the number of cells in the X direction.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellsY">
            <summary>
            Gets or sets the number of cells in the Y direction.
            </summary>
        </member>
        <member name="P:Genesis.Core.GameElements.Terrain2D.CellSize">
            <summary>
            Gets or sets the size of each cell.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.#ctor(System.String,Genesis.Math.Vec3,System.Single,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the Terrain2D class with specified name, location, cell counts, cell size, and texture.
            </summary>
            <param name="name">The name of the terrain.</param>
            <param name="location">The initial location of the terrain.</param>
            <param name="cellsX">The number of cells in the X direction.</param>
            <param name="cellsY">The number of cells in the Y direction.</param>
            <param name="cellSize">The size of each cell.</param>
            <param name="texture">The texture for the terrain.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the terrain element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the terrain element.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.OnDestroy(Genesis.Core.Game)">
            <summary>
            Handles cleanup and resource disposal when the terrain is destroyed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Terrain2D.GetBounds">
            <summary>
            Gets the 2D bounds of the terrain.
            </summary>
            <returns>A rectangular region representing the 2D bounds of the terrain.</returns>
        </member>
        <member name="T:Genesis.Core.GameElements.Skybox">
            <summary>
            Represents a skybox element in a 3D environment.
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElements.Skybox.#ctor(System.String,System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the Skybox class with specified name, texture path, location, rotation, and scale.
            </summary>
            <param name="name">The name of the skybox.</param>
            <param name="path">The path to the texture for the skybox.</param>
            <param name="location">The initial location of the skybox.</param>
            <param name="rotation">The initial rotation of the skybox.</param>
            <param name="scale">The initial scale of the skybox.</param>
        </member>
        <member name="M:Genesis.Core.GameElements.Skybox.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates the skybox position based on the selected scene's camera location.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="T:Genesis.Core.Scene3D">
            <summary>
            Represents a 3D scene for rendering, including lighting and an optional skybox.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene3D.Sun">
            <summary>
            Gets or sets the light source (sun) in the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene3D.Skybox">
            <summary>
            Gets or sets the skybox used in the scene (optional).
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene3D.#ctor(System.String,Genesis.Core.Light)">
            <summary>
            Initializes a new instance of the Scene3D class.
            </summary>
            <param name="name">The name of the scene.</param>
            <param name="sun">The light source (sun) in the scene.</param>
        </member>
        <member name="M:Genesis.Core.Scene3D.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the 3D scene.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.Scene3D.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called during the update phase of the game loop.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.Scene3D.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called during the rendering phase of the game loop.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
        </member>
        <member name="M:Genesis.Core.Scene3D.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the scene is destroyed.
            </summary>
            <param name="game">The game instance.</param>
        </member>
        <member name="T:Genesis.Core.Scene">
            <summary>
            Represents a game scene in the Genesis framework.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Name">
            <summary>
            Gets or sets the name of the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Layer">
            <summary>
            Gets or sets the list of layers within the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Camera">
            <summary>
            Gets or sets the camera used for rendering the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.Canvas">
            <summary>
            Gets or sets the list of UI canvases within the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.PhysicHandler">
            <summary>
            Gets or sets the physics handler for the scene.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeScenePreperation">
            <summary>
            Event handler triggered before scene preparation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeSceneRender">
            <summary>
            Event handler triggered before scene rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.AfterSceneRender">
            <summary>
            Event handler triggered after scene rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeCanvasPreperation">
            <summary>
            Event handler triggered before UI canvas preparation.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BeforeCanvasRender">
            <summary>
            Event handler triggered before UI canvas rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.AfterCanvasRender">
            <summary>
            Event handler triggered after UI canvas rendering.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.OnSceneResize">
            <summary>
            Event handler triggered when the scene is resized.
            </summary>
        </member>
        <member name="P:Genesis.Core.Scene.BackgroundTexture">
            <summary>
            Set or gets the background texture for the scene
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor">
            <summary>
            Creates a new game scene.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor(System.String)">
            <summary>
            Creates a new game scene with the specified name.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(Genesis.Core.Layer)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(System.String)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layerName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddCanvas(Genesis.UI.Canvas)">
            <summary>
            Adds a new ui canvas to the scene
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveLayer(Genesis.Core.Layer)">
            <summary>
            Removes a layer from the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetLayer(System.String)">
            <summary>
            Gets the layer with the given name
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Adds a GameElement in the scene. It will be placed in the given layer
            </summary>
            <param name="layerName"></param>
            <param name="gameElement"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElements(System.String,System.Collections.Generic.List{Genesis.Core.GameElement})">
            <summary>
            Adds GameElements into the scene. The elements will be placed in the given layer
            </summary>
            <param name="layer"></param>
            <param name="gameElements"></param>
        </member>
        <member name="M:Genesis.Core.Scene.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initial the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Update the scene and the elements. Called every frame
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnDestroy(Genesis.Core.Game)">
            <summary>
            Destroys the scene data
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String)">
            <summary>
            Gets the elements from the given layer
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String[])">
            <summary>
            Gets the elements from the given layers
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String)">
            <summary>
            Gets the element with the given name. This function searchs
            in every layer until it finds a element with an equal name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String,System.String)">
            <summary>
            Gets the element with the given name out of the given layer.
            </summary>
            <param name="layerName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetCanvas(System.String)">
            <summary>
            Gets the canvas with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetWidget(System.String,System.String)">
            <summary>
            Gets a entity with the given name from the canvas
            </summary>
            <param name="canvasName"></param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(Genesis.Core.GameElement)">
            <summary>
            Removes a element from the scene. This function will look in all 
            layer for the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Removes a element from the given layer
            </summary>
            <param name="layerName"></param>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(Genesis.UI.Canvas)">
            <summary>
            Removes the ui canvas from the scene
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(System.String)">
            <summary>
            Removes the ui canvas with the given name from the scene
            </summary>
            <param name="canvasName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.ResizeScene(Genesis.Graphics.Viewport)">
            <summary>
            Resizes the scene by invoking the event handler for scene resize.
            </summary>
            <param name="viewport">The viewport containing information about the new dimensions.</param>
        </member>
        <member name="M:Genesis.Core.Scene.ImportScene2D(System.String,Genesis.Core.AssetManager)">
            <summary>
            Loads the given scene file into this scene
            </summary>
            <param name="filename">The file name</param>
            <param name="assetManager">The asset manager</param>
        </member>
        <member name="M:Genesis.Core.Scene.GetSceneFilePropetery(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Gets a scene file proptery. 
            </summary>
            <param name="array">The propteries jarray</param>
            <param name="key">The key for the propetery</param>
            <returns>the jobject if the key exist. null if the key dont exist</returns>
        </member>
        <member name="T:Genesis.Core.Storage">
            <summary>
            Class for dynamic clearing not used elements.
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.#ctor">
            <summary>
            Create a new Storage instance
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.ManageElement(Genesis.Core.GameElement)">
            <summary>
            Add an element which get managed
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Storage.Process(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Removes disabled elements from the game and the garbage collector
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="T:Genesis.Core.Utils">
            <summary>
            Contains utility functions for various tasks within the Genesis.Core namespace.
            </summary>
        </member>
        <member name="M:Genesis.Core.Utils.GetCurrentTimeMillis">
            <summary>
            Gets the current time in milliseconds.
            </summary>
            <returns>The current time in milliseconds.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertBitmapToBase64(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap image to a Base64 string.
            </summary>
            <param name="bitmap">The Bitmap image to convert.</param>
            <returns>The Base64 string representation of the Bitmap image.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertBase64ToBitmap(System.String)">
            <summary>
            Converts a Base64 string to a Bitmap image.
            </summary>
            <param name="base64">The Base64 string to convert.</param>
            <returns>The Bitmap image decoded from the Base64 string.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetStringWidth(System.String,System.Single,System.Single)">
            <summary>
            Gets the width of a string given the font size and spacing.
            </summary>
            <param name="text">The input string.</param>
            <param name="fontSize">The font size.</param>
            <param name="spacing">The character spacing.</param>
            <returns>The width of the string.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetStringHeight(System.String,System.Single,System.Single)">
            <summary>
            Gets the height of a string given the font size and spacing.
            </summary>
            <param name="text">The input string.</param>
            <param name="fontSize">The font size.</param>
            <param name="spacing">The line spacing.</param>
            <returns>The height of the string.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetStringBounds(Genesis.Math.Vec3,System.String,System.Single,System.Single)">
            <summary>
            Gets the bounding rectangle of a string given its location, text, font size, and spacing.
            </summary>
            <param name="location">The location of the string.</param>
            <param name="text">The input string.</param>
            <param name="fontSize">The font size.</param>
            <param name="spacing">The character spacing.</param>
            <returns>The bounding rectangle of the string.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetVMirroredPosition(Genesis.Math.Vec3,Genesis.Graphics.Camera)">
            <summary>
            Gets the vertically mirrored position of a reference vector relative to a camera.
            </summary>
            <param name="vref">The reference vector.</param>
            <param name="camera">The camera used for mirroring.</param>
            <returns>The vertically mirrored position vector.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetVMirroredPosition(System.Single,System.Single,System.Single,Genesis.Graphics.Camera)">
            <summary>
            Gets the vertically mirrored position of a reference vector relative to a camera.
            </summary>
            <param name="x">The reference x vector.</param>
            <param name="y">The reference y vector</param>
            <param name="z">The reference z vector</param>
            <param name="camera">The camera used for mirroring.</param>
            <returns>The vertically mirrored position vector.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateCameraFront(Genesis.Graphics.Camera)">
            <summary>
            Calculates the front vector of a camera using its location and rotation.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The front vector of the camera.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateCameraFront2(Genesis.Graphics.Camera)">
            <summary>
            Calculates the front vector of a camera using its rotation angles.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The front vector of the camera.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ForwardVector(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the vector pointing forward from a given position and rotation.
            </summary>
            <param name="v">The starting position vector.</param>
            <param name="rotation">The rotation vector.</param>
            <param name="dist">The distance to move in the forward direction.</param>
            <returns>The resulting position vector.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyNormalMap(System.Int32,System.Int32)">
            <summary>
            Creates an empty normal map with the specified width and height.
            </summary>
            <param name="width">The width of the normal map.</param>
            <param name="height">The height of the normal map.</param>
            <returns>An empty normal map.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyTexture(System.Int32,System.Int32)">
            <summary>
            Creates an empty texture with the specified width and height.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>An empty texture.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateFrontVec3(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates a vector infront of the given point
            </summary>
            <param name="location">The source location</param>
            <param name="rotation">The rotation</param>
            <param name="dist">The distance</param>
            <returns>Front vector</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetParentModelView(Genesis.Core.GameElement)">
            <summary>
            Gets the transformation matrix for the parent model view.
            </summary>
            <param name="element">The game element.</param>
            <returns>The transformation matrix for the parent model view.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldLocation(Genesis.Core.GameElement)">
            <summary>
            Returns the world location for the game element.
            </summary>
            <param name="element">The game element.</param>
            <returns>The world location of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the world rotation for the game element.
            </summary>
            <param name="element">The game element.</param>
            <returns>The world rotation of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldScale(Genesis.Core.GameElement)">
            <summary>
            Returns the world scale for the game element.
            </summary>
            <param name="element">The game element.</param>
            <returns>The world scale of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceLocation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world transform to model space transform.
            </summary>
            <param name="element">The game element.</param>
            <param name="worldPosition">The world position vector.</param>
            <returns>The model space location of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceScale(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world scale to the model space scale.
            </summary>
            <param name="element">The game element.</param>
            <param name="worldScale">The world scale vector.</param>
            <returns>The model space scale of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceRotation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world rotation to the model space rotation.
            </summary>
            <param name="element">The game element.</param>
            <param name="worldRotation">The world rotation vector.</param>
            <returns>The model space rotation of the game element.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelTransformation(Genesis.Core.GameElement)">
            <summary>
            Returns the model transform matrix relative to the world location.
            </summary>
            <param name="element">The game element.</param>
            <returns>The model transform matrix.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the model rotation matrix relative to the world rotation.
            </summary>
            <param name="element">The game element.</param>
            <returns>The model rotation matrix.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelScale(Genesis.Core.GameElement)">
            <summary>
            Returns the model scale matrix relative to the world scale.
            </summary>
            <param name="element">The game element.</param>
            <returns>The model scale matrix.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.EulerToQuaternion(Genesis.Math.Vec3)">
            <summary>
            Converts Euler angles to a quaternion.
            </summary>
            <param name="euler">The Euler angles vector.</param>
            <returns>The quaternion representing the rotation.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateDirectionVector(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the direction vector from point A to point B.
            </summary>
            <param name="pointA">The starting point.</param>
            <param name="pointB">The target point.</param>
            <returns>The direction vector from point A to point B.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateYaw(Genesis.Math.Vec3)">
            <summary>
            Calculates the yaw angle (azimuth angle) from a given direction vector.
            </summary>
            <param name="directionVector">The direction vector.</param>
            <returns>The yaw angle in radians.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculatePitch(Genesis.Math.Vec3)">
            <summary>
            Calculates the pitch angle from a given direction vector.
            </summary>
            <param name="directionVector">The direction vector.</param>
            <returns>The pitch angle in radians.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.LookAt(Genesis.Graphics.Camera,Genesis.Math.Vec3)">
            <summary>
            Lets the camera look at a position.
            </summary>
            <param name="camera">The camera.</param>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateYaw(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the yaw angle from point1 to point2.
            </summary>
            <param name="point1">The starting point.</param>
            <param name="point2">The target point.</param>
            <returns>The yaw angle in degrees.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculatePitch(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the pitch angle from point1 to point2.
            </summary>
            <param name="point1">The starting point.</param>
            <param name="point2">The target point.</param>
            <returns>The pitch angle in degrees.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertColor(System.Drawing.Color)">
            <summary>
            Converts a System.Drawing.Color into a float array.
            </summary>
            <param name="color">The color.</param>
            <returns>The float array representing the color.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetRandomColor">
            <summary>
            Generates an random color
            </summary>
            <returns>The color</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetRandomColor(System.Int32)">
            <summary>
            Generates an random color from an seed
            </summary>
            <param name="seed">The seed for the randomizer</param>
            <returns>The color</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetRandomColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Returns a random color between the given colors.
            </summary>
            <param name="colorA">The minimum color.</param>
            <param name="colorB">The maximum color.</param>
            <returns>A randomly generated color within the specified range.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetRandomColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Returns a random color between the given colors using a specified seed for reproducibility.
            </summary>
            <param name="colorA">The minimum color.</param>
            <param name="colorB">The maximum color.</param>
            <param name="seed">The seed for the random number generator.</param>
            <returns>A randomly generated color within the specified range and seed.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertDrawingColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts float values to a System.Drawing.Color.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The System.Drawing.Color representation.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.TransformToWorldCords(Genesis.Core.Game,System.Single,System.Single)">
            <summary>
            Transforms screen coordinates to world coordinates in the context of a Game.
            </summary>
            <param name="game">The Game object.</param>
            <param name="x">X-coordinate on the screen.</param>
            <param name="y">Y-coordinate on the screen.</param>
            <returns>World coordinates as a Vec3.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.TransformToWorldCords(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,System.Single,System.Single)">
            <summary>
            Transforms screen coordinates to world coordinates in the context of a specific Camera and Viewport.
            </summary>
            <param name="camera">The Camera object.</param>
            <param name="viewport">The Viewport object.</param>
            <param name="x">X-coordinate on the screen.</param>
            <param name="y">Y-coordinate on the screen.</param>
            <returns>World coordinates as a Vec3.</returns>
        </member>
        <member name="M:Genesis.Core.Utils.RayDirection(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,System.Single,System.Single)">
            <summary>
            Calculates the direction of a ray in world space based on screen coordinates.
            </summary>
            <param name="camera">The Camera object.</param>
            <param name="viewport">The Viewport object.</param>
            <param name="x">X-coordinate on the screen.</param>
            <param name="y">Y-coordinate on the screen.</param>
            <returns>Direction of the ray as a Vec3.</returns>
        </member>
        <member name="T:Genesis.Graphics.Animation">
            <summary>
            Represents an animation definition with details such as name, starting cell, row, and number of frames.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Animation.Name">
            <summary>
            Gets or sets the name of the animation.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Animation.Cell">
            <summary>
            Gets or sets the starting cell index of the animation.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Animation.Row">
            <summary>
            Gets or sets the row index in the animation sheet.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Animation.Frames">
            <summary>
            Gets or sets the number of frames in the animation.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Animation.#ctor">
            <summary>
            Initializes a new instance of the Animation class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Animation.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Animation class with specified parameters.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="cell">The starting cell index of the animation.</param>
            <param name="row">The row index in the animation sheet.</param>
            <param name="frames">The number of frames in the animation.</param>
        </member>
        <member name="T:Genesis.Graphics.Face">
            <summary>
            Represents a face in a 3D model with vertices, texture coordinates, and optional properties.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Face.Texture">
            <summary>
            Gets or sets the texture associated with the face.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Face.Vertices">
            <summary>
            Gets or sets the list of vertices defining the face.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Face.TexCords">
            <summary>
            Gets or sets the list of texture coordinates associated with the face vertices.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Face.Propertys">
            <summary>
            Gets or sets additional properties associated with the face.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Face.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Face"/> class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Face.#ctor(Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Face"/> class with a specified texture.
            </summary>
            <param name="texture">The texture associated with the face.</param>
        </member>
        <member name="M:Genesis.Graphics.Face.#ctor(Genesis.Math.Vec3[])">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Face"/> class with specified vertices.
            </summary>
            <param name="vecs">An array of vertices defining the face.</param>
        </member>
        <member name="M:Genesis.Graphics.Face.#ctor(Genesis.Math.Vec3[],Genesis.Math.Vec3[],Genesis.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Face"/> class with specified vertices, texture coordinates, and a texture.
            </summary>
            <param name="vecs">An array of vertices defining the face.</param>
            <param name="texCords">An array of texture coordinates associated with the face vertices.</param>
            <param name="texture">The texture associated with the face.</param>
        </member>
        <member name="M:Genesis.Graphics.Face.InitFace(Genesis.Graphics.IRenderDevice)">
            <summary>
            Initializes the face by loading its associated texture using the specified renderer.
            </summary>
            <param name="renderer">The renderer responsible for loading the texture.</param>
        </member>
        <member name="T:Genesis.Graphics.Font">
            <summary>
            Represents a font with information about glyph size, spacing, and glyph atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.Name">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.GlyphSize">
            <summary>
            Gets or sets the size of each glyph in the font.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.Spacing">
            <summary>
            Gets or sets the spacing between glyphs.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.Rows">
            <summary>
            Gets or sets the number of rows in the glyph atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.Column">
            <summary>
            Gets or sets the number of columns in the glyph atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.FontAtlas">
            <summary>
            Gets or sets the bitmap containing the font atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.RenderID">
            <summary>
            Gets or sets the render ID associated with the font.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Font.Glyphes">
            <summary>
            Gets or sets the list of glyphs in the font.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Font.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Font"/> class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Font.FromFile(System.String)">
            <summary>
            Loads font information from an XML file.
            </summary>
            <param name="file">The path to the XML file containing font information.</param>
        </member>
        <member name="M:Genesis.Graphics.Font.Base64ToImage(System.String)">
            <summary>
            Converts a base64-encoded image string to a Bitmap.
            </summary>
            <param name="base64">The base64-encoded image string.</param>
            <returns>The decoded Bitmap image.</returns>
        </member>
        <member name="M:Genesis.Graphics.Font.GetGlyphe(System.Char)">
            <summary>
            Gets the glyph associated with a specific character.
            </summary>
            <param name="character">The character for which to retrieve the glyph.</param>
            <returns>The glyph associated with the specified character.</returns>
        </member>
        <member name="M:Genesis.Graphics.Font.LoadSystemFont(System.String)">
            <summary>
            Loads a system font with a default set of glyphs.
            </summary>
            <param name="fontName">The name of the system font to load.</param>
            <returns>The loaded system font.</returns>
        </member>
        <member name="M:Genesis.Graphics.Font.RenderGlyphe(System.String,System.Int32,System.Drawing.Color,System.String,System.Int32)">
            <summary>
            Renders a glyph image with the specified parameters.
            </summary>
            <param name="glypheValue">The value of the glyph to render.</param>
            <param name="glypeSize">The size of the glyph.</param>
            <param name="color">The color of the glyph.</param>
            <param name="fontName">The name of the font to use for rendering.</param>
            <param name="fontSize">The size of the font.</param>
            <returns>The rendered glyph as a Bitmap image.</returns>
        </member>
        <member name="T:Genesis.Graphics.Framebuffer">
            <summary>
            Represents a framebuffer object in graphics rendering.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Framebuffer.FramebufferID">
            <summary>
            Gets or sets the ID of the framebuffer.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Framebuffer.RenderBuffer">
            <summary>
            Gets or sets the ID of the render buffer associated with the framebuffer.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Framebuffer.Texture">
            <summary>
            Gets or sets the ID of the texture associated with the framebuffer.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Framebuffer.ToTexture">
            <summary>
            Converts the framebuffer to a texture.
            </summary>
            <returns>The converted texture.</returns>
        </member>
        <member name="T:Genesis.Graphics.Glyphe">
            <summary>
            Represents a glyph in a font texture atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Glyphe.Character">
            <summary>
            Gets or sets the character associated with the glyph.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Glyphe.Row">
            <summary>
            Gets or sets the row index of the glyph in the texture atlas.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Glyphe.Column">
            <summary>
            Gets or sets the column index of the glyph in the texture atlas.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Glyphe.#ctor(System.Char,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Glyphe"/> class.
            </summary>
            <param name="character">The character associated with the glyph.</param>
            <param name="row">The row index of the glyph in the texture atlas.</param>
            <param name="column">The column index of the glyph in the texture atlas.</param>
        </member>
        <member name="T:Genesis.Graphics.IRenderDevice">
            <summary>
            Interface for a rendering device that handles graphics rendering operations.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Init">
            <summary>
            Initializes the rendering device.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Initializes a game element for rendering.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.InitSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Initializes a sprite for rendering.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.InitElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Initializes a 3D element for rendering.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Begin">
            <summary>
            Begins the rendering process.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.End">
            <summary>
            Ends the rendering process.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.CreateDynamicVertexBuffer(System.Single[])">
            <summary>
            Creates a dynamic vertex buffer with the specified float array.
            </summary>
            <param name="floats">The float array for the dynamic vertex buffer.</param>
            <returns>The ID of the created dynamic vertex buffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.CreateStaticVertexBuffer(System.Single[])">
            <summary>
            Creates a static vertex buffer with the specified vertices.
            </summary>
            <param name="verticies">The vertices for the static vertex buffer.</param>
            <returns>The ID of the created static vertex buffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Builds a framebuffer with the specified width and height.
            </summary>
            <param name="width">The width of the framebuffer.</param>
            <param name="height">The height of the framebuffer.</param>
            <returns>The built framebuffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.BuildFramebuffer(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a framebuffer with the specified width, height, and texture ID.
            </summary>
            <param name="width">The width of the framebuffer.</param>
            <param name="height">The height of the framebuffer.</param>
            <param name="texture">The ID of the texture associated with the framebuffer.</param>
            <returns>The built framebuffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.BuildFramebuffer(System.Int32,System.Int32,Genesis.Graphics.Texture)">
            <summary>
            Builds a framebuffer with the specified width, height, and texture.
            </summary>
            <param name="width">The width of the framebuffer.</param>
            <param name="height">The height of the framebuffer.</param>
            <param name="texture">The texture associated with the framebuffer.</param>
            <returns>The built framebuffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.UpdateFramebufferSize(Genesis.Graphics.Framebuffer,System.Int32,System.Int32)">
            <summary>
            Updates the size of the specified framebuffer.
            </summary>
            <param name="framebuffer">The framebuffer to update.</param>
            <param name="width">The new width of the framebuffer.</param>
            <param name="height">The new height of the framebuffer.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.SetFramebuffer(Genesis.Graphics.Framebuffer)">
            <summary>
            Sets the active framebuffer using its ID.
            </summary>
            <param name="framebuffer">The ID of the framebuffer to set as active.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.SetFramebuffer(System.Int32)">
            <summary>
            Sets the active framebuffer using the specified framebuffer object.
            </summary>
            <param name="framebuffer">The framebuffer to set as active.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.PrepareSceneRendering(Genesis.Core.Scene)">
            <summary>
            Prepares the rendering for a 2D scene.
            </summary>
            <param name="scene">The 2D scene to prepare.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.FinishSceneRendering(Genesis.Core.Scene)">
            <summary>
            Finishes the rendering for a 2D scene.
            </summary>
            <param name="scene">The 2D scene to finish rendering.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.PrepareCanvasRendering(Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Prepares the rendering for a canvas within a 2D scene.
            </summary>
            <param name="scene">The 2D scene containing the canvas.</param>
            <param name="canvas">The canvas to prepare rendering for.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.FinishCanvasRendering(Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Finishes the rendering for a canvas within a 2D scene.
            </summary>
            <param name="scene">The 2D scene containing the canvas.</param>
            <param name="canvas">The canvas to finish rendering.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the rendering device.
            </summary>
            <param name="texture">The texture to load.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads a font into the rendering device.
            </summary>
            <param name="font">The font to load.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Sets the camera for rendering.
            </summary>
            <param name="camera">The camera to set.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.SetLightSource(Genesis.Core.Light)">
            <summary>
            Sets the light source for rendering.
            </summary>
            <param name="light">The light source to set.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.PushMatrix">
            <summary>
            Pushes the current matrix onto the matrix stack.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.PopMatrix">
            <summary>
            Pops the matrix from the top of the matrix stack.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for rendering.
            </summary>
            <param name="x">The x-coordinate of the viewport.</param>
            <param name="y">The y-coordinate of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            Rotates the matrix by the specified angle around the given vector.
            </summary>
            <param name="angle">The rotation angle in degrees.</param>
            <param name="vector">The vector to rotate around.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Translate(Genesis.Math.Vec3)">
            <summary>
            Translates the matrix by the specified vector.
            </summary>
            <param name="vector">The translation vector.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Translates the matrix by the specified coordinates.
            </summary>
            <param name="x">The x-coordinate translation.</param>
            <param name="y">The y-coordinate translation.</param>
            <param name="z">The z-coordinate translation.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Draws a game element in the current rendering context.
            </summary>
            <param name="element">The game element to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Draws a sprite in the current rendering context.
            </summary>
            <param name="sprite">The sprite to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite with specified location, size, and texture in the current rendering context.
            </summary>
            <param name="location">The location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="texture">The texture of the sprite.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite with specified location, size, texture, and texture coordinates in the current rendering context.
            </summary>
            <param name="location">The location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="texture">The texture of the sprite.</param>
            <param name="texCoords">The texture coordinates of the sprite.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite with specified location, size, color, and texture in the current rendering context.
            </summary>
            <param name="location">The location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="color">The color of the sprite.</param>
            <param name="texture">The texture of the sprite.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite with specified location, size, color, texture, and texture coordinates in the current rendering context.
            </summary>
            <param name="location">The location of the sprite.</param>
            <param name="size">The size of the sprite.</param>
            <param name="color">The color of the sprite.</param>
            <param name="texture">The texture of the sprite.</param>
            <param name="texCoords">The texture coordinates of the sprite.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawBufferedSprite(Genesis.Core.GameElements.BufferedSprite)">
            <summary>
            Draws a buffered sprite in the current rendering context.
            </summary>
            <param name="bufferedSprite">The buffered sprite to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Draws a 3D element in the current rendering context.
            </summary>
            <param name="element">The 3D element to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture with specified location, size, and texture coordinates in the current rendering context.
            </summary>
            <param name="location">The location of the texture.</param>
            <param name="size">The size of the texture.</param>
            <param name="repeatX">The horizontal texture repeat factor.</param>
            <param name="repeatY">The vertical texture repeat factor.</param>
            <param name="texture">The texture to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a colored rectangle with specified position and size in the current rendering context.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a colored rectangle with specified position, size, and border width in the current rendering context.
            </summary>
            <param name="rect">The rectangle to draw.</param>
            <param name="color">The color of the rectangle.</param>
            <param name="borderWidth">The width of the rectangle border.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a colored rectangle with specified position and size in the current rendering context.
            </summary>
            <param name="rect">The rectangle to fill.</param>
            <param name="color">The color to fill the rectangle with.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws vectors with specified positions in the current rendering context.
            </summary>
            <param name="vecs">The array of vectors to draw.</param>
            <param name="color">The color of the vectors.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Draws a string with specified text, location, fontsize, font, and color in the current rendering context.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="location">The location of the text.</param>
            <param name="fontsize">The fontsize of the text.</param>
            <param name="font">The font to use for drawing the text.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Draws a string with specified text, location, fontsize, spacing, font, and color in the current rendering context.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="location">The location of the text.</param>
            <param name="fontsize">The fontsize of the text.</param>
            <param name="spacing">The spacing between characters.</param>
            <param name="font">The font to use for drawing the text.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawMesh(Genesis.Graphics.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh with specified mesh and color in the current rendering context.
            </summary>
            <param name="mesh">The mesh to draw.</param>
            <param name="color">The color of the mesh.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line with specified starting and ending points and color in the current rendering context.
            </summary>
            <param name="from">The starting point of the line.</param>
            <param name="to">The ending point of the line.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DrawSkyBox(Genesis.Core.GameElements.Skybox)">
            <summary>
            Draws a skybox in the current rendering context.
            </summary>
            <param name="skybox">The skybox to draw.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the specified texture, freeing up resources.
            </summary>
            <param name="texture">The texture to dispose.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the specified font, freeing up resources.
            </summary>
            <param name="font">The font to dispose.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DisposeElement(Genesis.Core.GameElement)">
            <summary>
            Disposes the game element
            </summary>
            <param name="element">The element to dispose</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.DisposeElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Disposes the specified 3D element, freeing up resources.
            </summary>
            <param name="element">The 3D element to dispose.</param>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.ModelViewMatrix">
            <summary>
            Sets the current rendering matrix to the model-view matrix.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.ProjectionMatrix">
            <summary>
            Sets the current rendering matrix to the projection matrix.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.TextureRepeatT">
            <summary>
            Sets the texture wrapping mode to repeat in the T direction.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.TextureRepeatS">
            <summary>
            Sets the texture wrapping mode to repeat in the S direction.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.TextureClampT">
            <summary>
            Sets the texture wrapping mode to clamp in the T direction.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.TextureClampS">
            <summary>
            Sets the texture wrapping mode to clamp in the S direction.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.Dispose">
            <summary>
            Disposes of the rendering device and releases any resources.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.GetError">
            <summary>
            Gets the last OpenGL error code.
            </summary>
            <returns>The error code.</returns>
        </member>
        <member name="M:Genesis.Graphics.IRenderDevice.GetHandle">
            <summary>
            Gets the handle (pointer) to the underlying rendering context.
            </summary>
            <returns>The handle to the rendering context.</returns>
        </member>
        <member name="T:Genesis.Graphics.MaterialBuffer">
            <summary>
            Struktur zur Darstellung von Materialdaten, die in einem Material-Buffer gespeichert werden.
            </summary>
        </member>
        <member name="F:Genesis.Graphics.MaterialBuffer.HasData">
            <summary>
            Indicates whether the material buffer contains data.
            </summary>
        </member>
        <member name="F:Genesis.Graphics.MaterialBuffer.Verticies">
            <summary>
            Array for storing vertex data.
            </summary>
        </member>
        <member name="F:Genesis.Graphics.MaterialBuffer.Normals">
            <summary>
            Array for storing normal data.
            </summary>
        </member>
        <member name="F:Genesis.Graphics.MaterialBuffer.Texcords">
            <summary>
            Array for storing texture coordinates.
            </summary>
        </member>
        <member name="T:Genesis.Graphics.Material">
            <summary>
            Class representing a 3D material and managing its properties.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Material.DiffuseColor">
            <summary>
            The diffuse color of the material.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Material.DiffuseTexture">
            <summary>
            The path to the diffuse texture of the material.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Material.NormalTexture">
            <summary>
            The path to the normal texture of the material.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Material.Opacity">
            <summary>
            Gets or sets the opacity
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Material.Propeterys">
            <summary>
            A collection of user-defined properties.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Material.#ctor">
            <summary>
            Constructor for the Material class. Initializes properties and the dictionary for user-defined properties.
            </summary>
        </member>
        <member name="T:Genesis.Graphics.PerspectiveCamera">
            <summary>
            Represents a perspective camera derived from the Camera class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.#ctor(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single)">
            <summary>
            Constructor for the PerspectiveCamera class.
            </summary>
            <param name="location">The position of the camera.</param>
            <param name="size">The size of the camera.</param>
            <param name="near">The near clipping plane of the camera.</param>
            <param name="far">The far clipping plane of the camera.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.CameraFront">
            <summary>
            Gets the front direction vector of the camera.
            </summary>
            <returns>The front direction vector of the camera.</returns>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveForward(System.Single)">
            <summary>
            Moves the camera forward by a specified value.
            </summary>
            <param name="value">The distance to move the camera forward.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveBackward(System.Single)">
            <summary>
            Moves the camera backward by a specified value.
            </summary>
            <param name="value">The distance to move the camera backward.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveUp(System.Single)">
            <summary>
            Moves the camera up by a specified value.
            </summary>
            <param name="value">The distance to move the camera up.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveDown(System.Single)">
            <summary>
            Moves the camera down by a specified value.
            </summary>
            <param name="value">The distance to move the camera down.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveLeft(System.Single)">
            <summary>
            Moves the camera left by a specified value.
            </summary>
            <param name="value">The distance to move the camera left.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.MoveRight(System.Single)">
            <summary>
            Moves the camera right by a specified value.
            </summary>
            <param name="value">The distance to move the camera right.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.Forward(System.Single)">
            <summary>
            Calculates a point in front of the camera at a specified distance.
            </summary>
            <param name="distance">The distance from the camera.</param>
            <returns>The calculated point in front of the camera.</returns>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.RenderToTexture(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Graphics.Texture,Genesis.Math.Vec3)">
            <summary>
            Renders the scene to a texture using a specified render target and resolution.
            </summary>
            <param name="game">The Game instance.</param>
            <param name="renderer">The render device.</param>
            <param name="renderTarget">The render target texture.</param>
            <param name="resolution">The resolution of the rendered texture.</param>
        </member>
        <member name="M:Genesis.Graphics.PerspectiveCamera.RenderToTexture(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,System.Int32,Genesis.Math.Vec3)">
            <summary>
            Renders the scene to a texture using a specified render target ID and resolution.
            </summary>
            <param name="game">The Game instance.</param>
            <param name="renderer">The render device.</param>
            <param name="renderTarget">The ID of the render target.</param>
            <param name="resolution">The resolution of the rendered texture.</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.GLRenderer.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.CreateDynamicVertexBuffer(System.Single[])">
            <summary>
            Creates a dynamic vertex buffer in OpenGL and initializes it with the specified vertices.
            Dynamic buffers are suitable for frequently changing data, like dynamic vertex updates.
            </summary>
            <param name="verticies">The array of vertices to be stored in the buffer.</param>
            <returns>The OpenGL handle (ID) of the created dynamic vertex buffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.CreateStaticVertexBuffer(System.Single[])">
            <summary>
            Creates a static vertex buffer in OpenGL and initializes it with the specified vertices.
            Static buffers are suitable for infrequently changing data, like static geometry.
            </summary>
            <param name="verticies">The array of vertices to be stored in the buffer.</param>
            <returns>The OpenGL handle (ID) of the created static vertex buffer.</returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Core.GameElements.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawMesh(Genesis.Graphics.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteColor(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteTexCords(Genesis.Core.GameElements.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeElement3D(Genesis.Core.GameElements.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetRenderer">
            <summary>
            Returns the native renderer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetLightSource(Genesis.Core.Light)">
            <summary>
            Sets an Lightsource
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSkyBox(Genesis.Core.GameElements.Skybox)">
            <summary>
            Draws an skybox
            </summary>
            <param name="skybox"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PrepareSceneRendering(Genesis.Core.Scene)">
            <summary>
            Prepares the renderer for scene rendering
            </summary>
            <param name="scene">The scene to render</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.FinishSceneRendering(Genesis.Core.Scene)">
            <summary>
            Finish the scene rendering
            </summary>
            <param name="scene">The scene which getted rendered</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PrepareCanvasRendering(Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Prepares the renderer for the canvas rendering
            </summary>
            <param name="scene">The scene from the canvas</param>
            <param name="canvas">The canvas to render</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.FinishCanvasRendering(Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Finish the canvas rendering
            </summary>
            <param name="scene">The scene from the canvas</param>
            <param name="canvas">The canvas to render</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawFramebuffer(System.Int32)">
            <summary>
            Draws an framebuffer
            </summary>
            <param name="textureID">The framebuffer texture id</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetFramebuffer(Genesis.Graphics.Framebuffer)">
            <summary>
            Sets an framebuffer as active render target
            </summary>
            <param name="framebuffer">The framebuffer for the rendering</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetFramebuffer(System.Int32)">
            <summary>
            Sets an framebuffer as active render target
            </summary>
            <param name="framebuffer">The framebuffer id for the rendering</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.RenderQube(Genesis.Core.GameElements.Qube)">
            <summary>
            Renders an qube
            </summary>
            <param name="qube">The qube to render</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitTerrain3D(Genesis.Core.GameElements.Terrain3D)">
            <summary>
            Init an terrain3d
            </summary>
            <param name="terrain">The terrain to initalize</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.RenderTerrain3D(Genesis.Core.GameElements.Terrain3D)">
            <summary>
            Renders an terrain3D
            </summary>
            <param name="terrain">The terrain to render</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitParticleEmitter(Genesis.Core.GameElments.ParticleEmitter)">
            <summary>
            Initial the particle emitter
            </summary>
            <param name="emitter">The emitter to initalize</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawParticleEmitter(Genesis.Core.GameElments.ParticleEmitter)">
            <summary>
            Draws the particle emitter
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeElement(Genesis.Core.GameElement)">
            <summary>
            Disposes the element data from the gpu
            </summary>
            <param name="element">The element to dispose</param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeParticleEmitter(Genesis.Core.GameElments.ParticleEmitter)">
            <summary>
            Disposes the particle emitter
            </summary>
            <param name="emitter"></param>
        </member>
        <member name="T:Genesis.Graphics.Shader">
            <summary>
            Represents a shader used in graphics rendering.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Shader.ShaderID">
            <summary>
            Gets or sets the ID of the shader.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Shader.Source">
            <summary>
            Gets or sets the source code of the shader.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shader.#ctor">
            <summary>
            Default constructor for the Shader class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shader.#ctor(System.String)">
            <summary>
            Constructor for the Shader class that initializes the source code.
            </summary>
            <param name="source">The source code of the shader.</param>
        </member>
        <member name="M:Genesis.Graphics.Shader.FromFile(System.String)">
            <summary>
            Creates a Shader object by reading the source code from a file.
            </summary>
            <param name="filename">The path to the file containing the shader source code.</param>
            <returns>A Shader object with the source code read from the file.</returns>
        </member>
        <member name="T:Genesis.Graphics.ShaderProgram">
            <summary>
            Represents a shader program consisting of a vertex shader and a fragment shader.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.ShaderProgram.ProgramID">
            <summary>
            Gets or sets the ID of the shader program.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.ShaderProgram.VertexShader">
            <summary>
            Gets or sets the vertex shader associated with the program.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.ShaderProgram.FragmentShader">
            <summary>
            Gets or sets the fragment shader associated with the program.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.ShaderProgram.#ctor">
            <summary>
            Default constructor for the ShaderProgram class.
            </summary>
        </member>
        <member name="T:Genesis.Graphics.Shapes.FrameShape">
            <summary>
            Represents a shape that defines a frame or rectangle.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.FrameShape.GetShape">
            <summary>
            Gets the vertices defining the frame shape.
            </summary>
            <returns>An array of floating-point values representing the vertices and texture coordinates.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Vertex positions (x, y, z)
            - Texture coordinates (u, v)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.GlypheShape">
            <summary>
            Represents a shape that defines a glyphe (glyph or character).
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.GlypheShape.GetShape">
            <summary>
            Gets the vertices defining the glyphe shape.
            </summary>
            <returns>An array of floating-point values representing the vertices, colors, and texture coordinates.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Vertex positions (x, y, z)
            - Colors (r, g, b)
            - Texture coordinates (u, v)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.LineShape">
            <summary>
            Represents a shape that defines a line segment.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.LineShape.GetShape">
            <summary>
            Gets the vertices defining the line segment shape.
            </summary>
            <returns>An array of floating-point values representing the start and end points of the line.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Start point (x, y, z)
            - End point (x, y, z)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.PlaneShape">
            <summary>
            Represents a shape that defines a plane in three-dimensional space.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.PlaneShape.GetShape">
            <summary>
            Gets the vertices defining the plane shape.
            </summary>
            <returns>An array of floating-point values representing the vertices, colors, and texture coordinates.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Vertex positions (x, y, z)
            - Colors (r, g, b)
            - Texture coordinates (u, v)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.QubeShape">
            <summary>
            Represents a shape that defines a cube in three-dimensional space.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.QubeShape.GetShape">
            <summary>
            Gets the vertices defining the cube shape.
            </summary>
            <returns>An array of floating-point values representing the vertices of the cube.</returns>
            <remarks>
            The vertices are defined in groups of three for each triangle face.
            </remarks>
        </member>
        <member name="M:Genesis.Graphics.Shapes.QubeShape.GetNormals">
            <summary>
            Gets the normals defining the cube shape.
            </summary>
            <returns>An array of floating-point values representing the normals of the cube faces.</returns>
            <remarks>
            The normals are defined in groups of three for each triangle face.
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.RectShape">
            <summary>
            Represents a shape that defines a rectangle in two-dimensional space.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.RectShape.GetShape">
            <summary>
            Gets the vertices defining the rectangle shape.
            </summary>
            <returns>An array of floating-point values representing the vertices and colors of the rectangle.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Vertex positions (x, y, z)
            - Colors (r, g, b)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.Shape">
            <summary>
            Represents an abstract base class for defining shapes in a graphics context.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Shapes.Shape.vbo">
            <summary>
            Gets or sets the Vertex Buffer Object (VBO) associated with the shape.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.Shape.GetShape">
            <summary>
            Gets the vertices defining the shape.
            </summary>
            <returns>An array of floating-point values representing the vertices of the shape.</returns>
        </member>
        <member name="T:Genesis.Graphics.Shapes.SpriteShape">
            <summary>
            Represents a shape that can be rendered as a sprite.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.SpriteShape.GetShape">
            <summary>
            Gets the vertices defining the sprite shape.
            </summary>
            <returns>An array of floating-point values representing the vertices, colors, and texture coordinates.</returns>
            <remarks>
            The vertices are defined in the following order:
            - Vertex positions (x, y, z)
            - Colors (r, g, b)
            - Texture coordinates (u, v)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.Shapes.BufferedSpriteShape">
            <summary>
            Represents a shape for a buffered sprite in a graphics context.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Shapes.BufferedSpriteShape.GetShape">
            <summary>
            Gets the vertices defining the buffered sprite shape.
            </summary>
            <returns>An array of floating-point values representing the vertices, colors, and texture coordinates of the buffered sprite.</returns>
            <remarks>
            The vertices are defined in groups of three for each triangle face:
            - Vertex positions (x, y, z)
            - Colors (r, g, b)
            - Texture coordinates (u, v)
            </remarks>
        </member>
        <member name="T:Genesis.Graphics.TexCoords">
            <summary>
            Represents values for texture coordinates defining a rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.TexCoords.TopLeft">
            <summary>
            Gets or sets the texture coordinate for the top-left corner.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.TexCoords.TopRight">
            <summary>
            Gets or sets the texture coordinate for the top-right corner.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.TexCoords.BottomRight">
            <summary>
            Gets or sets the texture coordinate for the bottom-right corner.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.TexCoords.BottomLeft">
            <summary>
            Gets or sets the texture coordinate for the bottom-left corner.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.TexCoords.#ctor">
            <summary>
            Default constructor for the TexCoords class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.TexCoords.#ctor(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Constructor for the TexCoords class that initializes the texture coordinates.
            </summary>
            <param name="topLeft">The texture coordinate for the top-left corner.</param>
            <param name="topRight">The texture coordinate for the top-right corner.</param>
            <param name="bottomRight">The texture coordinate for the bottom-right corner.</param>
            <param name="bottomLeft">The texture coordinate for the bottom-left corner.</param>
        </member>
        <member name="M:Genesis.Graphics.TexCoords.GetFloats">
            <summary>
            Gets an array of floats representing the texture coordinates in the order (X, Y).
            </summary>
            <returns>An array of floats representing the texture coordinates.</returns>
        </member>
        <member name="T:Genesis.Graphics.Texture">
            <summary>
            Represents a texture used in graphics rendering.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Texture.Name">
            <summary>
            Gets or sets the name of the texture.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Texture.RenderID">
            <summary>
            Gets or sets the render ID associated with the texture.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Texture.Bitnmap">
            <summary>
            Gets or sets the Bitmap representing the texture.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Texture.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructor for the Texture class that initializes the texture with a Bitmap.
            </summary>
            <param name="bitmap">The Bitmap representing the texture.</param>
        </member>
        <member name="M:Genesis.Graphics.Texture.#ctor(System.String,System.Drawing.Bitmap)">
            <summary>
            Constructor for the Texture class that initializes the texture with a name and a Bitmap.
            </summary>
            <param name="name">The name of the texture.</param>
            <param name="bitmap">The Bitmap representing the texture.</param>
        </member>
        <member name="M:Genesis.Graphics.Texture.#ctor(System.Int32)">
            <summary>
            Constructor for the Texture class that initializes the texture with a render ID.
            </summary>
            <param name="renderID">The render ID associated with the texture.</param>
        </member>
        <member name="T:Genesis.Graphics.Viewport">
            <summary>
            Represents a viewport used in graphics rendering.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Viewport.X">
            <summary>
            Gets or sets the X-coordinate of the viewport.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Viewport.Y">
            <summary>
            Gets or sets the Y-coordinate of the viewport.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Viewport.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Viewport.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Viewport.#ctor">
            <summary>
            Default constructor for the Viewport class.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Viewport.#ctor(System.Single,System.Single)">
            <summary>
            Constructor for the Viewport class that initializes the viewport with a specified width and height.
            </summary>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:Genesis.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for the Viewport class that initializes the viewport with a specified X-coordinate, Y-coordinate, width, and height.
            </summary>
            <param name="x">The X-coordinate of the viewport.</param>
            <param name="y">The Y-coordinate of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:Genesis.Graphics.Viewport.SetNewViewport(System.Single,System.Single)">
            <summary>
            Sets a new width and height for the viewport.
            </summary>
            <param name="width">The new width of the viewport.</param>
            <param name="height">The new height of the viewport.</param>
        </member>
        <member name="M:Genesis.Graphics.Viewport.GetSize">
            <summary>
            Gets the size of the viewport as a System.Drawing.Size.
            </summary>
            <returns>The size of the viewport as a System.Drawing.Size.</returns>
        </member>
        <member name="M:Genesis.Graphics.Viewport.GetSizeF">
            <summary>
            Gets the size of the viewport as a System.Drawing.SizeF.
            </summary>
            <returns>The size of the viewport as a System.Drawing.SizeF.</returns>
        </member>
        <member name="T:Genesis.Graphics.Mesh">
            <summary>
            Class representing a 3D mesh, including its geometry and material information.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Material">
            <summary>
            Index of the material associated with the mesh.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Indicies">
            <summary>
            List of indices defining the mesh faces.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Faces">
            <summary>
            List of data representing the faces of the mesh.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Vericies">
            <summary>
            List of vertex coordinates for the mesh.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Normals">
            <summary>
            List of normal vectors for the mesh vertices.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.TextureCords">
            <summary>
            List of texture coordinates for the mesh vertices.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Mesh.Propeterys">
            <summary>
            A collection of user-defined properties associated with the mesh.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Mesh.#ctor">
            <summary>
            Constructor for the Mesh class. Initializes properties and collections.
            </summary>
        </member>
        <member name="T:Genesis.Graphics.Camera">
            <summary>
            Represents a camera in a graphics context for rendering 2D scenes.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Location">
            <summary>
            Gets or sets the location of the camera in 3D space.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Size">
            <summary>
            Gets or sets the size of the camera.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Rotation">
            <summary>
            Gets or sets the rotation of the camera in 3D space.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Near">
            <summary>
            Gets or sets the distance to the near clipping plane of the camera.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Far">
            <summary>
            Gets or sets the distance to the far clipping plane of the camera.
            </summary>
        </member>
        <member name="P:Genesis.Graphics.Camera.Type">
            <summary>
            Gets or sets the type of the camera, either orthographic or perspective.
            </summary>
        </member>
        <member name="M:Genesis.Graphics.Camera.#ctor(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Graphics.Camera"/> class with the specified location, size, near and far distances.
            </summary>
            <param name="location">The initial location of the camera in 3D space.</param>
            <param name="size">The size of the camera.</param>
            <param name="near">The distance to the near clipping plane of the camera.</param>
            <param name="far">The distance to the far clipping plane of the camera.</param>
        </member>
        <member name="M:Genesis.Graphics.Camera.LookAt(Genesis.Core.GameElement)">
            <summary>
            Adjusts the camera to look at the specified game element (only 2D).
            </summary>
            <param name="element">The game element to look at.</param>
        </member>
        <member name="M:Genesis.Graphics.Camera.LookAt(Genesis.Core.GameElement,System.Boolean)">
            <summary>
            Adjusts the camera to look at the specified game element, with an option to center the view on the element.
            </summary>
            <param name="element">The game element to look at.</param>
            <param name="centerOffset">If true, centers the view on the element; otherwise, positions the camera at the element's location.</param>
        </member>
        <member name="M:Genesis.Graphics.Camera.GetRect">
            <summary>
            Gets the rectangular region represented by the camera's location and size.
            </summary>
            <returns>A <see cref="T:Genesis.Math.Rect"/> object representing the camera's view region.</returns>
        </member>
        <member name="T:Genesis.Physics.Aabb">
            <summary>
            Represents an Axis-Aligned Bounding Box (AABB) in 3D space.
            </summary>
        </member>
        <member name="P:Genesis.Physics.Aabb.Max">
            <summary>
            Gets or sets the maximum corner of the AABB.
            </summary>
        </member>
        <member name="P:Genesis.Physics.Aabb.Min">
            <summary>
            Gets or sets the minimum corner of the AABB.
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor">
            <summary>
            Creates a new AABB with default values.
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor(BulletSharp.Math.Vector3,BulletSharp.Math.Vector3)">
            <summary>
            Creates a new AABB with specified minimum and maximum values.
            </summary>
            <param name="min">Minimum corner</param>
            <param name="max">Maximum corner</param>
        </member>
        <member name="M:Genesis.Physics.Aabb.FromBulletRigidBody(BulletSharp.RigidBody)">
            <summary>
            Returns the AABB of a Bullet rigid body.
            </summary>
            <param name="rigidBody">Bullet RigidBody</param>
            <returns>Aabb representing the bounding box of the rigid body</returns>
        </member>
        <member name="M:Genesis.Physics.Aabb.Contains(Genesis.Math.Vec3)">
            <summary>
            Checks if the AABB contains a specified point.
            </summary>
            <param name="v">Point to check</param>
            <returns>True if the point is inside the AABB, otherwise false</returns>
        </member>
        <member name="M:Genesis.Physics.Aabb.IntersectRay(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Checks if a ray intersects with the AABB.
            </summary>
            <param name="rayOrigin">Origin of the ray</param>
            <param name="rayDirection">Direction of the ray</param>
            <param name="aabbMin">Minimum corner of the AABB</param>
            <param name="aabbMax">Maximum corner of the AABB</param>
            <returns>True if the ray intersects with the AABB, otherwise false</returns>
        </member>
        <member name="T:Genesis.Physics.PhysicsHandler2D">
            <summary>
            Represents a 2D physics handler responsible for managing physics simulation in a game.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.PhysicsWorld">
            <summary>
            Gets or sets the 2D physics world used for simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.ProcessPhysics">
            <summary>
            Gets or sets a flag indicating whether physics simulation should be processed.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.TickRate">
            <summary>
            Gets or sets the tick rate for physics simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler2D.Substepps">
            <summary>
            Gets ore sets the substepps for physic simulation
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PhysicsHandler2D class with specified gravity values.
            </summary>
            <param name="gravityX">The X component of gravity.</param>
            <param name="gravityY">The Y component of gravity.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.Process(Genesis.Core.Scene,Genesis.Core.Game)">
            <summary>
            Processes the physics simulation for the given scene and game.
            </summary>
            <param name="scene">The current game scene.</param>
            <param name="game">The current game instance.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler2D.ManageElement(Genesis.Physics.PhysicsBehavior)">
            <summary>
            Manages a physics behavior element by adding its RigidBody to the physics world.
            </summary>
            <param name="rigidBody">The PhysicsBehavior representing the rigid body element.</param>
        </member>
        <member name="T:Genesis.Physics.MatrixSet">
            <summary>
            Represents a set of matrices used in raycasting.
            </summary>
        </member>
        <member name="T:Genesis.Physics.HitResult">
            <summary>
            Represents the result of a raycasting hit.
            </summary>
        </member>
        <member name="T:Genesis.Physics.Raycast">
            <summary>
            Represents a class for performing raycasting in 3D space.
            </summary>
        </member>
        <member name="P:Genesis.Physics.Raycast.Camera">
            <summary>
            Gets or sets the camera used for raycasting.
            </summary>
        </member>
        <member name="P:Genesis.Physics.Raycast.Viewport">
            <summary>
            Gets or sets the viewport associated with the raycasting.
            </summary>
        </member>
        <member name="M:Genesis.Physics.Raycast.#ctor(Genesis.Graphics.Camera,Genesis.Graphics.Viewport)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Physics.Raycast"/> class.
            </summary>
            <param name="camera">The camera used for raycasting.</param>
            <param name="viewport">The viewport associated with the raycasting.</param>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetViewProjectionMatrix(Genesis.Graphics.Camera)">
            <summary>
            Gets the view and projection matrices for raycasting based on a given camera.
            </summary>
            <param name="camera">The camera for which matrices are calculated.</param>
            <returns>MatrixSet containing the view and projection matrices.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetMouseWorldPosition(System.Int32,System.Int32)">
            <summary>
            Gets the world position of the mouse cursor.
            </summary>
            <param name="mouseX">X-coordinate of the mouse cursor.</param>
            <param name="mouseY">Y-coordinate of the mouse cursor.</param>
            <returns>World position of the mouse cursor.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetMouseWorldPosition(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,System.Int32,System.Int32)">
            <summary>
            Gets the world position of the mouse cursor based on a given camera and viewport.
            </summary>
            <param name="camera">The camera used for raycasting.</param>
            <param name="viewport">The viewport associated with the raycasting.</param>
            <param name="mouseX">X-coordinate of the mouse cursor.</param>
            <param name="mouseY">Y-coordinate of the mouse cursor.</param>
            <returns>World position of the mouse cursor.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.PerformCast(Genesis.Physics.PhysicHandler,System.Int32,System.Int32)">
            <summary>
            Performs a raycast and returns the hit result based on the mouse cursor position.
            </summary>
            <param name="physicHandler">The physics handler used for raycasting.</param>
            <param name="posX">X-coordinate of the mouse cursor.</param>
            <param name="posY">Y-coordinate of the mouse cursor.</param>
            <returns>HitResult containing information about the raycasting hit.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.PerformCast(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,Genesis.Physics.PhysicHandler,System.Int32,System.Int32)">
            <summary>
            Performs a raycast and returns the hit result based on the mouse cursor position.
            </summary>
            <param name="camera">The camera used for raycasting.</param>
            <param name="viewport">The viewport associated with the raycasting.</param>
            <param name="physicHandler">The physics handler used for raycasting.</param>
            <param name="posX">X-coordinate of the mouse cursor.</param>
            <param name="posY">Y-coordinate of the mouse cursor.</param>
            <returns>HitResult containing information about the raycasting hit.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetStartVec(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,System.Int32,System.Int32)">
            <summary>
            Gets the start vector for raycasting based on the mouse cursor position.
            </summary>
            <param name="camera">The camera used for raycasting.</param>
            <param name="vp">The viewport associated with the raycasting.</param>
            <param name="posX">X-coordinate of the mouse cursor.</param>
            <param name="posY">Y-coordinate of the mouse cursor.</param>
            <returns>The start vector for raycasting.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetEndVec(Genesis.Graphics.Camera,Genesis.Graphics.Viewport,System.Int32,System.Int32)">
            <summary>
            Gets the end vector for raycasting based on the mouse cursor position.
            </summary>
            <param name="camera">The camera used for raycasting.</param>
            <param name="vp">The viewport associated with the raycasting.</param>
            <param name="posX">X-coordinate of the mouse cursor.</param>
            <param name="posY">Y-coordinate of the mouse cursor.</param>
            <returns>The end vector for raycasting.</returns>
        </member>
        <member name="M:Genesis.Physics.Raycast.GetRayDir(GlmSharp.vec4,GlmSharp.vec4)">
            <summary>
            Gets the direction vector for a ray based on start and end vectors.
            </summary>
            <param name="start">The start vector of the ray.</param>
            <param name="end">The end vector of the ray.</param>
            <returns>The direction vector of the ray.</returns>
        </member>
        <member name="T:Genesis.Physics.MouseRay2">
            <summary>
            Represents a class for calculating a ray based on mouse input.
            </summary>
        </member>
        <member name="M:Genesis.Physics.MouseRay2.GetRayTo(System.Drawing.Point,Genesis.Graphics.PerspectiveCamera,Genesis.Graphics.Viewport)">
            <summary>
            Gets the ray direction from the camera's location to a specified point on the screen.
            </summary>
            <param name="point">The screen point</param>
            <param name="camera">The camera used for perspective</param>
            <param name="viewport">The viewport representing the screen size</param>
            <returns>The direction of the ray in world coordinates</returns>
        </member>
        <member name="T:Genesis.Physics.PhysicHandlerEvent">
            <summary>
            Represents a delegate for handling physics events.
            </summary>
            <param name="scene">The scene involved in the physics event</param>
            <param name="game">The game involved in the physics event</param>
            <param name="element">The element involved in the physics event</param>
        </member>
        <member name="T:Genesis.Physics.PhysicPropeterys">
            <summary>
            Represents the properties related to physics.
            </summary>
        </member>
        <member name="T:Genesis.Physics.PhysicHandler">
            <summary>
            Represents an abstract class for handling physics interactions.
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.Physics.PhysicHandler"/> class.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicHandler.Callbacks">
            <summary>
            Gets or sets the dictionary of physics callbacks.
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicHandler.Process(Genesis.Core.Scene,Genesis.Core.Game)">
            <summary>
            Processes physics interactions for a given scene and game.
            </summary>
            <param name="scene">The scene to process physics for</param>
            <param name="game">The game to process physics for</param>
        </member>
        <member name="M:Genesis.Physics.PhysicHandler.ManageElement(Genesis.Physics.PhysicsBehavior)">
            <summary>
            Manages physics interactions for a specific physics behavior.
            </summary>
            <param name="physicsBehavior">The physics behavior to manage</param>
        </member>
        <member name="T:Genesis.Physics.PhysicsHandler3D">
            <summary>
            Represents a 3D physics handler responsible for managing physics simulation in a game.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler3D.PhysicsWorld">
            <summary>
            Gets or sets the 3D physics world used for simulation.
            </summary>
        </member>
        <member name="P:Genesis.Physics.PhysicsHandler3D.ProcessPhysics">
            <summary>
            Gets or sets a flag indicating whether physics simulation should be processed.
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.#ctor(Genesis.Physics.PhysicPropeterys)">
            <summary>
            Initializes a new instance of the PhysicsHandler3D class with specified PhysicPropeterys.
            </summary>
            <param name="propeterys">The physics properties containing gravity values.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PhysicsHandler3D class with specified gravity values.
            </summary>
            <param name="gravityX">The X component of gravity.</param>
            <param name="gravityY">The Y component of gravity.</param>
            <param name="gravityZ">The Z component of gravity.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.Process(Genesis.Core.Scene,Genesis.Core.Game)">
            <summary>
            Processes the physics simulation for the given scene and game.
            </summary>
            <param name="scene">The current game scene.</param>
            <param name="game">The current game instance.</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsHandler3D.ManageElement(Genesis.Physics.PhysicsBehavior)">
            <summary>
            Manages a physics behavior element by adding its RigidBody to the physics world.
            </summary>
            <param name="rigidBody">The PhysicsBehavior representing the rigid body element.</param>
        </member>
        <member name="T:Genesis.Physics.PhysicsBehaviorEvent">
            <summary>
            Represents a delegate for handling physics behavior events.
            </summary>
            <param name="scene">The scene involved in the physics behavior event</param>
            <param name="game">The game involved in the physics behavior event</param>
            <param name="collision">The collision object involved in the physics behavior event</param>
        </member>
        <member name="T:Genesis.Physics.PhysicsBehavior">
            <summary>
            Represents an abstract class for defining physics behavior in the game.
            </summary>
        </member>
        <member name="F:Genesis.Physics.PhysicsBehavior.OnCollide">
            <summary>
            Event triggered when a collision occurs.
            </summary>
        </member>
        <member name="M:Genesis.Physics.PhysicsBehavior.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Handles the collision event, invoking the OnCollide event if subscribed.
            </summary>
            <param name="scene">The scene where the collision occurred</param>
            <param name="game">The game associated with the collision</param>
            <param name="collisionObject">The collision object involved in the event</param>
        </member>
        <member name="M:Genesis.Physics.PhysicsBehavior.GetPhysicsObject">
            <summary>
            Gets the physics object associated with this behavior.
            </summary>
            <returns>The physics object</returns>
        </member>
        <member name="M:Genesis.Physics.PhysicsBehavior.GetPhysicsObject``1">
            <summary>
            Gets the physics object associated with this behavior, cast to type T.
            </summary>
            <typeparam name="T">Type to cast the physics object to</typeparam>
            <returns>The physics object cast to type T</returns>
        </member>
        <member name="T:Genesis.Math.NoisePoint">
            <summary>
            Represents a point in a noise map with coordinates and a noise value.
            </summary>
        </member>
        <member name="M:Genesis.Math.NoisePoint.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor for the NoisePoint struct.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="value">The noise value associated with the point.</param>
        </member>
        <member name="T:Genesis.Math.PerlinNoise">
            <summary>
            Class for generating Perlin noise.
            </summary>
        </member>
        <member name="M:Genesis.Math.PerlinNoise.Noise(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates Perlin noise at a specific point.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="seed">The seed value for the noise generation.</param>
            <returns>The generated Perlin noise value at the specified point.</returns>
        </member>
        <member name="M:Genesis.Math.PerlinNoise.SmoothedNoise(System.Single,System.Single,System.Int32)">
            <summary>
            Applies smoothing to the noise at a specific point.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="seed">The seed value for the noise generation.</param>
            <returns>The smoothed noise value at the specified point.</returns>
        </member>
        <member name="M:Genesis.Math.PerlinNoise.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <param name="x">The interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Genesis.Math.PerlinNoise.GenerateNoise(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Generates Perlin noise at a specific point with specified parameters.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="persistence">The persistence value affecting the amplitude of octaves.</param>
            <param name="octaves">The number of octaves to generate.</param>
            <param name="seed">The seed value for the noise generation.</param>
            <returns>The generated Perlin noise value at the specified point.</returns>
        </member>
        <member name="M:Genesis.Math.PerlinNoise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a 2D noise map with specified dimensions and seed.
            </summary>
            <param name="width">The width of the noise map.</param>
            <param name="height">The height of the noise map.</param>
            <param name="seed">The seed value for the noise generation.</param>
            <returns>A list of NoisePoint objects representing the generated noise map.</returns>
        </member>
        <member name="T:Genesis.Math.Rect">
            <summary>
            Represents a rectangle with position and dimensions.
            </summary>
        </member>
        <member name="P:Genesis.Math.Rect.X">
            <summary>
            Gets or sets the X-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Math.Rect.Y">
            <summary>
            Gets or sets the Y-coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Math.Rect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Genesis.Math.Rect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="M:Genesis.Math.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for the Rect class that initializes the rectangle with specified position and dimensions.
            </summary>
            <param name="x">The X-coordinate of the rectangle.</param>
            <param name="y">The Y-coordinate of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Genesis.Math.Rect.#ctor">
            <summary>
            Default constructor for the Rect class.
            </summary>
        </member>
        <member name="M:Genesis.Math.Rect.Contains(System.Single,System.Single)">
            <summary>
            Checks if a point with specified coordinates is contained within the rectangle.
            </summary>
            <param name="x">The X-coordinate of the point.</param>
            <param name="y">The Y-coordinate of the point.</param>
            <returns>True if the point is contained within the rectangle, otherwise false.</returns>
        </member>
        <member name="M:Genesis.Math.Rect.Intersects(Genesis.Math.Rect)">
            <summary>
            Checks if the current rectangle intersects with another rectangle.
            </summary>
            <param name="rect">The other rectangle to check for intersection.</param>
            <returns>True if the rectangles intersect, otherwise false.</returns>
        </member>
        <member name="M:Genesis.Math.Rect.ToString">
            <summary>
            Converts the rectangle to a string representation in the format "X;Y;Width;Height".
            </summary>
            <returns>A string representation of the rectangle.</returns>
        </member>
        <member name="T:Genesis.Math.Vec3">
            <summary>
            Represents a 3D vector for coordinates.
            </summary>
        </member>
        <member name="P:Genesis.Math.Vec3.X">
            <summary>
            Gets or sets the X-coordinate of the vector.
            </summary>
        </member>
        <member name="P:Genesis.Math.Vec3.Y">
            <summary>
            Gets or sets the Y-coordinate of the vector.
            </summary>
        </member>
        <member name="P:Genesis.Math.Vec3.Z">
            <summary>
            Gets or sets the Z-coordinate of the vector.
            </summary>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new 3D vector with specified coordinates.
            </summary>
            <param name="x">The X-coordinate of the vector.</param>
            <param name="y">The Y-coordinate of the vector.</param>
            <param name="z">The Z-coordinate of the vector.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Drawing.Size)">
            <summary>
            Creates a new 3D vector with specified coordinates from a Size object.
            </summary>
            <param name="size">The Size object to extract coordinates from.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new 3D vector with specified coordinates from a SizeF object.
            </summary>
            <param name="size">The SizeF object to extract coordinates from.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Drawing.Point)">
            <summary>
            Creates a new 3D vector with specified coordinates from a Point object.
            </summary>
            <param name="size">The Point object to extract coordinates from.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a new 3D vector with specified coordinates from a PointF object.
            </summary>
            <param name="size">The PointF object to extract coordinates from.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(GlmSharp.vec3)">
            <summary>
            Creates a new 3D vector with specified coordinates from a glm vec3 object.
            </summary>
            <param name="size">The glm vec3 object to extract coordinates from.</param>
        </member>
        <member name="M:Genesis.Math.Vec3.Zero">
            <summary>
            Returns a new 3D vector with X = 0, Y = 0, Z = 0.
            </summary>
            <returns>A Vec3 instance representing the zero vector.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(System.Single,System.Single)">
            <summary>
            Returns the offset angle to the vector.
            </summary>
            <param name="x">The X-coordinate of the vector.</param>
            <param name="y">The Y-coordinate of the vector.</param>
            <returns>The offset angle to the vector in degrees.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(Genesis.Math.Vec3)">
            <summary>
            Returns the offset angle to the vector.
            </summary>
            <param name="vec3">The reference vector.</param>
            <returns>The offset angle to the vector in degrees.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards(System.Single,System.Single)">
            <summary>
            Calculates the vector towards in 3D.
            </summary>
            <param name="rotation">The rotation vector.</param>
            <param name="start">The starting vector.</param>
            <param name="dist">The distance.</param>
            <returns>A new Vec3 instance representing the vector towards in 3D.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards2D(System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns a new vector towards the given direction.
            </summary>
            <param name="degrees"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the Vector towards in 3D
            </summary>
            <param name="rotation"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(System.Single,System.Single,System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the towards vector
            </summary>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="rotZ"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Distance(Genesis.Math.Vec3)">
            <summary>
            Returns the distance between two vectors
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(Genesis.Math.Vec3)">
            <summary>
            Adds the value from a vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddX(System.Single)">
            <summary>
            Add the value to the X param
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddY(System.Single)">
            <summary>
            Add the value to the y param
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddZ(System.Single)">
            <summary>
            Add the value to the z param
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Sub(Genesis.Math.Vec3)">
            <summary>
            Subtract the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(Genesis.Math.Vec3)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Forward(Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns the forward vector
            </summary>
            <param name="rotation"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Addition(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Add operator for vector addition.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new Vec3 instance representing the result of vector addition.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Multiply(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Add operator for vector multiplication.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new Vec3 instance representing the result of vector multiplication.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Division(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Add operator for vector substraction.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new Vec3 instance representing the result of vector substraction.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Multiply(Genesis.Math.Vec3,System.Single)">
            <summary>
            Multiplies the vector by a scalar value.
            </summary>
            <param name="vec">The vector to multiply.</param>
            <param name="value">The scalar value.</param>
            <returns>A new Vec3 instance representing the result of the multiplication.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Subtraction(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector to subtract.</param>
            <returns>A new Vec3 instance representing the result of the subtraction.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Cross(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>A new Vec3 instance representing the cross product of the two vectors.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Dot(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vec1">The first vector.</param>
            <param name="vec2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
            <returns>A normalized Vec3 instance.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Normalized(Genesis.Math.Vec3)">
            <summary>
            Returns a normalized version of the input vector.
            </summary>
            <param name="vec">The vector to normalize.</param>
            <returns>A normalized Vec3 instance.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Ceiling(Genesis.Math.Vec3)">
            <summary>
            Returns a new Vec3 object where each component is the smallest integer greater than or equal to the corresponding component of the input Vec3.
            </summary>
            <param name="vec">The input Vec3 to be processed.</param>
            <returns>A new Vec3 with each component rounded up to the nearest integer.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Floor(Genesis.Math.Vec3)">
            <summary>
            Returns a new Vec3 object where each component is rounded down to the nearest integer
            </summary>
            <param name="vec">The input Vec3 to be processed.</param>
            <returns>A new Vec3 with each component rounded down to the nearest integer.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Round(Genesis.Math.Vec3)">
            <summary>
            Returns a new Vec3 object where each component is rounded to the nearest integer
            </summary>
            <param name="vec">The input Vec3 to be processed.</param>
            <returns>A new Vec3 with each component rounded to the nearest integer.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Random(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Int32)">
            <summary>
            Generates an rendom vector from min an max value with the given seed
            </summary>
            <param name="min">The min vector</param>
            <param name="max">The max vector</param>
            <param name="seed">The seed</param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Random(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Generates an rendom vector from min an max value
            </summary>
            <param name="min">The min vector</param>
            <param name="max">The max vector</param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.ToString">
            <summary>
            Returns a string representation of the vector.
            </summary>
            <returns>A string containing the X, Y, and Z coordinates of the vector.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.ToGlmVec3">
            <summary>
            Converts the vector to its GLM equivalent.
            </summary>
            <returns>A GLM vec3 instance representing the same vector.</returns>
        </member>
        <member name="M:Genesis.Math.Vec3.ToBulletVec3">
            <summary>
            Converts the vector to its BulletSharp equivalent.
            </summary>
            <returns>A BulletSharp Vector3 instance representing the same vector.</returns>
        </member>
        <member name="T:Genesis.UI.Canvas">
            <summary>
            Represents a canvas for organizing and rendering UI widgets.
            </summary>
        </member>
        <member name="P:Genesis.UI.Canvas.Name">
            <summary>
            Gets or sets the name of the canvas.
            </summary>
        </member>
        <member name="P:Genesis.UI.Canvas.Widgets">
            <summary>
            Gets or sets the list of widgets contained within the canvas.
            </summary>
        </member>
        <member name="P:Genesis.UI.Canvas.Location">
            <summary>
            Gets or sets the location of the canvas.
            </summary>
        </member>
        <member name="P:Genesis.UI.Canvas.Size">
            <summary>
            Gets or sets the size of the canvas.
            </summary>
        </member>
        <member name="P:Genesis.UI.Canvas.Enabled">
            <summary>
            Gets or sets a value indicating whether the canvas is enabled.
            </summary>
        </member>
        <member name="M:Genesis.UI.Canvas.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new instance of the Canvas class.
            </summary>
            <param name="name">The name of the canvas.</param>
            <param name="location">The location of the canvas.</param>
            <param name="size">The size of the canvas.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.AddWidget(Genesis.UI.Widget)">
            <summary>
            Adds a widget to the canvas.
            </summary>
            <param name="widget">The widget to be added.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnInit(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Initializes the canvas.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The scene instance.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Updates the canvas.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The scene instance.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene)">
            <summary>
            Renders the canvas.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device.</param>
            <param name="scene">The scene instance.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnDispose(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Disposes of the canvas.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The scene instance.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.GetWidget(System.String)">
            <summary>
            Returns a widget with the specified name, searching within entities and their children.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetBounds">
            <summary>
            Returns the bounds of the canvas.
            </summary>
            <returns>The bounds of the canvas.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetScreenBounds">
            <summary>
            Returns the screen bounds of the canvas.
            </summary>
            <returns>The screen bounds of the canvas.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.CenterWidget(Genesis.UI.Canvas,Genesis.UI.Widget)">
            <summary>
            Centers the widget in the middle of the canvas.
            </summary>
            <param name="canvas">The canvas instance.</param>
            <param name="widget">The widget to be centered.</param>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadCanvas(System.String,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a canvas from a specified JSON file using a UI parser and asset manager.
            </summary>
            <param name="File">Path to the JSON file containing canvas configuration.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created canvas based on the JSON configuration.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadWidget(Newtonsoft.Json.Linq.JObject,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a widget from provided JSON data using a UI parser and asset manager.
            </summary>
            <param name="data">JSON data containing the configuration of the widget to be created.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created widget based on the JSON data.</returns>
        </member>
        <member name="T:Genesis.UI.UIParseHandler">
            <summary>
            Delegate for handling the parsing of JSON data into a widget.
            </summary>
            <param name="data">JSON data containing the widget configuration.</param>
            <param name="assets">Asset manager for managing resources such as textures, fonts, etc.</param>
            <returns>The parsed widget based on the JSON data.</returns>
        </member>
        <member name="T:Genesis.UI.UIParser">
            <summary>
            This class provides functions to parse a JSON object as a widget.
            </summary>
        </member>
        <member name="P:Genesis.UI.UIParser.UIHandler">
            <summary>
            Gets or sets the dictionary of UI parse handlers, mapping widget types to their respective parsing functions.
            </summary>
        </member>
        <member name="M:Genesis.UI.UIParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.UI.UIParser"/> class.
            </summary>
        </member>
        <member name="T:Genesis.UI.UIEvent">
            <summary>
            Delegate for handling UI events.
            </summary>
            <param name="entity">The widget triggering the event.</param>
            <param name="game">The game instance.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
        </member>
        <member name="T:Genesis.UI.Widget">
            <summary>
            Base class for UI widgets.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Name">
            <summary>
            Gets or sets the name of the widget.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Location">
            <summary>
            Gets or sets the location of the widget in 3D space.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Size">
            <summary>
            Gets or sets the size of the widget.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Parent">
            <summary>
            Gets or sets the parent widget.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Children">
            <summary>
            Gets or sets the list of child widgets.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Enabled">
            <summary>
            Gets or sets a value indicating whether the widget is enabled.
            </summary>
        </member>
        <member name="P:Genesis.UI.Widget.Debug">
            <summary>
            Gets or sets a value indicating whether debug mode is enabled for the widget.
            </summary>
        </member>
        <member name="E:Genesis.UI.Widget.MouseEnter">
            <summary>
            Event triggered when the mouse enters the widget.
            </summary>
        </member>
        <member name="E:Genesis.UI.Widget.MouseLeave">
            <summary>
            Event triggered when the mouse leaves the widget.
            </summary>
        </member>
        <member name="E:Genesis.UI.Widget.Click">
            <summary>
            Event triggered when the widget is clicked.
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.#ctor">
            <summary>
            Creates a new instance of the Widget class.
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.AddChildren(Genesis.UI.Widget)">
            <summary>
            Adds a child widget to the entity and sets the parent of the child entity.
            </summary>
            <param name="widget">The child widget to be added.</param>
        </member>
        <member name="M:Genesis.UI.Widget.OnInit(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Initializes the widget.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
        </member>
        <member name="M:Genesis.UI.Widget.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Updates the widget.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
        </member>
        <member name="M:Genesis.UI.Widget.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the widget.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
        </member>
        <member name="M:Genesis.UI.Widget.OnDispose(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Disposes the widget.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativePos(Genesis.UI.Canvas)">
            <summary>
            Gets the relative position of the widget on the screen.
            </summary>
            <param name="canvas">The canvas used for rendering.</param>
            <returns>The relative position of the widget.</returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetChildren(System.String)">
            <summary>
            Returns the child widget with the specified name.
            </summary>
            <param name="name">The name of the child widget to find.</param>
            <returns>The child widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativeBounds2D(Genesis.UI.Canvas)">
            <summary>
            Gets the relative bounds of the widget on the canvas.
            </summary>
            <param name="canvas">The canvas used for rendering.</param>
            <returns>The relative bounds of the widget.</returns>
        </member>
        <member name="M:Genesis.UI.Widget.IsHover(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Checks if the mouse is hovering over the widget.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The current scene.</param>
            <param name="canvas">The canvas used for rendering.</param>
            <returns>True if the mouse is hovering over the widget, otherwise false.</returns>
        </member>
        <member name="M:Genesis.UI.Widget.FindChildren(System.String)">
            <summary>
            Recursively finds a child widget with the given name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="T:Genesis.UI.ImageButton">
            <summary>
            Represents an image button widget in the UI.
            </summary>
        </member>
        <member name="P:Genesis.UI.ImageButton.NormalTexture">
            <summary>
            Gets or sets the normal texture displayed when the button is not hovered.
            </summary>
        </member>
        <member name="P:Genesis.UI.ImageButton.HoverTexture">
            <summary>
            Gets or sets the hover texture displayed when the button is hovered.
            </summary>
        </member>
        <member name="M:Genesis.UI.ImageButton.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.Texture)">
            <summary>
            Creates a new instance of the ImageButton class.
            </summary>
            <param name="name">The name of the image button.</param>
            <param name="location">The location of the image button.</param>
            <param name="size">The size of the image button.</param>
            <param name="normalTexture">The normal texture displayed when the button is not hovered.</param>
            <param name="hoverTexture">The hover texture displayed when the button is hovered.</param>
        </member>
        <member name="M:Genesis.UI.ImageButton.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the image button on the screen.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device.</param>
            <param name="scene">The scene instance.</param>
            <param name="canvas">The canvas containing the image button.</param>
        </member>
        <member name="T:Genesis.UI.Label">
            <summary>
            Represents a label widget in the UI.
            </summary>
        </member>
        <member name="P:Genesis.UI.Label.Font">
            <summary>
            Gets or sets the font used for the label.
            </summary>
        </member>
        <member name="P:Genesis.UI.Label.Text">
            <summary>
            Gets or sets the text content of the label.
            </summary>
        </member>
        <member name="P:Genesis.UI.Label.TextColor">
            <summary>
            Gets or sets the color of the text in the label.
            </summary>
        </member>
        <member name="P:Genesis.UI.Label.FontSize">
            <summary>
            Gets or sets the font size of the label.
            </summary>
        </member>
        <member name="M:Genesis.UI.Label.#ctor(System.String,Genesis.Math.Vec3,System.String,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Create a new instance of the label
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.UI.Label.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the label
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Label.GetStringWidht">
            <summary>
            Returns the width from the string in float
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Label.GetStringBounds(Genesis.Math.Vec3)">
            <summary>
            Returns the display bounds from the string
            </summary>
            <param name="location">Location from the string</param>
            <returns></returns>
        </member>
        <member name="T:Genesis.UI.ListItem">
            <summary>
            Represents a list item with a name, text, and a callback function for selection.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListItem.Name">
            <summary>
            Gets or sets the name of the list item.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListItem.Text">
            <summary>
            Gets or sets the text content of the list item.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListItem.OnSelect">
            <summary>
            Gets or sets the callback function invoked when the item is selected.
            </summary>
        </member>
        <member name="M:Genesis.UI.ListItem.#ctor(System.String,System.String,Genesis.UI.ListItemBehavior)">
            <summary>
            Creates a new instance of the ListItem class.
            </summary>
            <param name="name">The name of the list item.</param>
            <param name="text">The text content of the list item.</param>
            <param name="func">The callback function invoked when the item is selected.</param>
        </member>
        <member name="T:Genesis.UI.ListSelector">
            <summary>
            Represents a list selector widget in the UI, allowing the user to navigate and select items.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.Items">
            <summary>
            Gets or sets the list of items in the selector.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.LineHeight">
            <summary>
            Gets or sets the height of each line in the list.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.Font">
            <summary>
            Gets or sets the font used for rendering text in the list.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.CenterText">
            <summary>
            Gets or sets a value indicating whether the text should be centered within each line.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.FontSize">
            <summary>
            Gets or sets the font size used for rendering text in the list.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.FontSpacing">
            <summary>
            Gets or sets the font spacing used for rendering text in the list.
            </summary>
        </member>
        <member name="P:Genesis.UI.ListSelector.IndexChangedBehavior">
            <summary>
            Gets or sets the behavior invoked when the selected index changes.
            </summary>
        </member>
        <member name="M:Genesis.UI.ListSelector.#ctor(System.String,Genesis.Math.Vec3,Genesis.Graphics.Font)">
            <summary>
            Creates a new instance of the ListSelector class.
            </summary>
            <param name="name">The name of the list selector.</param>
            <param name="location">The location of the list selector.</param>
            <param name="font">The font used for rendering text in the list.</param>
        </member>
        <member name="M:Genesis.UI.ListSelector.AddItem(Genesis.UI.ListItem)">
            <summary>
            Adds an item to the list selector.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Genesis.UI.ListSelector.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the list selector on the screen.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device.</param>
            <param name="scene">The scene instance.</param>
            <param name="canvas">The canvas containing the list selector.</param>
        </member>
        <member name="M:Genesis.UI.ListSelector.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Updates the list selector.
            </summary>
            <param name="game">The game instance.</param>
            <param name="scene">The scene instance.</param>
            <param name="canvas">The canvas containing the list selector.</param>
        </member>
        <member name="M:Genesis.UI.ListSelector.CalcualteSize">
            <summary>
            Calculates the size of the list selector based on its content.
            </summary>
            <returns>The calculated size of the list selector.</returns>
        </member>
        <member name="T:Genesis.UI.Panel">
            <summary>
            Represents a UI panel that can have a background image, background color, or both.
            </summary>
        </member>
        <member name="P:Genesis.UI.Panel.BackgroundImage">
            <summary>
            Gets or sets the background image of the panel.
            </summary>
        </member>
        <member name="P:Genesis.UI.Panel.BackgroundColor">
            <summary>
            Gets or sets the background color of the panel.
            </summary>
        </member>
        <member name="P:Genesis.UI.Panel.HasBackgroundColor">
            <summary>
            Gets or sets a value indicating whether the panel has a background color.
            </summary>
        </member>
        <member name="M:Genesis.UI.Panel.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.UI.Panel"/> class with the specified name, location, and size.
            </summary>
            <param name="name">The name of the panel.</param>
            <param name="location">The location of the panel.</param>
            <param name="size">The size of the panel.</param>
        </member>
        <member name="M:Genesis.UI.Panel.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the panel, considering the background image and color.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
            <param name="scene">The scene in which the panel is rendered.</param>
            <param name="canvas">The canvas to which the panel belongs.</param>
        </member>
        <member name="T:Genesis.UI.ProgressBar">
            <summary>
            Represents a progress bar UI element.
            </summary>
        </member>
        <member name="P:Genesis.UI.ProgressBar.MaxValue">
            <summary>
            Gets or sets the maximum value of the progress bar.
            </summary>
        </member>
        <member name="P:Genesis.UI.ProgressBar.Value">
            <summary>
            Gets or sets the current value of the progress bar.
            </summary>
        </member>
        <member name="P:Genesis.UI.ProgressBar.BackgroundColor">
            <summary>
            Gets or sets the background color of the progress bar.
            </summary>
        </member>
        <member name="P:Genesis.UI.ProgressBar.BarColor">
            <summary>
            Gets or sets the color of the progress bar.
            </summary>
        </member>
        <member name="P:Genesis.UI.ProgressBar.BorderColor">
            <summary>
            Gets or sets the color of the progress bar border.
            </summary>
        </member>
        <member name="M:Genesis.UI.ProgressBar.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:Genesis.UI.ProgressBar"/> class with the specified name, location, and size.
            </summary>
            <param name="name">The name of the progress bar.</param>
            <param name="location">The location of the progress bar.</param>
            <param name="size">The size of the progress bar.</param>
        </member>
        <member name="M:Genesis.UI.ProgressBar.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the progress bar with its background, bar, and border.
            </summary>
            <param name="game">The game instance.</param>
            <param name="renderDevice">The render device used for rendering.</param>
            <param name="scene">The scene in which the progress bar is rendered.</param>
            <param name="canvas">The canvas to which the progress bar belongs.</param>
        </member>
    </members>
</doc>
