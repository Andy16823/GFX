{
  "api/Genesis.Class1.html": {
    "href": "api/Genesis.Class1.html",
    "title": "Class Class1 | GFX",
    "keywords": "Class Class1 Inheritance object Class1 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis Assembly: Genesis.dll Syntax public class Class1 Constructors Class1() Declaration public Class1()"
  },
  "api/Genesis.Core.AssetManager.html": {
    "href": "api/Genesis.Core.AssetManager.html",
    "title": "Class AssetManager | GFX",
    "keywords": "Class AssetManager Manages game assets such as textures and fonts. Inheritance object AssetManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class AssetManager Constructors AssetManager() Initializes a new instance of the AssetManager class. Declaration public AssetManager() Properties Fonts List of loaded fonts. Declaration public List<Font> Fonts { get; set; } Property Value Type Description List<Font> Textures List of loaded textures. Declaration public List<Texture> Textures { get; set; } Property Value Type Description List<Texture> Methods AddFont(Font) Adds an font Declaration public void AddFont(Font font) Parameters Type Name Description Font font the font to add AddTexture(string, Bitmap) Adds a texture to the asset manager. Declaration public Texture AddTexture(string name, Bitmap bitmap) Parameters Type Name Description string name The name of the texture. Bitmap bitmap The bitmap representing the texture. Returns Type Description Texture The added texture. DisposeTextures(Game) Disposes of the loaded textures and fonts. Declaration public void DisposeTextures(Game game) Parameters Type Name Description Game game The game object associated with the assets. GetFont(string) Gets a font by name. Declaration public Font GetFont(string name) Parameters Type Name Description string name The name of the font. Returns Type Description Font The font with the specified name, or null if not found. GetRessourcesDirectory() Gets the resource directory path. Declaration public static string GetRessourcesDirectory() Returns Type Description string The path to the resource directory. GetTexture(string) Gets a texture by name. Declaration public Texture GetTexture(string name) Parameters Type Name Description string name The name of the texture. Returns Type Description Texture The texture with the specified name, or null if not found. ImportAssetLibary(string) Imports assets from an asset library. Declaration public void ImportAssetLibary(string file) Parameters Type Name Description string file The file path of the asset library to import. Init(IRenderDevice) Initializes the assets in the rendering device. Declaration public void Init(IRenderDevice renderDevice) Parameters Type Name Description IRenderDevice renderDevice The rendering device to load the assets into. LoadFonts() Loads fonts from the resource folder. Declaration public void LoadFonts() LoadSystemFont(string) Loads a system font Declaration public void LoadSystemFont(string font) Parameters Type Name Description string font LoadTextures() Loads textures from the resource folder. Declaration public void LoadTextures() PackAssets(string) Packs the assets into an asset library. Declaration public void PackAssets(string file) Parameters Type Name Description string file The file path to save the asset library."
  },
  "api/Genesis.Core.Behaviors.AnimationBehavior.html": {
    "href": "api/Genesis.Core.Behaviors.AnimationBehavior.html",
    "title": "Class AnimationBehavior | GFX",
    "keywords": "Class AnimationBehavior Represents a behavior that enables sprite animations in the Genesis framework. Inheritance object IGameBehavior AnimationBehavior Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public class AnimationBehavior : IGameBehavior Constructors AnimationBehavior() Initializes a new instance of the AnimationBehavior class. Declaration public AnimationBehavior() AnimationBehavior(float, float, long, Texture) Initializes a new instance of the AnimationBehavior class with specified parameters. Declaration public AnimationBehavior(float cells, float rows, long frameTime, Texture animationSheet) Parameters Type Name Description float cells The number of cells (frames) in a row in the animation sheet. float rows The number of rows in the animation sheet. long frameTime The time in milliseconds between animation frames. Texture animationSheet The texture containing the animation frames. Properties AnimationSheet Gets or sets the texture containing the animation frames. Declaration public Texture AnimationSheet { get; set; } Property Value Type Description Texture Animations Gets or sets the list of animations available for this behavior. Declaration public List<Animation> Animations { get; set; } Property Value Type Description List<Animation> Cells Gets or sets the number of cells (frames) in a row in the animation sheet. Declaration public float Cells { get; set; } Property Value Type Description float FrameTime Gets or sets the time in milliseconds between animation frames. Declaration public long FrameTime { get; set; } Property Value Type Description long Rows Gets or sets the number of rows in the animation sheet. Declaration public float Rows { get; set; } Property Value Type Description float SelectedAnimation Gets or sets the currently selected animation. Declaration public Animation SelectedAnimation { get; set; } Property Value Type Description Animation Methods AddAnimation(Animation) Adds an animation to the list of available animations. Declaration public void AddAnimation(Animation animation) Parameters Type Name Description Animation animation LoadAnimation(string) Loads the specified animation by name. Declaration public void LoadAnimation(string name) Parameters Type Name Description string name The name of the animation to load. OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game element is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game element is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) Play() Starts playing the animation. Declaration public void Play() Stop() Stops playing the animation. Declaration public void Stop()"
  },
  "api/Genesis.Core.Behaviors.CameraFlags.html": {
    "href": "api/Genesis.Core.Behaviors.CameraFlags.html",
    "title": "Enum CameraFlags | GFX",
    "keywords": "Enum CameraFlags Enumeration for defining camera flags. Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public enum CameraFlags Fields Name Description CameraLookAtSprite CameraLookAtSpriteRounded IgnoreCamera"
  },
  "api/Genesis.Core.Behaviors.CharacterController2D.html": {
    "href": "api/Genesis.Core.Behaviors.CharacterController2D.html",
    "title": "Class CharacterController2D | GFX",
    "keywords": "Class CharacterController2D Class representing a 2D character controller as a game behavior. Inheritance object IGameBehavior CharacterController2D Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public class CharacterController2D : IGameBehavior Constructors CharacterController2D() Default constructor for CharacterController2D. Declaration public CharacterController2D() Properties AllowJump Gets or sets the jump cooldown duration in milliseconds. Declaration public bool AllowJump { get; set; } Property Value Type Description bool CameraFlags Gets or sets the camera flags for character control. Declaration public CameraFlags CameraFlags { get; set; } Property Value Type Description CameraFlags ColliderHeight Gets or sets the follider height Declaration public float ColliderHeight { get; set; } Property Value Type Description float ColliderRadius Gets or sets the collider radius Declaration public float ColliderRadius { get; set; } Property Value Type Description float DownKey Gets or sets the key for moving the character down. Declaration public Keys DownKey { get; set; } Property Value Type Description Keys JumpCooldown Gets or sets the jump cooldown in milliseconds Declaration public long JumpCooldown { get; set; } Property Value Type Description long JumpKey Gets or sets whether jumping is allowed. Declaration public Keys JumpKey { get; set; } Property Value Type Description Keys JumpSpeed Gets or sets the jump speed of the character. Declaration public float JumpSpeed { get; set; } Property Value Type Description float LeftKey Gets or sets the key for moving the character right. Declaration public Keys LeftKey { get; set; } Property Value Type Description Keys Mass Gets or sets the mass of the character. Declaration public float Mass { get; set; } Property Value Type Description float MoveDirection Gets the last movement direction from the character Declaration public MoveDirection MoveDirection { get; set; } Property Value Type Description MoveDirection MovementFlags Gets or sets the movement flags for character control. Declaration public MovementFlags MovementFlags { get; set; } Property Value Type Description MovementFlags RightKey Gets or sets the key for making the character jump. Declaration public Keys RightKey { get; set; } Property Value Type Description Keys Rigidbody Gets or sets the Rigidbody2D component for character physics. Declaration public Rigidbody2D Rigidbody { get; set; } Property Value Type Description Rigidbody2D Speed Gets or sets the speed of the character movement. Declaration public float Speed { get; set; } Property Value Type Description float UpKey Gets or sets the key for moving the character up. Declaration public Keys UpKey { get; set; } Property Value Type Description Keys Methods CharacterProcess(Game) Processes character movement and behavior based on user input. Declaration public void CharacterProcess(Game game) Parameters Type Name Description Game game The game instance. CreatePhysics(PhysicHandler) Creates default physics for the character with no specified factors. Declaration public void CreatePhysics(PhysicHandler physicHandler) Parameters Type Name Description PhysicHandler physicHandler The physics handler for creating the physics. CreatePhysics(PhysicHandler, ControllerPreset) Creates physics for the character based on the specified controller preset. Declaration public void CreatePhysics(PhysicHandler physicsHandler, ControllerPreset controllerPreset) Parameters Type Name Description PhysicHandler physicsHandler The physics handler for creating the physics. ControllerPreset controllerPreset The preset for the controller. CreatePhysics(PhysicHandler, Vec3, Vec3, bool) Creates physics for the character with specified factors and physics enabling. Declaration public void CreatePhysics(PhysicHandler physicHandler, Vec3 linearFactor, Vec3 angularFactor, bool enablePhysics) Parameters Type Name Description PhysicHandler physicHandler The physics handler for creating the physics. Vec3 linearFactor The linear factor for the physics. Vec3 angularFactor The angular factor for the physics. bool enablePhysics Specifies whether physics should be enabled initially. OnDestroy(Game, GameElement) Destruction method called when the game ends or the behavior is removed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent GameElement of the behavior. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Initialization method called when the game starts. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent GameElement of the behavior. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Rendering method called during the rendering phase. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent GameElement of the behavior. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Updates the character state on each frame. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent GameElement of the behavior. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.ControllerPreset.html": {
    "href": "api/Genesis.Core.Behaviors.ControllerPreset.html",
    "title": "Enum ControllerPreset | GFX",
    "keywords": "Enum ControllerPreset Enumeration for defining controller presets. Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public enum ControllerPreset Fields Name Description SideScrollerController TopDownController"
  },
  "api/Genesis.Core.Behaviors.MoveDirection.html": {
    "href": "api/Genesis.Core.Behaviors.MoveDirection.html",
    "title": "Enum MoveDirection | GFX",
    "keywords": "Enum MoveDirection Enumeration for the move direction Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public enum MoveDirection Fields Name Description East North South West"
  },
  "api/Genesis.Core.Behaviors.MovementFlags.html": {
    "href": "api/Genesis.Core.Behaviors.MovementFlags.html",
    "title": "Enum MovementFlags | GFX",
    "keywords": "Enum MovementFlags Enumeration for defining movement flags. Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public enum MovementFlags Fields Name Description CharacterMoveHorizontal CharacterMoveVertical CharacterMoveVerticalAndHorizontal"
  },
  "api/Genesis.Core.Behaviors.Physics2D.BoxTrigger2D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.BoxTrigger2D.html",
    "title": "Class BoxTrigger2D | GFX",
    "keywords": "Class BoxTrigger2D Represents a 2D box trigger for physics interactions. Inheritance object IGameBehavior PhysicsBehavior BoxTrigger2D Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class BoxTrigger2D : PhysicsBehavior Constructors BoxTrigger2D() Declaration public BoxTrigger2D() Properties Trigger Gets or sets the ghost object representing the trigger. Declaration public GhostObject Trigger { get; set; } Property Value Type Description GhostObject Methods CreateCollider(PhysicHandler, Vec3) Creates a collider for the box trigger. Declaration public void CreateCollider(PhysicHandler handler, Vec3 halfExtends) Parameters Type Name Description PhysicHandler handler The physics handler. Vec3 halfExtends Half extends of the box. GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The ghost object representing the trigger. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The ghost object representing the trigger. Type Parameters Name Description T The type to cast to. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the behavior needs to render something. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the behavior needs to update its state. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.BufferedSpriteCollider.html",
    "title": "Class BufferedSpriteCollider | GFX",
    "keywords": "Class BufferedSpriteCollider Represents a behavior for creating a physics collider for 2D sprites using BulletSharp. Inheritance object IGameBehavior PhysicsBehavior BufferedSpriteCollider Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class BufferedSpriteCollider : PhysicsBehavior Constructors BufferedSpriteCollider() Declaration public BufferedSpriteCollider() Properties AngularFactor Gets or sets the angular factor for the RigidBody's rotation. Declaration public Vec3 AngularFactor { get; set; } Property Value Type Description Vec3 LinearFactor Gets or sets the linear factor for the RigidBody's motion. Declaration public Vec3 LinearFactor { get; set; } Property Value Type Description Vec3 RigidBody Gets or sets the rigid body associated with the collider. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(float, PhysicHandler) Creates a rigid body for the collider. Declaration public void CreateRigidBody(float mass, PhysicHandler handler) Parameters Type Name Description float mass The mass of the rigid body. PhysicHandler handler The physics handler for managing the collider. GetPhysicsObject() Gets the physics object associated with the collider. Declaration public override object GetPhysicsObject() Returns Type Description object The rigid body associated with the collider. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the typed physics object associated with the collider. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The typed rigid body associated with the collider. Type Parameters Name Description T Type of the physics object. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Placeholder for OnDestroy event. No implementation. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Placeholder for OnInit event. No implementation. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Placeholder for OnRender event. No implementation. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Placeholder for OnUpdate event. No implementation. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.PhysicsBox2D.html",
    "title": "Class PhysicsBox2D | GFX",
    "keywords": "Class PhysicsBox2D Inheritance object IGameBehavior PhysicsBehavior PhysicsBox2D Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class PhysicsBox2D : PhysicsBehavior Constructors PhysicsBox2D() Declaration public PhysicsBox2D() Properties AngularFactor Gets or sets the angular factor for the RigidBody's rotation. Declaration public Vec3 AngularFactor { get; set; } Property Value Type Description Vec3 EnablePhysic Declaration public bool EnablePhysic { get; set; } Property Value Type Description bool LinearFactor Gets or sets the linear factor for the RigidBody's motion. Declaration public Vec3 LinearFactor { get; set; } Property Value Type Description Vec3 RigidBody Gets or sets the RigidBody associated with this 2D physics behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidbody(PhysicHandler, float) Creates a RigidBody with the specified mass using the provided PhysicHandler. Declaration public void CreateRigidbody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler The PhysicHandler responsible for managing physics elements. float mass The mass of the RigidBody. GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The RigidBody physics object. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The RigidBody physics object cast to the specified type. Type Parameters Name Description T The type to which the physics object is cast. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is being initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase of the game update cycle. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Updates the behavior during the game's update cycle. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's motion state based on the parent's location. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.PhysicsPolygon2D.html",
    "title": "Class PhysicsPolygon2D | GFX",
    "keywords": "Class PhysicsPolygon2D Inheritance object IGameBehavior PhysicsBehavior PhysicsPolygon2D Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class PhysicsPolygon2D : PhysicsBehavior Constructors PhysicsPolygon2D() Declaration public PhysicsPolygon2D() Properties AngularFactor Gets or sets the angular factor for the RigidBody's rotation. Declaration public Vec3 AngularFactor { get; set; } Property Value Type Description Vec3 EnablePhysic Gets or sets a value indicating whether physics is enabled for this behavior. Declaration public bool EnablePhysic { get; set; } Property Value Type Description bool true if physics is enabled; otherwise, false. LinearFactor Gets or sets the linear factor for the RigidBody's motion. Declaration public Vec3 LinearFactor { get; set; } Property Value Type Description Vec3 RigidBody Gets or sets the RigidBody associated with this 2D physics behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidbody(PhysicHandler, float, float[]) Creates a RigidBody with the specified mass using the provided PhysicHandler. Declaration public void CreateRigidbody(PhysicHandler handler, float mass, float[] points) Parameters Type Name Description PhysicHandler handler The PhysicHandler responsible for managing physics elements. float mass The mass of the RigidBody. float[] points GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The RigidBody physics object. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The RigidBody physics object cast to the specified type. Type Parameters Name Description T The type to which the physics object is cast. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is being initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase of the game update cycle. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Updates the behavior during the game's update cycle. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's motion state based on the parent's location. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics2D.Rigidbody2D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.Rigidbody2D.html",
    "title": "Class Rigidbody2D | GFX",
    "keywords": "Class Rigidbody2D Represents a 2D physics behavior for game elements. Inheritance object IGameBehavior PhysicsBehavior Rigidbody2D Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class Rigidbody2D : PhysicsBehavior Constructors Rigidbody2D() Declaration public Rigidbody2D() Properties AngularFactor Gets or sets the angular factor for the RigidBody's rotation. Declaration public Vec3 AngularFactor { get; set; } Property Value Type Description Vec3 EnablePhysic Gets or sets whether physics is enabled. Declaration public bool EnablePhysic { get; set; } Property Value Type Description bool LinearFactor Gets or sets the linear factor for the RigidBody's motion. Declaration public Vec3 LinearFactor { get; set; } Property Value Type Description Vec3 RigidBody Gets or sets the RigidBody associated with this 2D physics behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidbody(PhysicHandler, float) Creates a RigidBody with the specified mass using the provided PhysicHandler and default values for capsule radius and height. Declaration public void CreateRigidbody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler The PhysicHandler responsible for managing physics elements. float mass The mass of the RigidBody. CreateRigidbody(PhysicHandler, float, float, float) Creates a RigidBody with the specified mass using the provided PhysicHandler. Declaration public void CreateRigidbody(PhysicHandler handler, float mass, float capsuleRadius, float capsuleHeight) Parameters Type Name Description PhysicHandler handler The PhysicHandler responsible for managing physics elements. float mass The mass of the RigidBody. float capsuleRadius The radius of the capsule shape of the RigidBody. float capsuleHeight The height of the capsule shape of the RigidBody. GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The RigidBody physics object. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The RigidBody physics object cast to the specified type. Type Parameters Name Description T The type to which the physics object is cast. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is being initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase of the game update cycle. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Updates the behavior during the game's update cycle. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's motion state based on the parent's location. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics2D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics2D.html",
    "title": "Namespace Genesis.Core.Behaviors.Physics2D | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors.Physics2D Classes BoxTrigger2D Represents a 2D box trigger for physics interactions. BufferedSpriteCollider Represents a behavior for creating a physics collider for 2D sprites using BulletSharp. PhysicsBox2D PhysicsPolygon2D Rigidbody2D Represents a 2D physics behavior for game elements."
  },
  "api/Genesis.Core.Behaviors.Physics3D.BoxCollider.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.BoxCollider.html",
    "title": "Class BoxCollider | GFX",
    "keywords": "Class BoxCollider Defines a box collider behavior for 3D physics simulations. Inheritance object IGameBehavior PhysicsBehavior BoxCollider Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class BoxCollider : PhysicsBehavior Constructors BoxCollider() Declaration public BoxCollider() Properties RigidBody Gets or sets the rigid body associated with this box collider. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateCollider(PhysicHandler, Vec3, float) Creates a box collider with the specified parameters. Declaration public void CreateCollider(PhysicHandler handler, Vec3 boxHalfExtends, float mass) Parameters Type Name Description PhysicHandler handler The physics handler managing this collider. Vec3 boxHalfExtends The half extends of the box collider. float mass The mass of the box collider. GetPhysicsObject() Retrieves the physics object associated with this box collider. Declaration public override object GetPhysicsObject() Returns Type Description object The physics object associated with this collider. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Retrieves the physics object associated with this box collider, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The physics object associated with this collider, cast to the specified type. Type Parameters Name Description T The type to cast the physics object to. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the collider is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the collider is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the collider needs to be rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the collider needs to be updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics3D.BoxTrigger.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.BoxTrigger.html",
    "title": "Class BoxTrigger | GFX",
    "keywords": "Class BoxTrigger Defines a box trigger behavior for 3D physics simulations. Inheritance object IGameBehavior PhysicsBehavior BoxTrigger Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class BoxTrigger : PhysicsBehavior Constructors BoxTrigger() Declaration public BoxTrigger() Properties GhostObject Gets or sets the ghost object associated with this box trigger. Declaration public GhostObject GhostObject { get; set; } Property Value Type Description GhostObject Methods CreateCollider(PhysicHandler, Vec3) Creates a box trigger with the specified parameters. Declaration public void CreateCollider(PhysicHandler handler, Vec3 boxHalfExtends) Parameters Type Name Description PhysicHandler handler The physics handler managing this trigger. Vec3 boxHalfExtends The half extends of the box trigger. GetPhysicsObject() Retrieves the physics object associated with this box trigger. Declaration public override object GetPhysicsObject() Returns Type Description object The physics object associated with this trigger. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Retrieves the physics object associated with this box trigger, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The physics object associated with this trigger, cast to the specified type. Type Parameters Name Description T The type to cast the physics object to. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the trigger is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the trigger is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the trigger needs to be rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the trigger needs to be updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics3D.CapsuleCollider.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.CapsuleCollider.html",
    "title": "Class CapsuleCollider | GFX",
    "keywords": "Class CapsuleCollider Inheritance object IGameBehavior PhysicsBehavior CapsuleCollider Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class CapsuleCollider : PhysicsBehavior Constructors CapsuleCollider() Declaration public CapsuleCollider() Properties Offset Declaration public Vec3 Offset { get; set; } Property Value Type Description Vec3 RigidBody Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(PhysicHandler, Vec3, float, float, float) Declaration public void CreateRigidBody(PhysicHandler handler, Vec3 offset, float radius, float height, float mass) Parameters Type Name Description PhysicHandler handler Vec3 offset float radius float height float mass CreateRigidBody(PhysicHandler, float, float, float) Declaration public void CreateRigidBody(PhysicHandler handler, float radius, float height, float mass) Parameters Type Name Description PhysicHandler handler float radius float height float mass GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The physics object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to type T. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The physics object cast to type T Type Parameters Name Description T Type to cast the physics object to Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.html",
    "title": "Class ConvexHullBehavior | GFX",
    "keywords": "Class ConvexHullBehavior Represents a ConvexHull Rigidbody for Element3D. Inheritance object IGameBehavior PhysicsBehavior ConvexHullBehavior Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class ConvexHullBehavior : PhysicsBehavior Constructors ConvexHullBehavior() Declaration public ConvexHullBehavior() Properties RigidBody Gets or sets the RigidBody associated with this behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(PhysicHandler, float) Creates a RigidBody for the ConvexHullBehavior. Declaration public void CreateRigidBody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler Physics handler responsible for managing elements. float mass Mass of the rigid body. GetPhysicsObject() Gets the associated RigidBody as an object. Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the associated RigidBody with the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called during the update phase. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's position, rotation, and scale based on the associated parent element. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics3D.QubeConvexHull.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.QubeConvexHull.html",
    "title": "Class QubeConvexHull | GFX",
    "keywords": "Class QubeConvexHull Represents a Physics behavior for a 3D cube with a convex hull shape. Inheritance object IGameBehavior PhysicsBehavior QubeConvexHull Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class QubeConvexHull : PhysicsBehavior Constructors QubeConvexHull() Declaration public QubeConvexHull() Properties RigidBody Gets or sets the RigidBody associated with this behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(PhysicHandler, float) Creates a RigidBody for the QubeConvexHull behavior. Declaration public void CreateRigidBody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler Physics handler responsible for managing elements. float mass Mass of the rigid body. GetPhysicsObject() Gets the associated RigidBody as an object. Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the associated RigidBody with the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called during the update phase. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's position and rotation based on the associated parent element. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics3D.SphereCollider.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.SphereCollider.html",
    "title": "Class SphereCollider | GFX",
    "keywords": "Class SphereCollider Inheritance object IGameBehavior PhysicsBehavior SphereCollider Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class SphereCollider : PhysicsBehavior Constructors SphereCollider() Declaration public SphereCollider() Properties Offset Declaration public Vec3 Offset { get; set; } Property Value Type Description Vec3 RigidBody Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(PhysicHandler, Vec3, float, float) Declaration public void CreateRigidBody(PhysicHandler handler, Vec3 offset, float radius, float mass) Parameters Type Name Description PhysicHandler handler Vec3 offset float radius float mass CreateRigidBody(PhysicHandler, float, float) Declaration public void CreateRigidBody(PhysicHandler handler, float radius, float mass) Parameters Type Name Description PhysicHandler handler float radius float mass GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The physics object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to type T. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The physics object cast to type T Type Parameters Name Description T Type to cast the physics object to Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.html",
    "title": "Class StaticMeshBehavior | GFX",
    "keywords": "Class StaticMeshBehavior Represents a Physics behavior for a static mesh in 3D. Inheritance object IGameBehavior PhysicsBehavior StaticMeshBehavior Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, CollisionObject) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class StaticMeshBehavior : PhysicsBehavior Constructors StaticMeshBehavior() Declaration public StaticMeshBehavior() Properties RigidBody Gets or sets the RigidBody associated with this behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidBody(PhysicHandler, float, Mesh) Creates the RigidBody for the StaticMeshBehavior. Declaration public void CreateRigidBody(PhysicHandler handler, float mass, Mesh mesh) Parameters Type Name Description PhysicHandler handler Physics handler responsible for managing elements. float mass Mass of the rigid body. Mesh mesh Mesh data for creating the collision shape. Exceptions Type Condition InvalidOperationException Thrown when the parent element is not of type Element3D. GetPhysicsObject() Returns the physics object. Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Returns the physics object with the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Destroys the behavior. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Checks on init if the parent type is an Element3D. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) Exceptions Type Condition InvalidOperationException Thrown when the parent element is not of type Element3D. OnRender(Game, GameElement) Renderer callback Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Update callback. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's position and scaling based on the associated parent element. Declaration public void UpdateRigidBody()"
  },
  "api/Genesis.Core.Behaviors.Physics3D.html": {
    "href": "api/Genesis.Core.Behaviors.Physics3D.html",
    "title": "Namespace Genesis.Core.Behaviors.Physics3D | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors.Physics3D Classes BoxCollider Defines a box collider behavior for 3D physics simulations. BoxTrigger Defines a box trigger behavior for 3D physics simulations. CapsuleCollider ConvexHullBehavior Represents a ConvexHull Rigidbody for Element3D. QubeConvexHull Represents a Physics behavior for a 3D cube with a convex hull shape. SphereCollider StaticMeshBehavior Represents a Physics behavior for a static mesh in 3D."
  },
  "api/Genesis.Core.Behaviors.SpriteMovementController.html": {
    "href": "api/Genesis.Core.Behaviors.SpriteMovementController.html",
    "title": "Class SpriteMovementController | GFX",
    "keywords": "Class SpriteMovementController Represents a behavior for controlling the movement of a sprite. Inheritance object IGameBehavior SpriteMovementController Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public class SpriteMovementController : IGameBehavior Constructors SpriteMovementController() Initializes a new instance of the SpriteMovementController class. Declaration public SpriteMovementController() Properties Automove Gets or sets a flag indicating whether automatic movement is enabled. Declaration public bool Automove { get; set; } Property Value Type Description bool MoveSpeed Gets or sets the speed of the sprite movement. Declaration public float MoveSpeed { get; set; } Property Value Type Description float Methods MoveDown() Moves the sprite downwards. Declaration public void MoveDown() MoveLeft() Moves the sprite to the left. Declaration public void MoveLeft() MoveRight() Moves the sprite to the right. Declaration public void MoveRight() MoveUp() Moves the sprite upwards. Declaration public void MoveUp() OnDestroy(Game, GameElement) Called when the behavior is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called during the update phase. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "api/Genesis.Core.Behaviors._3D.Stance.html": {
    "href": "api/Genesis.Core.Behaviors._3D.Stance.html",
    "title": "Enum Stance | GFX",
    "keywords": "Enum Stance Defines the stance of the character. Namespace: Genesis.Core.Behaviors._3D Assembly: Genesis.dll Syntax public enum Stance Fields Name Description Idle Run Walk"
  },
  "api/Genesis.Core.Behaviors._3D.ThirdpersonCharacterController.html": {
    "href": "api/Genesis.Core.Behaviors._3D.ThirdpersonCharacterController.html",
    "title": "Class ThirdpersonCharacterController | GFX",
    "keywords": "Class ThirdpersonCharacterController Controls the behavior of a third-person character in a game. Inheritance object IGameBehavior ThirdpersonCharacterController Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors._3D Assembly: Genesis.dll Syntax public class ThirdpersonCharacterController : IGameBehavior Constructors ThirdpersonCharacterController() Initializes a new instance of the ThirdpersonCharacterController class. Declaration public ThirdpersonCharacterController() Properties Collider Gets or sets the collider for the character. Declaration public CapsuleCollider Collider { get; set; } Property Value Type Description CapsuleCollider IdleAnimation Gets or sets the name of the idle animation. Declaration public string IdleAnimation { get; set; } Property Value Type Description string InvertMouse Gets or sets a value indicating whether the mouse movement is inverted. Declaration public bool InvertMouse { get; set; } Property Value Type Description bool IsColliding Gets or sets a value indicating whether the character is colliding. Declaration public bool IsColliding { get; set; } Property Value Type Description bool IsRunning Gets or sets a value indicating whether the character is running. Declaration public bool IsRunning { get; set; } Property Value Type Description bool JumpSpeed Gets or sets the speed of jumping. Declaration public float JumpSpeed { get; set; } Property Value Type Description float RunAnimation Gets or sets the name of the running animation. Declaration public string RunAnimation { get; set; } Property Value Type Description string RunSpeed Gets or sets the speed of running. Declaration public float RunSpeed { get; set; } Property Value Type Description float Stance Gets or sets the stance of the character. Declaration public Stance Stance { get; set; } Property Value Type Description Stance WalkAnimation Gets or sets the name of the walking animation. Declaration public string WalkAnimation { get; set; } Property Value Type Description string WalkSpeed Gets or sets the speed of walking. Declaration public float WalkSpeed { get; set; } Property Value Type Description float Methods CreatePhysics(PhysicHandler, Vec3, float, float, float) Creates the physics for the character. Declaration public void CreatePhysics(PhysicHandler handler, Vec3 offset, float radius, float height, float mass) Parameters Type Name Description PhysicHandler handler The physics handler. Vec3 offset The offset. float radius The radius. float height The height. float mass The mass. CreatePhysics(PhysicHandler, float, float, float) Creates the physics for the character. Declaration public void CreatePhysics(PhysicHandler handler, float radius, float height, float mass) Parameters Type Name Description PhysicHandler handler The physics handler. float radius The radius. float height The height. float mass The mass. IsAirborn() Determines whether the character is airborne. Declaration public bool IsAirborn() Returns Type Description bool true if the character is airborne; otherwise, false. OnDestroy(Game, GameElement) Called when the game element is destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game element should be rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game element should be updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement) SetInput(Vec3) Sets the input vector for the character. Declaration public void SetInput(Vec3 inputVector) Parameters Type Name Description Vec3 inputVector The input vector to set for the character. Remarks This method assigns the provided input vector to the 'inputVector' property of the character."
  },
  "api/Genesis.Core.Behaviors._3D.html": {
    "href": "api/Genesis.Core.Behaviors._3D.html",
    "title": "Namespace Genesis.Core.Behaviors._3D | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors._3D Classes ThirdpersonCharacterController Controls the behavior of a third-person character in a game. Enums Stance Defines the stance of the character."
  },
  "api/Genesis.Core.Behaviors.html": {
    "href": "api/Genesis.Core.Behaviors.html",
    "title": "Namespace Genesis.Core.Behaviors | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors Classes AnimationBehavior Represents a behavior that enables sprite animations in the Genesis framework. CharacterController2D Class representing a 2D character controller as a game behavior. SpriteMovementController Represents a behavior for controlling the movement of a sprite. Enums CameraFlags Enumeration for defining camera flags. ControllerPreset Enumeration for defining controller presets. MoveDirection Enumeration for the move direction MovementFlags Enumeration for defining movement flags."
  },
  "api/Genesis.Core.Game.html": {
    "href": "api/Genesis.Core.Game.html",
    "title": "Class Game | GFX",
    "keywords": "Class Game Represents the main game class responsible for managing game loops, scenes, rendering, and updates. Inheritance object Game Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Game Constructors Game(IRenderDevice, Viewport) Creates a new instance of the Game class. Declaration public Game(IRenderDevice renderDevice, Viewport viewport) Parameters Type Name Description IRenderDevice renderDevice The rendering device to use. Viewport viewport The viewport configuration. Properties AssetManager Gets or sets the asset manager for handling game assets. Declaration public AssetManager AssetManager { get; set; } Property Value Type Description AssetManager DeltaTime Gets or sets the time elapsed since the last frame in milliseconds. Declaration public double DeltaTime { get; set; } Property Value Type Description double FPS Gets or sets the current frames per second achieved by the game loop. Declaration public double FPS { get; set; } Property Value Type Description double LastFrame Gets or sets the timestamp of the last frame. Declaration public long LastFrame { get; set; } Property Value Type Description long RenderDevice Gets or sets the rendering device used by the game. Declaration public IRenderDevice RenderDevice { get; set; } Property Value Type Description IRenderDevice Run Gets or sets a value indicating whether the game loop is running. Declaration public bool Run { get; set; } Property Value Type Description bool Scenes Gets or sets the list of scenes in the game. Declaration public List<Scene> Scenes { get; set; } Property Value Type Description List<Scene> SelectedScene Gets or sets the currently selected scene. Declaration public Scene SelectedScene { get; set; } Property Value Type Description Scene Storage Gets or sets the storage object for managing game data. Declaration public Storage Storage { get; set; } Property Value Type Description Storage TargetFPS Gets or sets the target frames per second for the game loop. Declaration public int TargetFPS { get; set; } Property Value Type Description int Viewport Gets or sets the viewport configuration for rendering. Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods AddScene(Scene) Adds a scene to the list of scenes. Declaration public Scene AddScene(Scene scene) Parameters Type Name Description Scene scene The Scene object to be added. Returns Type Description Scene The added Scene object. FindScene(string) Search for the scene with the given name Declaration public Scene FindScene(string name) Parameters Type Name Description string name The name for the scene Returns Type Description Scene GetElementCenterScreenLocation2D(GameElement) Returns the screen location of the given element with a center anchor. Declaration public Vec3 GetElementCenterScreenLocation2D(GameElement element) Parameters Type Name Description GameElement element The GameElement to get the centered screen coordinates for. Returns Type Description Vec3 A Vec3 representing the centered screen coordinates of the element. GetElementScreenLocation2D(GameElement) Get the screen coordinates of the given element. Declaration public Vec3 GetElementScreenLocation2D(GameElement element) Parameters Type Name Description GameElement element The GameElement to get the screen coordinates for. Returns Type Description Vec3 A Vec3 representing the screen coordinates of the element. GetSceneCord(Vec3) Transforms a display vector to a vector inside the scene. Declaration public Vec3 GetSceneCord(Vec3 location) Parameters Type Name Description Vec3 location The display vector to transform. Returns Type Description Vec3 A Vec3 representing the transformed vector inside the scene. InitGameElement(GameElement) Initializes a GameElement within the game environment. Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element The GameElement to be initialized. LoadScene(Scene) Loads a scene Declaration public void LoadScene(Scene scene) Parameters Type Name Description Scene scene The scene to be loaded. LoadScene(string) Loads a scene with the given name. Declaration public void LoadScene(string name) Parameters Type Name Description string name The name of the scene to be loaded. Loop() Main game loop. Handles updates and rendering. Declaration public void Loop() Start() Starts the main game loop. Declaration public void Start() Stop() Stops the main game loop. Declaration public void Stop() Events AfterRender Event triggered after rendering. Declaration public event GameEventHandler AfterRender Event Type Type Description GameEventHandler AfterUpdate Event triggered after the game update. Declaration public event GameEventHandler AfterUpdate Event Type Type Description GameEventHandler BeforeRender Event triggered before rendering. Declaration public event GameEventHandler BeforeRender Event Type Type Description GameEventHandler BeforeUpdate Event triggered before the game update. Declaration public event GameEventHandler BeforeUpdate Event Type Type Description GameEventHandler OnDispose Event triggered when the game is disposed. Declaration public event GameEventHandler OnDispose Event Type Type Description GameEventHandler OnInit Event triggered when the game initializes. Declaration public event GameEventHandler OnInit Event Type Type Description GameEventHandler OnRenderBeginn Event triggered at the beginning of rendering. Declaration public event GameEventHandler OnRenderBeginn Event Type Type Description GameEventHandler OnRenderEnd Event triggered at the end of rendering. Declaration public event GameEventHandler OnRenderEnd Event Type Type Description GameEventHandler OnUpdate Event triggered during the game update. Declaration public event GameEventHandler OnUpdate Event Type Type Description GameEventHandler"
  },
  "api/Genesis.Core.GameElement.html": {
    "href": "api/Genesis.Core.GameElement.html",
    "title": "Class GameElement | GFX",
    "keywords": "Class GameElement Represents a base class for game elements in the Genesis framework. Inheritance object GameElement BufferedSprite CameraElement Element3D Empty Model ParticleEmitter Qube RectElement Sprite Terrain2D Terrain3D Light Light2D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public abstract class GameElement Constructors GameElement() Creates a new instance of the GameElement class. Declaration public GameElement() Properties Behaviors Gets or sets the list of behaviors associated with the game element. Declaration public List<IGameBehavior> Behaviors { get; set; } Property Value Type Description List<IGameBehavior> Children Gets or sets the list of child game elements. Declaration public List<GameElement> Children { get; set; } Property Value Type Description List<GameElement> Enabled Gets or sets a value indicating whether the game element is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Gets or sets the 3D coordinates of the game element. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Gets or sets the name of the game element. Declaration public string Name { get; set; } Property Value Type Description string Parent Gets or sets the parent game element. Declaration public GameElement Parent { get; set; } Property Value Type Description GameElement Propertys Gets or sets the properties associated with the game element. Declaration public Dictionary<string, object> Propertys { get; set; } Property Value Type Description Dictionary<string, object> Rotation Gets or sets the 3D rotation of the game element. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Scene Gets or sets the scene to which the game element belongs. Declaration public Scene Scene { get; set; } Property Value Type Description Scene Size Gets or sets the 3D size of the game element. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Tag Gets or sets the tag associated with the game element. Declaration public string Tag { get; set; } Property Value Type Description string UUID Gets or sets the unique identifier for the game element. Declaration public string UUID { get; set; } Property Value Type Description string Methods AddBehavior(IGameBehavior) Adds a behavior to the game element. Declaration public void AddBehavior(IGameBehavior behavior) Parameters Type Name Description IGameBehavior behavior The behavior to be added. AddBehavior<T>(T) Adds a behavior of type T to the game element and returns it. Declaration public T AddBehavior<T>(T behavior) where T : IGameBehavior Parameters Type Name Description T behavior The behavior to be added. Returns Type Description T The added behavior of type T. Type Parameters Name Description T The type of the behavior. AddChild(GameElement) Adds a child game element to the current game element. Declaration public void AddChild(GameElement element) Parameters Type Name Description GameElement element The child game element to be added. GetBehavior<T>() Gets the first game behavior of type T. Declaration public IGameBehavior GetBehavior<T>() Returns Type Description IGameBehavior The first game behavior of type T, or null if not found. Type Parameters Name Description T The type of the behavior. GetBehaviors<T>() Returns all behaviors of type T. Declaration public List<IGameBehavior> GetBehaviors<T>() Returns Type Description List<IGameBehavior> A list of all behaviors of type T. Type Parameters Name Description T The type of the behavior. GetInstance(GameElement) Copies the properties from another game element instance to the current one. Declaration public virtual void GetInstance(GameElement element) Parameters Type Name Description GameElement element The game element from which to copy properties. Init(Game, IRenderDevice) Called when the game is initialized. Declaration public virtual void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnDestroy(Game) Called when the game element is disposed. Declaration public virtual void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. OnRender(Game, IRenderDevice) Called when the game is rendered. Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnUpdate(Game, IRenderDevice) Called when the game is updated. Declaration public virtual void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device."
  },
  "api/Genesis.Core.GameElements.BufferedSprite.html": {
    "href": "api/Genesis.Core.GameElements.BufferedSprite.html",
    "title": "Class BufferedSprite | GFX",
    "keywords": "Class BufferedSprite Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates. Inheritance object GameElement BufferedSprite Inherited Members GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class BufferedSprite : GameElement Constructors BufferedSprite(string, Vec3, Texture) Creates a new buffered sprite with the specified name, location, and texture. Declaration public BufferedSprite(string name, Vec3 location, Texture texture) Parameters Type Name Description string name The name of the game element. Vec3 location The location of the game element. Texture texture The texture applied to the sprite. Properties Colors Gets or sets the list of colors for the sprite. Declaration public List<float> Colors { get; set; } Property Value Type Description List<float> ShapeDeffinitions Gets or sets the list of shape definitions for the sprite. Declaration public List<SpriteShapeDeffinition> ShapeDeffinitions { get; set; } Property Value Type Description List<SpriteShapeDeffinition> TexCoords Gets or sets the list of texture coordinates for the sprite. Declaration public List<float> TexCoords { get; set; } Property Value Type Description List<float> Texture Gets or sets the texture applied to the sprite. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Verticies Gets or sets the list of vertices for the sprite. Declaration public List<float> Verticies { get; set; } Property Value Type Description List<float> Methods AddShape(Vec3, Vec3) Adds a new rectangular shape at the given location and with the given size to the sprite. Declaration public void AddShape(Vec3 location, Vec3 size) Parameters Type Name Description Vec3 location The location for the sprite. Vec3 size The size for the sprite. AddShape(Vec3, Vec3, TexCoords) Adds a new rectangular shape at the given location, size, and texture coordinates to the sprite. Declaration public void AddShape(Vec3 location, Vec3 size, TexCoords texCoords) Parameters Type Name Description Vec3 location The location for the sprite. Vec3 size The size for the sprite. TexCoords texCoords The texture coordinates for the sprite. Init(Game, IRenderDevice) Initializes the game element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Clears the GPU memory Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the game element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Updates the game element. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnUpdate(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.CameraElement.html": {
    "href": "api/Genesis.Core.GameElements.CameraElement.html",
    "title": "Class CameraElement | GFX",
    "keywords": "Class CameraElement Represents a game element that serves as a camera within the game world. Inheritance object GameElement CameraElement Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class CameraElement : GameElement Constructors CameraElement(string, Camera) Initializes a new instance of the CameraElement class with an existing camera. Declaration public CameraElement(string name, Camera camera) Parameters Type Name Description string name The name of the camera element. Camera camera The camera object to associate with this element. CameraElement(string, Vec3, Vec3, float, float, CameraType) Initializes a new instance of the CameraElement class with specified parameters. Declaration public CameraElement(string name, Vec3 location, Vec3 cameraSize, float near, float far, CameraType type) Parameters Type Name Description string name The name of the camera element. Vec3 location The initial location of the camera. Vec3 cameraSize The size of the camera. float near The near clipping plane distance of the camera. float far The far clipping plane distance of the camera. CameraType type The type of the camera (perspective or orthographic). Properties Camera Gets or sets the camera associated with this element. Declaration public Camera Camera { get; set; } Property Value Type Description Camera Location Gets or sets the location of the camera within the game world. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Rotation Gets or sets the rotation of the camera. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Size Gets or sets the size of the camera. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3"
  },
  "api/Genesis.Core.GameElements.Element3D.html": {
    "href": "api/Genesis.Core.GameElements.Element3D.html",
    "title": "Class Element3D | GFX",
    "keywords": "Class Element3D Represents a 3D element in the game world, such as a 3D model with shaders. Inheritance object GameElement Element3D Skybox Inherited Members GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Element3D : GameElement Constructors Element3D(string, string, Vec3, Vec3, Vec3) Initializes a new instance of the Element3D class with specified parameters. Declaration public Element3D(string name, string path, Vec3 location, Vec3 rotation, Vec3 scale) Parameters Type Name Description string name The name of the 3D element. string path The file path to the 3D model. Vec3 location The initial location of the 3D element. Vec3 rotation The initial rotation of the 3D element. Vec3 scale The initial scale of the 3D element. Properties HasTransparancy Gets or sets a value indicating whether the object has transparency. Declaration public bool HasTransparancy { get; set; } Property Value Type Description bool Materials Gets or sets the materials from the model Declaration public List<Material> Materials { get; set; } Property Value Type Description List<Material> Meshes Gets or sets the meshes from the model Declaration public List<Mesh> Meshes { get; set; } Property Value Type Description List<Mesh> Shader Gets or sets the shader program associated with this 3D element. Declaration public ShaderProgram Shader { get; set; } Property Value Type Description ShaderProgram Methods GetMaterialBuffers(Material) Gets the material buffers for a specific material index. Declaration public MaterialBuffer GetMaterialBuffers(Material material) Parameters Type Name Description Material material The material index. Returns Type Description MaterialBuffer A MaterialBuffer containing vertex, normal, and texture coordinate data. GetShape() Gets the shape data of the 3D element. Declaration public float[] GetShape() Returns Type Description float[] An array representing the shape data. Init(Game, IRenderDevice) Called when the game is being initialized. Override to provide custom initialization logic. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Called when the game element is being destroyed. Override to provide custom cleanup logic. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Called when the game is being rendered. Override to provide custom rendering logic. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Called when the game is being updated. Override to provide custom update logic. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnUpdate(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.Empty.html": {
    "href": "api/Genesis.Core.GameElements.Empty.html",
    "title": "Class Empty | GFX",
    "keywords": "Class Empty Represents an empty game element. Inheritance object GameElement Empty Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Empty : GameElement Constructors Empty() Initializes a new instance of the Empty class. Declaration public Empty() Empty(string, Vec3) Initializes a new instance of the Empty class. Declaration public Empty(string name, Vec3 location) Parameters Type Name Description string name The name of the game element Vec3 location The location of the game element"
  },
  "api/Genesis.Core.GameElements.Model.html": {
    "href": "api/Genesis.Core.GameElements.Model.html",
    "title": "Class Model | GFX",
    "keywords": "Class Model Represents a 3D model in the game. Inheritance object GameElement Model Inherited Members GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Model : GameElement Constructors Model(string, Vec3, string) Constructs a new instance of the Model class. Declaration public Model(string name, Vec3 location, string filename) Parameters Type Name Description string name Vec3 location string filename Properties AnimationSpeed Gets or sets the speed of animation playback. Declaration public float AnimationSpeed { get; set; } Property Value Type Description float Animations Gets or sets the list of animations associated with the model. Declaration public List<Animation> Animations { get; set; } Property Value Type Description List<Animation> Animator Gets or sets the animator responsible for controlling animations. Declaration public Animator Animator { get; set; } Property Value Type Description Animator BoneCounter Gets or sets the counter for bones in the model. Declaration public int BoneCounter { get; set; } Property Value Type Description int BoneInfoMap Gets or sets the mapping of bone names to bone information. Declaration public Dictionary<string, boneinfo> BoneInfoMap { get; set; } Property Value Type Description Dictionary<string, boneinfo> FileDirectory Gets or sets the directory of the model file. Declaration public string FileDirectory { get; set; } Property Value Type Description string FileName Gets or sets the name of the model file. Declaration public string FileName { get; set; } Property Value Type Description string Materials Gets or sets the list of materials used by the model. Declaration public List<Material> Materials { get; set; } Property Value Type Description List<Material> Meshes Gets or sets the list of meshes composing the model. Declaration public List<ModelMesh> Meshes { get; set; } Property Value Type Description List<ModelMesh> Shader Gets or sets the shader program used for rendering the model. Declaration public ShaderProgram Shader { get; set; } Property Value Type Description ShaderProgram Methods ExtractAnimations(Scene) Extracts animations from the imported model. Declaration public void ExtractAnimations(Scene scene) Parameters Type Name Description Scene scene ExtractMaterials(Scene) Extracts materials information from the imported model. Declaration public void ExtractMaterials(Scene scene) Parameters Type Name Description Scene scene ExtractMeshes(Scene) Extracts mesh data from the imported model. Declaration public void ExtractMeshes(Scene scene) Parameters Type Name Description Scene scene FindAnimation(string) Finds an animation with the specified name. Declaration public Animation FindAnimation(string name) Parameters Type Name Description string name Returns Type Description Animation Init(Game, IRenderDevice) Initializes the model within the game environment. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Cleans up resources associated with the model when destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the model within the game environment. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Updates the model within the game environment. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.OnUpdate(Game, IRenderDevice) PlayAnimation(string) Plays the specified animation on the model. Declaration public void PlayAnimation(string name) Parameters Type Name Description string name"
  },
  "api/Genesis.Core.GameElements.ParticleBuffers.html": {
    "href": "api/Genesis.Core.GameElements.ParticleBuffers.html",
    "title": "Struct ParticleBuffers | GFX",
    "keywords": "Struct ParticleBuffers Represents the buffers for particle data, including vertices, texture coordinates, colors, positions, rotations, and scales. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public struct ParticleBuffers Fields colors Declaration public float[] colors Field Value Type Description float[] positions Declaration public float[] positions Field Value Type Description float[] rotations Declaration public float[] rotations Field Value Type Description float[] scales Declaration public float[] scales Field Value Type Description float[] texCords Declaration public float[] texCords Field Value Type Description float[] verticies Declaration public float[] verticies Field Value Type Description float[]"
  },
  "api/Genesis.Core.GameElements.ParticleDeffinition.html": {
    "href": "api/Genesis.Core.GameElements.ParticleDeffinition.html",
    "title": "Class ParticleDeffinition | GFX",
    "keywords": "Class ParticleDeffinition Represents the definition of a particle, including location, rotation, size, delay, last update time, speed, rotation speed, and particle color. Inheritance object ParticleDeffinition Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class ParticleDeffinition Constructors ParticleDeffinition() Declaration public ParticleDeffinition() Properties Delay Gets or sets the delay before the particle becomes active. Declaration public int Delay { get; set; } Property Value Type Description int LastUpdate Gets or sets the last update time of the particle. Declaration public long LastUpdate { get; set; } Property Value Type Description long Location Gets or sets the location of the particle. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 ParticleColor Gets or sets the color of the particle. Declaration public Color ParticleColor { get; set; } Property Value Type Description Color Rotation Gets or sets the rotation of the particle. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 RotationSpeed Gets or sets the rotation speed of the particle. Declaration public float RotationSpeed { get; set; } Property Value Type Description float Size Gets or sets the size of the particle. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Speed Gets or sets the speed of the particle. Declaration public float Speed { get; set; } Property Value Type Description float"
  },
  "api/Genesis.Core.GameElements.ParticleEmitter.html": {
    "href": "api/Genesis.Core.GameElements.ParticleEmitter.html",
    "title": "Class ParticleEmitter | GFX",
    "keywords": "Class ParticleEmitter Represents a particle emitter as a game element. Inheritance object GameElement ParticleEmitter Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class ParticleEmitter : GameElement Constructors ParticleEmitter(string, Vec3, Vec3, Vec3, Texture) Initializes a new instance of the ParticleEmitter class with specified parameters. Declaration public ParticleEmitter(string name, Vec3 location, Vec3 rotation, Vec3 size, Texture mask) Parameters Type Name Description string name The name of the particle emitter. Vec3 location The initial location of the particle emitter. Vec3 rotation The initial rotation of the particle emitter. Vec3 size The initial size of the particle emitter. Texture mask Properties ParticleDeffinitions Gets or sets the list of particle definitions managed by the emitter. Declaration public List<ParticleDeffinition> ParticleDeffinitions { get; set; } Property Value Type Description List<ParticleDeffinition> ParticleDirection Gets or sets the primary direction of particle movement. Declaration public Vec3 ParticleDirection { get; set; } Property Value Type Description Vec3 ParticleDirection2 Gets or sets the secondary direction of particle movement. Declaration public Vec3 ParticleDirection2 { get; set; } Property Value Type Description Vec3 ParticleDistance Gets or sets the maximum distance a particle can travel before being reset. Declaration public float ParticleDistance { get; set; } Property Value Type Description float ParticleMask Gets or sets the mask for the particles Declaration public Texture ParticleMask { get; set; } Property Value Type Description Texture Texture Gets or sets the texture used for the particles. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods CreateParticles(int, Vec3) Generates particles with default settings, using the provided particle size. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. CreateParticles(int, Vec3, Vec3, Vec3, Vec3, int, int, float, float, float, float, Color, Color) Declaration public void CreateParticles(int numPartikel, Vec3 particleSizeMax, Vec3 particleSizeMin, Vec3 minRotation, Vec3 maxRotation, int minDelay, int maxDelay, float minSpeed, float maxSpeed, float minRotationSpeed, float maxRotationSpeed, Color colorA, Color colorB) Parameters Type Name Description int numPartikel Vec3 particleSizeMax Vec3 particleSizeMin Vec3 minRotation Vec3 maxRotation int minDelay int maxDelay float minSpeed float maxSpeed float minRotationSpeed float maxRotationSpeed Color colorA Color colorB CreateParticles(int, Vec3, Vec3, Vec3, int, int, float, float, float, float, Color, Color) Generates particles with custom settings, including particle size, rotation, delay, speed, and rotation speed. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize, Vec3 minRotation, Vec3 maxRotation, int minDelay, int maxDelay, float minSpeed, float maxSpeed, float minRotationSpeed, float maxRotationSpeed, Color colorA, Color colorB) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. Vec3 minRotation The minimum rotation of particles. Vec3 maxRotation The maximum rotation of particles. int minDelay The minimum delay before particles become active. int maxDelay The maximum delay before particles become active. float minSpeed The minimum speed of particles. float maxSpeed The maximum speed of particles. float minRotationSpeed The minimum rotation speed of particles. float maxRotationSpeed The maximum rotation speed of particles. Color colorA The minimum color of particles. Color colorB The maximum color of particles. CreateParticles(int, Vec3, Color, Color) Generates particles with default settings, using the provided particle size and specified colors. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize, Color colorA, Color colorB) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. Color colorA The minimum color of particles. Color colorB The maximum color of particles. GetParticleBuffers() Generates the buffer for the particles, including vertices, colors, texture coordinates, positions, rotations, and scales. Declaration public ParticleBuffers GetParticleBuffers() Returns Type Description ParticleBuffers Particle buffers containing vertices, colors, texture coordinates, positions, rotations, and scales. OnDestroy(Game) Called when the particle emitter is being destroyed in the game. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the particle emitter using the specified render device. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) ProcessParticle(ParticleDeffinition, long) Processes the movement and rotation of a particle based on its current state. Declaration public void ProcessParticle(ParticleDeffinition particle, long now) Parameters Type Name Description ParticleDeffinition particle The particle definition to be processed. long now The current time in milliseconds."
  },
  "api/Genesis.Core.GameElements.Qube.html": {
    "href": "api/Genesis.Core.GameElements.Qube.html",
    "title": "Class Qube | GFX",
    "keywords": "Class Qube Represents a cube-shaped game element with customizable appearance. Inheritance object GameElement Qube Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Qube : GameElement Constructors Qube(string, Vec3) Initializes a new instance of the cube class with default settings. Declaration public Qube(string name, Vec3 location) Parameters Type Name Description string name The name of the cube. Vec3 location The initial location of the cube. Qube(string, Vec3, Vec3) Initializes a new instance of the cube class with specified size. Declaration public Qube(string Name, Vec3 location, Vec3 size) Parameters Type Name Description string Name Vec3 location The initial location of the cube. Vec3 size The size of the cube. Qube(string, Vec3, Vec3, Vec3) Initializes a new instance of the cube class with specified size and rotation. Declaration public Qube(string name, Vec3 location, Vec3 size, Vec3 rotation) Parameters Type Name Description string name The name of the cube. Vec3 location The initial location of the cube. Vec3 size The size of the cube. Vec3 rotation The initial rotation of the cube. Properties Color Gets or sets the color of the cube. Declaration public Color Color { get; set; } Property Value Type Description Color Material Gets or sets the material for this cube Declaration public Material Material { get; set; } Property Value Type Description Material Shader Gets or sets the shader program associated with this cube. Declaration public ShaderProgram Shader { get; set; } Property Value Type Description ShaderProgram Shape Gets or sets the cube shape definition. Declaration public QubeShape Shape { get; set; } Property Value Type Description QubeShape Methods GetColors(Color) Gets an array of color values based on the specified color. Declaration public static float[] GetColors(Color color) Parameters Type Name Description Color color The color for the cube faces. Returns Type Description float[] An array of color values for the cube faces. Init(Game, IRenderDevice) Initializes the game element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Called when the game element is disposed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the game element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.RectElement.html": {
    "href": "api/Genesis.Core.GameElements.RectElement.html",
    "title": "Class RectElement | GFX",
    "keywords": "Class RectElement Simple rectangle element Inheritance object GameElement RectElement Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class RectElement : GameElement Constructors RectElement(string, Vec3, Vec3) Creates a new rectangle Declaration public RectElement(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name The name of the rectangle. Vec3 location The location of the rectangle. Vec3 size The size of the rectangle. Properties BorderColor Gets or sets the color of the rectangle border. Declaration public Color BorderColor { get; set; } Property Value Type Description Color BorderWidth Gets or sets the width of the rectangle border. Declaration public float BorderWidth { get; set; } Property Value Type Description float Fill Gets or sets the fill color of the rectangle. Declaration public Color Fill { get; set; } Property Value Type Description Color HasBorder Gets or sets a value indicating whether the rectangle has a border. Declaration public bool HasBorder { get; set; } Property Value Type Description bool HasFill Gets or sets a value indicating whether the rectangle has fill color. Declaration public bool HasFill { get; set; } Property Value Type Description bool Methods OnRender(Game, IRenderDevice) Renders the rectangle Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.Skybox.html": {
    "href": "api/Genesis.Core.GameElements.Skybox.html",
    "title": "Class Skybox | GFX",
    "keywords": "Class Skybox Represents a skybox element in a 3D environment. Inheritance object GameElement Element3D Skybox Inherited Members Element3D.Init(Game, IRenderDevice) Element3D.OnRender(Game, IRenderDevice) Element3D.OnDestroy(Game) Element3D.GetShape() Element3D.GetMaterialBuffers(Material) Element3D.Shader Element3D.Meshes Element3D.Materials Element3D.HasTransparancy GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Skybox : Element3D Constructors Skybox(string, string, Vec3, Vec3, Vec3) Initializes a new instance of the Skybox class with specified name, texture path, location, rotation, and scale. Declaration public Skybox(string name, string path, Vec3 location, Vec3 rotation, Vec3 scale) Parameters Type Name Description string name The name of the skybox. string path The path to the texture for the skybox. Vec3 location The initial location of the skybox. Vec3 rotation The initial rotation of the skybox. Vec3 scale The initial scale of the skybox. Methods OnUpdate(Game, IRenderDevice) Updates the skybox position based on the selected scene's camera location. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides Element3D.OnUpdate(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.Sprite.html": {
    "href": "api/Genesis.Core.GameElements.Sprite.html",
    "title": "Class Sprite | GFX",
    "keywords": "Class Sprite Represents a sprite element in a 2D or 3D environment. Inheritance object GameElement Sprite Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Sprite : GameElement Constructors Sprite(string, Vec3, Vec3, Texture) Initializes a new instance of the Sprite class with specified name, location, size, and texture. Declaration public Sprite(string name, Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description string name The name of the sprite. Vec3 location The initial location of the sprite. Vec3 size The size of the sprite. Texture texture The texture for the sprite. Properties Color Gets or sets the color of the sprite. Declaration public Color Color { get; set; } Property Value Type Description Color OcclusionCulling Gets or sets a value indicating whether occlusion culling is enabled for the sprite. Declaration public bool OcclusionCulling { get; set; } Property Value Type Description bool TexCoords Gets or sets the texture coordinates of the sprite. Declaration public TexCoords TexCoords { get; set; } Property Value Type Description TexCoords Texture Gets or sets the texture of the sprite. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods CalculateVerticies() Calculates the vertex coordinates of the sprite. Declaration public float[] CalculateVerticies() Returns Type Description float[] An array containing the vertex coordinates of the sprite. GetBounds2D() Gets the 2D bounds of the sprite. Declaration public Rect GetBounds2D() Returns Type Description Rect A rectangular region representing the 2D bounds of the sprite. GetCenterLocation() Gets the center location of the sprite. Declaration public Vec3 GetCenterLocation() Returns Type Description Vec3 The center location of the sprite. Init(Game, IRenderDevice) Initializes the sprite element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Handles cleanup and resource disposal when the sprite is destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the sprite element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.SpriteShapeDeffinition.html": {
    "href": "api/Genesis.Core.GameElements.SpriteShapeDeffinition.html",
    "title": "Struct SpriteShapeDeffinition | GFX",
    "keywords": "Struct SpriteShapeDeffinition Represents the definition of the shape for a sprite, including its location and size. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public struct SpriteShapeDeffinition Constructors SpriteShapeDeffinition(Vec3, Vec3) Declaration public SpriteShapeDeffinition(Vec3 loc, Vec3 size) Parameters Type Name Description Vec3 loc Vec3 size Fields locX Declaration public float locX Field Value Type Description float locY Declaration public float locY Field Value Type Description float sizeX Declaration public float sizeX Field Value Type Description float sizeY Declaration public float sizeY Field Value Type Description float"
  },
  "api/Genesis.Core.GameElements.Terrain2D.html": {
    "href": "api/Genesis.Core.GameElements.Terrain2D.html",
    "title": "Class Terrain2D | GFX",
    "keywords": "Class Terrain2D Represents a 2D terrain element. Inheritance object GameElement Terrain2D Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Terrain2D : GameElement Constructors Terrain2D(string, Vec3, float, float, float, Texture) Initializes a new instance of the Terrain2D class with specified name, location, cell counts, cell size, and texture. Declaration public Terrain2D(string name, Vec3 location, float cellsX, float cellsY, float cellSize, Texture texture) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. float cellsX The number of cells in the X direction. float cellsY The number of cells in the Y direction. float cellSize The size of each cell. Texture texture The texture for the terrain. Properties CellSize Gets or sets the size of each cell. Declaration public float CellSize { get; set; } Property Value Type Description float CellsX Gets or sets the number of cells in the X direction. Declaration public float CellsX { get; set; } Property Value Type Description float CellsY Gets or sets the number of cells in the Y direction. Declaration public float CellsY { get; set; } Property Value Type Description float Texture Gets or sets the texture of the terrain. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods GetBounds() Gets the 2D bounds of the terrain. Declaration public Rect GetBounds() Returns Type Description Rect A rectangular region representing the 2D bounds of the terrain. Init(Game, IRenderDevice) Initializes the terrain element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Handles cleanup and resource disposal when the terrain is destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the terrain element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.Terrain3D.html": {
    "href": "api/Genesis.Core.GameElements.Terrain3D.html",
    "title": "Class Terrain3D | GFX",
    "keywords": "Class Terrain3D Represents a 3D terrain element. Inheritance object GameElement Terrain3D Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Terrain3D : GameElement Constructors Terrain3D(string, Vec3) Initializes a new instance of the Terrain3D class with default values. Declaration public Terrain3D(string name, Vec3 location) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. Terrain3D(string, Vec3, int, int, int, int) Initializes a new instance of the Terrain3D class with specified name, location, cell counts, and cell dimensions. Declaration public Terrain3D(string name, Vec3 location, int cellsX, int cellsZ, int cellWidth, int cellHeight) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. int cellsX The number of cells in the X direction. int cellsZ The number of cells in the Z direction. int cellWidth The width of each cell. int cellHeight The height of each cell. Terrain3D(string, Vec3, float, Bitmap) Initializes a new instance of the Terrain3D class with specified name, location, height value, and heightmap. Declaration public Terrain3D(string name, Vec3 location, float heightValue, Bitmap heightmap) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. float heightValue The height value of the terrain. Bitmap heightmap The heightmap for generating the terrain. Properties AltColor Gets or sets the alternate color of the terrain. Declaration public Color AltColor { get; set; } Property Value Type Description Color Color Gets or sets the color of the terrain. Declaration public Color Color { get; set; } Property Value Type Description Color TerrainData Gets or sets the terrain data. Declaration public TerrainData TerrainData { get; set; } Property Value Type Description TerrainData Methods CreateTerrainTileColor(Color) Creates color data for a terrain tile. Declaration public static float[] CreateTerrainTileColor(Color color) Parameters Type Name Description Color color Returns Type Description float[] GenerateTerrain(Bitmap, float, float) Generates terrain data from a heightmap. Declaration public static TerrainData GenerateTerrain(Bitmap heightmap, float heightScale, float cellSize) Parameters Type Name Description Bitmap heightmap float heightScale float cellSize Returns Type Description TerrainData GenerateTerrainData(int, int, int, int, Color, Color) Generates terrain data based on specified parameters. Declaration public static TerrainData GenerateTerrainData(int cellsX, int cellsZ, int cellWidth, int cellHeight, Color colorA, Color colorB) Parameters Type Name Description int cellsX int cellsZ int cellWidth int cellHeight Color colorA Color colorB Returns Type Description TerrainData GenerateTerrainTile(float, float, int, int) Generates a tile for the terrain grid. Declaration public static float[] GenerateTerrainTile(float x, float z, int cellWidth, int cellHeight) Parameters Type Name Description float x float z int cellWidth int cellHeight Returns Type Description float[] Init(Game, IRenderDevice) Initializes the terrain element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.Init(Game, IRenderDevice) OnRender(Game, IRenderDevice) Renders the terrain element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "api/Genesis.Core.GameElements.TerrainData.html": {
    "href": "api/Genesis.Core.GameElements.TerrainData.html",
    "title": "Struct TerrainData | GFX",
    "keywords": "Struct TerrainData Represents a 3D terrain element. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public struct TerrainData Fields cellHeight Declaration public int cellHeight Field Value Type Description int cellWidth Declaration public int cellWidth Field Value Type Description int cellsX Declaration public int cellsX Field Value Type Description int cellsZ Declaration public int cellsZ Field Value Type Description int colors Declaration public float[] colors Field Value Type Description float[] tris Declaration public int tris Field Value Type Description int verticies Declaration public float[] verticies Field Value Type Description float[]"
  },
  "api/Genesis.Core.GameElements.html": {
    "href": "api/Genesis.Core.GameElements.html",
    "title": "Namespace Genesis.Core.GameElements | GFX",
    "keywords": "Namespace Genesis.Core.GameElements Classes BufferedSprite Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates. CameraElement Represents a game element that serves as a camera within the game world. Element3D Represents a 3D element in the game world, such as a 3D model with shaders. Empty Represents an empty game element. Model Represents a 3D model in the game. ParticleDeffinition Represents the definition of a particle, including location, rotation, size, delay, last update time, speed, rotation speed, and particle color. ParticleEmitter Represents a particle emitter as a game element. Qube Represents a cube-shaped game element with customizable appearance. RectElement Simple rectangle element Skybox Represents a skybox element in a 3D environment. Sprite Represents a sprite element in a 2D or 3D environment. Terrain2D Represents a 2D terrain element. Terrain3D Represents a 3D terrain element. Structs ParticleBuffers Represents the buffers for particle data, including vertices, texture coordinates, colors, positions, rotations, and scales. SpriteShapeDeffinition Represents the definition of the shape for a sprite, including its location and size. TerrainData Represents a 3D terrain element."
  },
  "api/Genesis.Core.GameElments.ParticleBuffers.html": {
    "href": "api/Genesis.Core.GameElments.ParticleBuffers.html",
    "title": "Struct ParticleBuffers | GFX",
    "keywords": "Struct ParticleBuffers Represents the buffers for particle data, including vertices, texture coordinates, colors, positions, rotations, and scales. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Core.GameElments Assembly: Genesis.dll Syntax public struct ParticleBuffers Fields colors Declaration public float[] colors Field Value Type Description float[] positions Declaration public float[] positions Field Value Type Description float[] rotations Declaration public float[] rotations Field Value Type Description float[] scales Declaration public float[] scales Field Value Type Description float[] texCords Declaration public float[] texCords Field Value Type Description float[] verticies Declaration public float[] verticies Field Value Type Description float[]"
  },
  "api/Genesis.Core.GameElments.ParticleDeffinition.html": {
    "href": "api/Genesis.Core.GameElments.ParticleDeffinition.html",
    "title": "Class ParticleDeffinition | GFX",
    "keywords": "Class ParticleDeffinition Represents the definition of a particle, including location, rotation, size, delay, last update time, speed, rotation speed, and particle color. Inheritance object ParticleDeffinition Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElments Assembly: Genesis.dll Syntax public class ParticleDeffinition Constructors ParticleDeffinition() Declaration public ParticleDeffinition() Properties Delay Gets or sets the delay before the particle becomes active. Declaration public int Delay { get; set; } Property Value Type Description int LastUpdate Gets or sets the last update time of the particle. Declaration public long LastUpdate { get; set; } Property Value Type Description long Location Gets or sets the location of the particle. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 ParticleColor Gets or sets the color of the particle. Declaration public Color ParticleColor { get; set; } Property Value Type Description Color Rotation Gets or sets the rotation of the particle. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 RotationSpeed Gets or sets the rotation speed of the particle. Declaration public float RotationSpeed { get; set; } Property Value Type Description float Size Gets or sets the size of the particle. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Speed Gets or sets the speed of the particle. Declaration public float Speed { get; set; } Property Value Type Description float"
  },
  "api/Genesis.Core.GameElments.ParticleEmitter.html": {
    "href": "api/Genesis.Core.GameElments.ParticleEmitter.html",
    "title": "Class ParticleEmitter | GFX",
    "keywords": "Class ParticleEmitter Represents a particle emitter as a game element. Inheritance object GameElement ParticleEmitter Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElments Assembly: Genesis.dll Syntax public class ParticleEmitter : GameElement Constructors ParticleEmitter(string, Vec3, Vec3, Vec3, Texture) Initializes a new instance of the ParticleEmitter class with specified parameters. Declaration public ParticleEmitter(string name, Vec3 location, Vec3 rotation, Vec3 size, Texture mask) Parameters Type Name Description string name The name of the particle emitter. Vec3 location The initial location of the particle emitter. Vec3 rotation The initial rotation of the particle emitter. Vec3 size The initial size of the particle emitter. Texture mask Properties ParticleDeffinitions Gets or sets the list of particle definitions managed by the emitter. Declaration public List<ParticleDeffinition> ParticleDeffinitions { get; set; } Property Value Type Description List<ParticleDeffinition> ParticleDirection Gets or sets the primary direction of particle movement. Declaration public Vec3 ParticleDirection { get; set; } Property Value Type Description Vec3 ParticleDirection2 Gets or sets the secondary direction of particle movement. Declaration public Vec3 ParticleDirection2 { get; set; } Property Value Type Description Vec3 ParticleDistance Gets or sets the maximum distance a particle can travel before being reset. Declaration public float ParticleDistance { get; set; } Property Value Type Description float ParticleMask Gets or sets the mask for the particles Declaration public Texture ParticleMask { get; set; } Property Value Type Description Texture Texture Gets or sets the texture used for the particles. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods CreateParticles(int, Vec3) Generates particles with default settings, using the provided particle size. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. CreateParticles(int, Vec3, Vec3, Vec3, Vec3, int, int, float, float, float, float, Color, Color) Declaration public void CreateParticles(int numPartikel, Vec3 particleSizeMax, Vec3 particleSizeMin, Vec3 minRotation, Vec3 maxRotation, int minDelay, int maxDelay, float minSpeed, float maxSpeed, float minRotationSpeed, float maxRotationSpeed, Color colorA, Color colorB) Parameters Type Name Description int numPartikel Vec3 particleSizeMax Vec3 particleSizeMin Vec3 minRotation Vec3 maxRotation int minDelay int maxDelay float minSpeed float maxSpeed float minRotationSpeed float maxRotationSpeed Color colorA Color colorB CreateParticles(int, Vec3, Vec3, Vec3, int, int, float, float, float, float, Color, Color) Generates particles with custom settings, including particle size, rotation, delay, speed, and rotation speed. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize, Vec3 minRotation, Vec3 maxRotation, int minDelay, int maxDelay, float minSpeed, float maxSpeed, float minRotationSpeed, float maxRotationSpeed, Color colorA, Color colorB) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. Vec3 minRotation The minimum rotation of particles. Vec3 maxRotation The maximum rotation of particles. int minDelay The minimum delay before particles become active. int maxDelay The maximum delay before particles become active. float minSpeed The minimum speed of particles. float maxSpeed The maximum speed of particles. float minRotationSpeed The minimum rotation speed of particles. float maxRotationSpeed The maximum rotation speed of particles. Color colorA The minimum color of particles. Color colorB The maximum color of particles. CreateParticles(int, Vec3, Color, Color) Generates particles with default settings, using the provided particle size and specified colors. Declaration public void CreateParticles(int numPartikel, Vec3 particleSize, Color colorA, Color colorB) Parameters Type Name Description int numPartikel The number of particles to create. Vec3 particleSize The size of each particle. Color colorA The minimum color of particles. Color colorB The maximum color of particles. GetParticleBuffers() Generates the buffer for the particles, including vertices, colors, texture coordinates, positions, rotations, and scales. Declaration public ParticleBuffers GetParticleBuffers() Returns Type Description ParticleBuffers Particle buffers containing vertices, colors, texture coordinates, positions, rotations, and scales. OnDestroy(Game) Called when the particle emitter is being destroyed in the game. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the particle emitter using the specified render device. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) ProcessParticle(ParticleDeffinition, long) Processes the movement and rotation of a particle based on its current state. Declaration public void ProcessParticle(ParticleDeffinition particle, long now) Parameters Type Name Description ParticleDeffinition particle The particle definition to be processed. long now The current time in milliseconds."
  },
  "api/Genesis.Core.GameElments.html": {
    "href": "api/Genesis.Core.GameElments.html",
    "title": "Namespace Genesis.Core.GameElments | GFX",
    "keywords": "Namespace Genesis.Core.GameElments Classes ParticleDeffinition Represents the definition of a particle, including location, rotation, size, delay, last update time, speed, rotation speed, and particle color. ParticleEmitter Represents a particle emitter as a game element. Structs ParticleBuffers Represents the buffers for particle data, including vertices, texture coordinates, colors, positions, rotations, and scales."
  },
  "api/Genesis.Core.GameEventHandler.html": {
    "href": "api/Genesis.Core.GameEventHandler.html",
    "title": "Delegate GameEventHandler | GFX",
    "keywords": "Delegate GameEventHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void GameEventHandler(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Constructors GameEventHandler(object, IntPtr) Declaration public GameEventHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, IRenderDevice, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, IRenderDevice renderDevice, AsyncCallback callback, object @object) Parameters Type Name Description Game game IRenderDevice renderDevice AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, IRenderDevice) Declaration public virtual void Invoke(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice"
  },
  "api/Genesis.Core.GenesisWindow.html": {
    "href": "api/Genesis.Core.GenesisWindow.html",
    "title": "Class GenesisWindow | GFX",
    "keywords": "Class GenesisWindow Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GenesisWindow Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.Dispose(bool) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class GenesisWindow : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors GenesisWindow() Declaration public GenesisWindow() Properties Game Declaration public Game Game { get; set; } Property Value Type Description Game Methods Init(Game) Declaration public virtual void Init(Game game) Parameters Type Name Description Game game OnResize(EventArgs) Declaration protected override void OnResize(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnResize(EventArgs) Start(Game) Declaration public virtual void Start(Game game) Parameters Type Name Description Game game Update(Game) Declaration public virtual void Update(Game game) Parameters Type Name Description Game game Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "api/Genesis.Core.IGameBehavior.html": {
    "href": "api/Genesis.Core.IGameBehavior.html",
    "title": "Class IGameBehavior | GFX",
    "keywords": "Class IGameBehavior Represents the base class for game behaviors in the Genesis framework. Inheritance object IGameBehavior AnimationBehavior CharacterController2D SpriteMovementController ThirdpersonCharacterController PhysicsBehavior Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public abstract class IGameBehavior Constructors IGameBehavior() Declaration protected IGameBehavior() Properties Parent Gets or sets the parent game element to which this behavior is attached. Declaration public GameElement Parent { get; set; } Property Value Type Description GameElement Methods OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public abstract void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public abstract void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public abstract void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public abstract void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element."
  },
  "api/Genesis.Core.Input.html": {
    "href": "api/Genesis.Core.Input.html",
    "title": "Class Input | GFX",
    "keywords": "Class Input Provides utility methods for handling user input in the Genesis framework. Inheritance object Input Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Input Constructors Input() Declaration public Input() Methods GetAsyncKeyState(int) Gets the state of the specified key. Declaration public static extern short GetAsyncKeyState(int vKey) Parameters Type Name Description int vKey The virtual key code to check. Returns Type Description short True if the key is down; otherwise, false. GetAsyncKeyState(Keys) Gets the state of the specified key. Declaration public static extern short GetAsyncKeyState(Keys vKey) Parameters Type Name Description Keys vKey The virtual key code to check. Returns Type Description short True if the key is down; otherwise, false. GetMousePos() Gets the current mouse position. Declaration public static Vec3 GetMousePos() Returns Type Description Vec3 A Vec3 representing the current mouse position. GetRefMousePos(Game) Gets the mouse position relative to the control associated with the specified game instance. Declaration public static Vec3 GetRefMousePos(Game game) Parameters Type Name Description Game game The game instance. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. GetRefMousePos(IntPtr) Gets the mouse position relative to the control associated with the specified handle. Declaration public static Vec3 GetRefMousePos(IntPtr handle) Parameters Type Name Description IntPtr handle The handle of the control. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. GetRefMousePos(Control) Gets the mouse position relative to the specified control. Declaration public static Vec3 GetRefMousePos(Control control) Parameters Type Name Description Control control The control relative to which the mouse position is obtained. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. HideCursor() Hides the cursor. Declaration public static void HideCursor() IsKeyDown(Keys) Checks if the specified key is currently pressed. Declaration public static bool IsKeyDown(Keys vKey) Parameters Type Name Description Keys vKey The virtual key to check. Returns Type Description bool True if the key is down; otherwise, false. SetCursorPos(Vec3, IntPtr) Sets the cursor position on the screen. Declaration public static void SetCursorPos(Vec3 pos, IntPtr handle) Parameters Type Name Description Vec3 pos The new position of the cursor. IntPtr handle The handle of the control where the cursor position will be set. SetCursorPos(int, int) Sets the cursor position on the screen. Declaration public static extern bool SetCursorPos(int X, int Y) Parameters Type Name Description int X The new x-coordinate of the cursor position. int Y The new y-coordinate of the cursor position. Returns Type Description bool SetCursorPos(int, int, IntPtr) Sets the cursor position on the screen. Declaration public static void SetCursorPos(int x, int y, IntPtr handle) Parameters Type Name Description int x int y IntPtr handle The handle of the control where the cursor position will be set. ShowCursor() Shows the cursor. Declaration public static void ShowCursor()"
  },
  "api/Genesis.Core.Layer.html": {
    "href": "api/Genesis.Core.Layer.html",
    "title": "Class Layer | GFX",
    "keywords": "Class Layer Represents a layer containing game elements in the Genesis framework. Inheritance object Layer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Layer Constructors Layer() Creates a new instance of the Layer class. Declaration public Layer() Layer(string) Creates a new instance of the Layer class with the specified name. Declaration public Layer(string name) Parameters Type Name Description string name The name of the layer. Layer(string, bool) Creates a new instance of the Layer class with the specified name and updateElements flag. Declaration public Layer(string name, bool updateElements) Parameters Type Name Description string name The name of the layer. bool updateElements Flag indicating whether the elements within the layer should be updated. Properties Elements Gets or sets the list of game elements within the layer. Declaration public List<GameElement> Elements { get; set; } Property Value Type Description List<GameElement> Name Gets or sets the name of the layer. Declaration public string Name { get; set; } Property Value Type Description string UpdateElements Gets or sets a value indicating whether the elements within the layer should be updated. Declaration public bool UpdateElements { get; set; } Property Value Type Description bool Methods Init(Game, IRenderDevice) Initializes all game elements within the layer. Declaration public void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnDestroy(Game) Destroys all game elements within the layer. Declaration public void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. OnRender(Game, IRenderDevice) Renders all game elements within the layer. Declaration public void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnUpdate(Game, IRenderDevice) Updates all game elements within the layer if the UpdateElements flag is true. Declaration public void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device."
  },
  "api/Genesis.Core.Light.html": {
    "href": "api/Genesis.Core.Light.html",
    "title": "Class Light | GFX",
    "keywords": "Class Light Represents a light source in the Genesis framework. Inheritance object GameElement Light Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Light : GameElement Constructors Light(string, Vec3) Creates a new instance of the Light class with the specified name and location. Declaration public Light(string name, Vec3 location) Parameters Type Name Description string name The name of the light. Vec3 location The 3D location of the light. Light(string, Vec3, float) Creates a new instance of the Light class with the specified name, location and intensity. Declaration public Light(string name, Vec3 location, float intensity) Parameters Type Name Description string name The name of the light. Vec3 location The 3D location of the light. float intensity The intensity of the light. Properties Intensity Gets or sets the intensity of the light. Declaration public float Intensity { get; set; } Property Value Type Description float LightColor Gets or sets the color of the light. Declaration public Color LightColor { get; set; } Property Value Type Description Color Methods GetLightColor() Returns the light color in RGB values normalized between 0 and 1. Declaration public Vec3 GetLightColor() Returns Type Description Vec3 A Vec3 representing the normalized RGB values of the light color. GetLightDirection(Camera) Returns the direction vector from the light to the camera. Declaration public Vec3 GetLightDirection(Camera camera) Parameters Type Name Description Camera camera The camera to which the direction is calculated. Returns Type Description Vec3 The normalized vector representing the light direction."
  },
  "api/Genesis.Core.Light2D.html": {
    "href": "api/Genesis.Core.Light2D.html",
    "title": "Class Light2D | GFX",
    "keywords": "Class Light2D Represents a 2D light element in the game. Inheritance object GameElement Light2D Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Light2D : GameElement Constructors Light2D(Vec3, Vec3) Initializes a new instance of the Light2D class with the specified location and size. Declaration public Light2D(Vec3 location, Vec3 size) Parameters Type Name Description Vec3 location The location of the light. Vec3 size The size of the light. Light2D(string, Vec3, Vec3, Texture) Initializes a new instance of the Light2D class with the specified name, location, size, and texture. Declaration public Light2D(string name, Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description string name The name of the light. Vec3 location The location of the light. Vec3 size The size of the light. Texture texture The texture of the light. Properties LightColor Gets or sets the color of the light. Declaration public Color LightColor { get; set; } Property Value Type Description Color LightShape Gets or sets the shape of the light. Declaration public Texture LightShape { get; set; } Property Value Type Description Texture Methods GetColor() Gets the color of the light. Declaration public Vec3 GetColor() Returns Type Description Vec3 The color of the light as a vector. GetTexCoords() Gets the texture coordinates for the light shape. Declaration public static float[] GetTexCoords() Returns Type Description float[] An array of texture coordinates corresponding to the light shape. GetVericies() Gets the vertices for the light shape. Declaration public static float[] GetVericies() Returns Type Description float[] An array of vertices defining the shape of the light. Init(Game, IRenderDevice) Initializes the light element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Destroys the light element. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the light element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Overrides GameElement.OnRender(Game, IRenderDevice) TestLight2D() Tests the Light2D functionality. Declaration public void TestLight2D()"
  },
  "api/Genesis.Core.Scene.html": {
    "href": "api/Genesis.Core.Scene.html",
    "title": "Class Scene | GFX",
    "keywords": "Class Scene Represents a game scene in the Genesis framework. Inheritance object Scene Scene2D Scene3D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Scene Constructors Scene() Creates a new game scene. Declaration public Scene() Scene(string) Creates a new game scene with the specified name. Declaration public Scene(string name) Parameters Type Name Description string name Properties AfterCanvasRender Event handler triggered after UI canvas rendering. Declaration public SceneEventHandler AfterCanvasRender { get; set; } Property Value Type Description SceneEventHandler AfterSceneRender Event handler triggered after scene rendering. Declaration public SceneEventHandler AfterSceneRender { get; set; } Property Value Type Description SceneEventHandler BackgroundTexture Set or gets the background texture for the scene Declaration public Texture BackgroundTexture { get; set; } Property Value Type Description Texture BeforeCanvasPreperation Event handler triggered before UI canvas preparation. Declaration public SceneEventHandler BeforeCanvasPreperation { get; set; } Property Value Type Description SceneEventHandler BeforeCanvasRender Event handler triggered before UI canvas rendering. Declaration public SceneEventHandler BeforeCanvasRender { get; set; } Property Value Type Description SceneEventHandler BeforeScenePreperation Event handler triggered before scene preparation. Declaration public SceneEventHandler BeforeScenePreperation { get; set; } Property Value Type Description SceneEventHandler BeforeSceneRender Event handler triggered before scene rendering. Declaration public SceneEventHandler BeforeSceneRender { get; set; } Property Value Type Description SceneEventHandler Camera Gets or sets the camera used for rendering the scene. Declaration public Camera Camera { get; set; } Property Value Type Description Camera Canvas Gets or sets the list of UI canvases within the scene. Declaration public List<Canvas> Canvas { get; set; } Property Value Type Description List<Canvas> Layer Gets or sets the list of layers within the scene. Declaration public List<Layer> Layer { get; set; } Property Value Type Description List<Layer> Name Gets or sets the name of the scene. Declaration public string Name { get; set; } Property Value Type Description string OnSceneResize Event handler triggered when the scene is resized. Declaration public SceneSizeEvenHandler OnSceneResize { get; set; } Property Value Type Description SceneSizeEvenHandler PhysicHandler Gets or sets the physics handler for the scene. Declaration public PhysicHandler PhysicHandler { get; set; } Property Value Type Description PhysicHandler Methods AddCanvas(Canvas) Adds a new ui canvas to the scene Declaration public Canvas AddCanvas(Canvas canvas) Parameters Type Name Description Canvas canvas Returns Type Description Canvas AddGameElement(string, GameElement) Adds a GameElement in the scene. It will be placed in the given layer Declaration public void AddGameElement(string layerName, GameElement gameElement) Parameters Type Name Description string layerName GameElement gameElement AddGameElements(string, List<GameElement>) Adds GameElements into the scene. The elements will be placed in the given layer Declaration public void AddGameElements(string layer, List<GameElement> gameElements) Parameters Type Name Description string layer List<GameElement> gameElements AddLayer(Layer) Adds a layer to the scene Declaration public void AddLayer(Layer layer) Parameters Type Name Description Layer layer AddLayer(string) Adds a layer to the scene Declaration public void AddLayer(string layerName) Parameters Type Name Description string layerName GetCanvas(string) Gets the canvas with the given name Declaration public Canvas GetCanvas(string name) Parameters Type Name Description string name Returns Type Description Canvas GetElement(string) Gets the element with the given name. This function searchs in every layer until it finds a element with an equal name. Declaration public GameElement GetElement(string name) Parameters Type Name Description string name Returns Type Description GameElement GetElement(string, string) Gets the element with the given name out of the given layer. Declaration public GameElement GetElement(string layerName, string name) Parameters Type Name Description string layerName string name Returns Type Description GameElement GetElements(string) Gets the elements from the given layer Declaration public List<GameElement> GetElements(string layername) Parameters Type Name Description string layername Returns Type Description List<GameElement> GetElements(string[]) Gets the elements from the given layers Declaration public List<GameElement> GetElements(string[] layer) Parameters Type Name Description string[] layer Returns Type Description List<GameElement> GetLayer(string) Gets the layer with the given name Declaration public Layer GetLayer(string layername) Parameters Type Name Description string layername Returns Type Description Layer GetWidget(string, string) Gets a entity with the given name from the canvas Declaration public Widget GetWidget(string canvasName, string entityName) Parameters Type Name Description string canvasName string entityName Returns Type Description Widget ImportScene2D(string, AssetManager) Loads the given scene file into this scene Declaration public void ImportScene2D(string filename, AssetManager assetManager) Parameters Type Name Description string filename The file name AssetManager assetManager The asset manager Init(Game, IRenderDevice) Initial the scene Declaration public virtual void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice OnDestroy(Game) Destroys the scene data Declaration public virtual void OnDestroy(Game game) Parameters Type Name Description Game game OnRender(Game, IRenderDevice) Renders the scene Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice OnUpdate(Game, IRenderDevice) Update the scene and the elements. Called every frame Declaration public virtual void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice RemoveCanvas(Canvas) Removes the ui canvas from the scene Declaration public void RemoveCanvas(Canvas canvas) Parameters Type Name Description Canvas canvas RemoveCanvas(string) Removes the ui canvas with the given name from the scene Declaration public void RemoveCanvas(string canvasName) Parameters Type Name Description string canvasName RemoveElement(GameElement) Removes a element from the scene. This function will look in all layer for the element. Declaration public void RemoveElement(GameElement element) Parameters Type Name Description GameElement element RemoveElement(string, GameElement) Removes a element from the given layer Declaration public void RemoveElement(string layerName, GameElement element) Parameters Type Name Description string layerName GameElement element RemoveLayer(Layer) Removes a layer from the scene Declaration public void RemoveLayer(Layer layer) Parameters Type Name Description Layer layer ResizeScene(Viewport) Resizes the scene by invoking the event handler for scene resize. Declaration public virtual void ResizeScene(Viewport viewport) Parameters Type Name Description Viewport viewport The viewport containing information about the new dimensions."
  },
  "api/Genesis.Core.Scene2D.html": {
    "href": "api/Genesis.Core.Scene2D.html",
    "title": "Class Scene2D | GFX",
    "keywords": "Class Scene2D Represents a 2D scene in the game. Inheritance object Scene Scene2D Inherited Members Scene.AddLayer(Layer) Scene.AddLayer(string) Scene.AddCanvas(Canvas) Scene.RemoveLayer(Layer) Scene.GetLayer(string) Scene.AddGameElement(string, GameElement) Scene.AddGameElements(string, List<GameElement>) Scene.GetElements(string) Scene.GetElements(string[]) Scene.GetElement(string) Scene.GetElement(string, string) Scene.GetCanvas(string) Scene.GetWidget(string, string) Scene.RemoveElement(GameElement) Scene.RemoveElement(string, GameElement) Scene.RemoveCanvas(Canvas) Scene.RemoveCanvas(string) Scene.ResizeScene(Viewport) Scene.ImportScene2D(string, AssetManager) Scene.Name Scene.Layer Scene.Camera Scene.Canvas Scene.PhysicHandler Scene.BeforeScenePreperation Scene.BeforeSceneRender Scene.AfterSceneRender Scene.BeforeCanvasPreperation Scene.BeforeCanvasRender Scene.AfterCanvasRender Scene.OnSceneResize Scene.BackgroundTexture object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Scene2D : Scene Constructors Scene2D() Initializes a new instance of the Scene2D class. Declaration public Scene2D() Properties Framebuffer Gets or sets the framebuffer used for rendering the lightmap. Declaration public Framebuffer Framebuffer { get; set; } Property Value Type Description Framebuffer LightmapIntensity Gets or sets the intensity of the lightmap. Declaration public float LightmapIntensity { get; set; } Property Value Type Description float Lights Gets the list of 2D lights in the scene. Declaration public List<Light2D> Lights { get; set; } Property Value Type Description List<Light2D> RenderLightmap Gets or sets a value indicating whether to render the lightmap. Declaration public bool RenderLightmap { get; set; } Property Value Type Description bool Methods AddLight(Light2D) Adds a 2D light to the scene. Declaration public void AddLight(Light2D light) Parameters Type Name Description Light2D light The light to add. Init(Game, IRenderDevice) Initializes the scene. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Overrides Scene.Init(Game, IRenderDevice) OnDestroy(Game) Called when the scene is being destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides Scene.OnDestroy(Game) OnRender(Game, IRenderDevice) Called when the scene needs to render. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Overrides Scene.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Called when the scene needs to update. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Overrides Scene.OnUpdate(Game, IRenderDevice) RemoveLight(Game, Light2D) Removes a 2D light from the scene. Declaration public void RemoveLight(Game game, Light2D light) Parameters Type Name Description Game game The game instance. Light2D light The light to remove. Events AfterLightmapRendering Event that occurs after lightmap rendering. Declaration public event SceneEventHandler AfterLightmapRendering Event Type Type Description SceneEventHandler BeforeLightmapPreparation Event that occurs before lightmap preparation. Declaration public event SceneEventHandler BeforeLightmapPreparation Event Type Type Description SceneEventHandler"
  },
  "api/Genesis.Core.Scene3D.html": {
    "href": "api/Genesis.Core.Scene3D.html",
    "title": "Class Scene3D | GFX",
    "keywords": "Class Scene3D Represents a 3D scene for rendering, including lighting and an optional skybox. Inheritance object Scene Scene3D Inherited Members Scene.AddLayer(Layer) Scene.AddLayer(string) Scene.AddCanvas(Canvas) Scene.RemoveLayer(Layer) Scene.GetLayer(string) Scene.AddGameElement(string, GameElement) Scene.AddGameElements(string, List<GameElement>) Scene.GetElements(string) Scene.GetElements(string[]) Scene.GetElement(string) Scene.GetElement(string, string) Scene.GetCanvas(string) Scene.GetWidget(string, string) Scene.RemoveElement(GameElement) Scene.RemoveElement(string, GameElement) Scene.RemoveCanvas(Canvas) Scene.RemoveCanvas(string) Scene.ResizeScene(Viewport) Scene.ImportScene2D(string, AssetManager) Scene.Name Scene.Layer Scene.Camera Scene.Canvas Scene.PhysicHandler Scene.BeforeScenePreperation Scene.BeforeSceneRender Scene.AfterSceneRender Scene.BeforeCanvasPreperation Scene.BeforeCanvasRender Scene.AfterCanvasRender Scene.OnSceneResize Scene.BackgroundTexture object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Scene3D : Scene Constructors Scene3D(string, Light) Initializes a new instance of the Scene3D class. Declaration public Scene3D(string name, Light sun) Parameters Type Name Description string name The name of the scene. Light sun The light source (sun) in the scene. Properties Skybox Gets or sets the skybox used in the scene (optional). Declaration public Skybox Skybox { get; set; } Property Value Type Description Skybox Sun Gets or sets the light source (sun) in the scene. Declaration public Light Sun { get; set; } Property Value Type Description Light Methods Init(Game, IRenderDevice) Initializes the 3D scene. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides Scene.Init(Game, IRenderDevice) OnDestroy(Game) Called when the scene is destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides Scene.OnDestroy(Game) OnRender(Game, IRenderDevice) Called during the rendering phase of the game loop. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides Scene.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Called during the update phase of the game loop. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides Scene.OnUpdate(Game, IRenderDevice)"
  },
  "api/Genesis.Core.SceneEventHandler.html": {
    "href": "api/Genesis.Core.SceneEventHandler.html",
    "title": "Delegate SceneEventHandler | GFX",
    "keywords": "Delegate SceneEventHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void SceneEventHandler(Scene scene, Game game, IRenderDevice renderDevice) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice Constructors SceneEventHandler(object, IntPtr) Declaration public SceneEventHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, IRenderDevice, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, IRenderDevice renderDevice, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, IRenderDevice) Declaration public virtual void Invoke(Scene scene, Game game, IRenderDevice renderDevice) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice"
  },
  "api/Genesis.Core.SceneSizeEvenHandler.html": {
    "href": "api/Genesis.Core.SceneSizeEvenHandler.html",
    "title": "Delegate SceneSizeEvenHandler | GFX",
    "keywords": "Delegate SceneSizeEvenHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void SceneSizeEvenHandler(Scene scene, Viewport viewport) Parameters Type Name Description Scene scene Viewport viewport Constructors SceneSizeEvenHandler(object, IntPtr) Declaration public SceneSizeEvenHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Viewport, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Viewport viewport, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Viewport viewport AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Viewport) Declaration public virtual void Invoke(Scene scene, Viewport viewport) Parameters Type Name Description Scene scene Viewport viewport"
  },
  "api/Genesis.Core.Storage.html": {
    "href": "api/Genesis.Core.Storage.html",
    "title": "Class Storage | GFX",
    "keywords": "Class Storage Class for dynamic clearing not used elements. Inheritance object Storage Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Storage Constructors Storage() Create a new Storage instance Declaration public Storage() Properties ManagedElements Declaration public List<GameElement> ManagedElements { get; set; } Property Value Type Description List<GameElement> Methods ManageElement(GameElement) Add an element which get managed Declaration public void ManageElement(GameElement element) Parameters Type Name Description GameElement element Process(Game, Scene) Removes disabled elements from the game and the garbage collector Declaration public void Process(Game game, Scene scene) Parameters Type Name Description Game game Scene scene"
  },
  "api/Genesis.Core.Utils.html": {
    "href": "api/Genesis.Core.Utils.html",
    "title": "Class Utils | GFX",
    "keywords": "Class Utils Contains utility functions for various tasks within the Genesis.Core namespace. Inheritance object Utils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Utils Constructors Utils() Declaration public Utils() Methods CalculateCameraFront(Camera) Calculates the front vector of a camera using its location and rotation. Declaration public static Vec3 CalculateCameraFront(Camera camera) Parameters Type Name Description Camera camera The camera. Returns Type Description Vec3 The front vector of the camera. CalculateCameraFront2(Camera) Calculates the front vector of a camera using its rotation angles. Declaration public static Vec3 CalculateCameraFront2(Camera camera) Parameters Type Name Description Camera camera The camera. Returns Type Description Vec3 The front vector of the camera. CalculateDirectionVector(Vec3, Vec3) Calculates the direction vector from point A to point B. Declaration public static Vec3 CalculateDirectionVector(Vec3 pointA, Vec3 pointB) Parameters Type Name Description Vec3 pointA The starting point. Vec3 pointB The target point. Returns Type Description Vec3 The direction vector from point A to point B. CalculateFrontVec3(Vec3, Vec3, float) Calculates a vector infront of the given point Declaration public static Vec3 CalculateFrontVec3(Vec3 location, Vec3 rotation, float dist) Parameters Type Name Description Vec3 location The source location Vec3 rotation The rotation float dist The distance Returns Type Description Vec3 Front vector CalculatePitch(Vec3, Vec3) Calculates the pitch angle from point1 to point2. Declaration public static float CalculatePitch(Vec3 point1, Vec3 point2) Parameters Type Name Description Vec3 point1 The starting point. Vec3 point2 The target point. Returns Type Description float The pitch angle in degrees. CalculateYaw(Vec3, Vec3) Calculates the yaw angle from point1 to point2. Declaration public static float CalculateYaw(Vec3 point1, Vec3 point2) Parameters Type Name Description Vec3 point1 The starting point. Vec3 point2 The target point. Returns Type Description float The yaw angle in degrees. ConvertBase64ToBitmap(string) Converts a Base64 string to a Bitmap image. Declaration public static Bitmap ConvertBase64ToBitmap(string base64) Parameters Type Name Description string base64 The Base64 string to convert. Returns Type Description Bitmap The Bitmap image decoded from the Base64 string. ConvertBitmapToBase64(Bitmap) Converts a Bitmap image to a Base64 string. Declaration public static string ConvertBitmapToBase64(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap The Bitmap image to convert. Returns Type Description string The Base64 string representation of the Bitmap image. ConvertColor(Color) Declaration public static float[] ConvertColor(Color color) Parameters Type Name Description Color color Returns Type Description float[] ConvertDrawingColor(float, float, float, float) Converts float values to a System.Drawing.Color. Declaration public static Color ConvertDrawingColor(float a, float r, float g, float b) Parameters Type Name Description float a The alpha component. float r The red component. float g The green component. float b The blue component. Returns Type Description Color The System.Drawing.Color representation. ConvertToGlmMat4(Matrix4x4) Converts a Matrix4x4 from the Assimp library to a mat4 from GLM library. Declaration public static mat4 ConvertToGlmMat4(Matrix4x4 matrix) Parameters Type Name Description Matrix4x4 matrix The Matrix4x4 to convert. Returns Type Description mat4 A mat4 representing the converted matrix. CreateEmptyNormalMap(int, int) Creates an empty normal map with the specified width and height. Declaration public static Bitmap CreateEmptyNormalMap(int width, int height) Parameters Type Name Description int width The width of the normal map. int height The height of the normal map. Returns Type Description Bitmap An empty normal map. CreateEmptyTexture(int, int) Creates an empty texture with the specified width and height. Declaration public static Bitmap CreateEmptyTexture(int width, int height) Parameters Type Name Description int width The width of the texture. int height The height of the texture. Returns Type Description Bitmap An empty texture. EulerToQuaternion(Vec3) Converts Euler angles to a quaternion. Declaration public static quat EulerToQuaternion(Vec3 euler) Parameters Type Name Description Vec3 euler The Euler angles vector. Returns Type Description quat The quaternion representing the rotation. ForwardVector(Vec3, Vec3, float) Calculates the vector pointing forward from a given position and rotation. Declaration public static Vec3 ForwardVector(Vec3 v, Vec3 rotaion, float dist) Parameters Type Name Description Vec3 v The starting position vector. Vec3 rotaion float dist The distance to move in the forward direction. Returns Type Description Vec3 The resulting position vector. GetCurrentTimeMillis() Gets the current time in milliseconds. Declaration public static long GetCurrentTimeMillis() Returns Type Description long The current time in milliseconds. GetElementWorldLocation(GameElement) Returns the world location for the game element. Declaration public static Vec3 GetElementWorldLocation(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description Vec3 The world location of the game element. GetElementWorldRotation(GameElement) Returns the world rotation for the game element. Declaration public static Vec3 GetElementWorldRotation(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description Vec3 The world rotation of the game element. GetElementWorldScale(GameElement) Returns the world scale for the game element. Declaration public static Vec3 GetElementWorldScale(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description Vec3 The world scale of the game element. GetForwardDirection(Vec3) Calculates the forward direction vector based on Euler angles. Declaration public static Vec3 GetForwardDirection(Vec3 eulerAngles) Parameters Type Name Description Vec3 eulerAngles The Euler angles representing rotation. Returns Type Description Vec3 The forward direction vector. GetGLMQuat(Quaternion) Converts an Assimp Quaternion to a quat from GLM library. Declaration public static quat GetGLMQuat(Quaternion pOrientation) Parameters Type Name Description Quaternion pOrientation The Quaternion to convert. Returns Type Description quat A quat representing the converted quaternion. GetGLMVec(Vector3D) Converts an Assimp Vector3D to a vec3 from GLM library. Declaration public static vec3 GetGLMVec(Vector3D vec) Parameters Type Name Description Vector3D vec The Vector3D to convert. Returns Type Description vec3 A vec3 representing the converted vector. GetModelRotation(GameElement) Returns the model rotation matrix relative to the world rotation. Declaration public static mat4 GetModelRotation(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description mat4 The model rotation matrix. GetModelScale(GameElement) Returns the model scale matrix relative to the world scale. Declaration public static mat4 GetModelScale(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description mat4 The model scale matrix. GetModelSpaceLocation(GameElement, Vec3) Converts the world transform to model space transform. Declaration public static Vec3 GetModelSpaceLocation(GameElement element, Vec3 worldPosition) Parameters Type Name Description GameElement element The game element. Vec3 worldPosition The world position vector. Returns Type Description Vec3 The model space location of the game element. GetModelSpaceRotation(GameElement, Vec3) Converts the world rotation to the model space rotation. Declaration public static Vec3 GetModelSpaceRotation(GameElement element, Vec3 worldRotation) Parameters Type Name Description GameElement element The game element. Vec3 worldRotation The world rotation vector. Returns Type Description Vec3 The model space rotation of the game element. GetModelSpaceScale(GameElement, Vec3) Converts the world scale to the model space scale. Declaration public static Vec3 GetModelSpaceScale(GameElement element, Vec3 worldScale) Parameters Type Name Description GameElement element The game element. Vec3 worldScale The world scale vector. Returns Type Description Vec3 The model space scale of the game element. GetModelTransformation(GameElement) Returns the model transform matrix relative to the world location. Declaration public static mat4 GetModelTransformation(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description mat4 The model transform matrix. GetParentModelView(GameElement) Gets the transformation matrix for the parent model view. Declaration public static mat4 GetParentModelView(GameElement element) Parameters Type Name Description GameElement element The game element. Returns Type Description mat4 The transformation matrix for the parent model view. GetRandomColor() Generates an random color Declaration public static Color GetRandomColor() Returns Type Description Color The color GetRandomColor(Color, Color) Returns a random color between the given colors. Declaration public static Color GetRandomColor(Color colorA, Color colorB) Parameters Type Name Description Color colorA The minimum color. Color colorB The maximum color. Returns Type Description Color A randomly generated color within the specified range. GetRandomColor(Color, Color, int) Returns a random color between the given colors using a specified seed for reproducibility. Declaration public static Color GetRandomColor(Color colorA, Color colorB, int seed) Parameters Type Name Description Color colorA The minimum color. Color colorB The maximum color. int seed The seed for the random number generator. Returns Type Description Color A randomly generated color within the specified range and seed. GetRandomColor(int) Generates an random color from an seed Declaration public static Color GetRandomColor(int seed) Parameters Type Name Description int seed The seed for the randomizer Returns Type Description Color The color GetRelativePosition(GameElement, GameElement) Gets the relative position of a child GameElement with respect to a parent GameElement. Declaration public static Vec3 GetRelativePosition(GameElement parent, GameElement child) Parameters Type Name Description GameElement parent The parent GameElement. GameElement child The child GameElement. Returns Type Description Vec3 A Vec3 representing the relative position of the child. GetRelativePosition(GameElement, Camera) Gets the relative position of a camera with respect to a parent GameElement. Declaration public static Vec3 GetRelativePosition(GameElement parent, Camera camera) Parameters Type Name Description GameElement parent The parent GameElement. Camera camera The camera. Returns Type Description Vec3 A Vec3 representing the relative position of the camera. GetRelativePosition(GameElement, Vec3) Gets the relative position of a location with respect to a parent GameElement. Declaration public static Vec3 GetRelativePosition(GameElement parent, Vec3 location) Parameters Type Name Description GameElement parent The parent GameElement. Vec3 location The location. Returns Type Description Vec3 A Vec3 representing the relative position of the location. GetStringBounds(Vec3, string, float, float) Gets the bounding rectangle of a string given its location, text, font size, and spacing. Declaration public static Rect GetStringBounds(Vec3 location, string text, float fontSize, float spacing) Parameters Type Name Description Vec3 location The location of the string. string text The input string. float fontSize The font size. float spacing The character spacing. Returns Type Description Rect The bounding rectangle of the string. GetStringHeight(string, float, float) Gets the height of a string given the font size and spacing. Declaration public static float GetStringHeight(string text, float fontSize, float spacing) Parameters Type Name Description string text The input string. float fontSize The font size. float spacing The line spacing. Returns Type Description float The height of the string. GetStringWidth(string, float, float) Gets the width of a string given the font size and spacing. Declaration public static float GetStringWidth(string text, float fontSize, float spacing) Parameters Type Name Description string text The input string. float fontSize The font size. float spacing The character spacing. Returns Type Description float The width of the string. GetVMirroredPosition(Vec3, Camera) Gets the vertically mirrored position of a reference vector relative to a camera. Declaration public static Vec3 GetVMirroredPosition(Vec3 vref, Camera camera) Parameters Type Name Description Vec3 vref The reference vector. Camera camera The camera used for mirroring. Returns Type Description Vec3 The vertically mirrored position vector. GetVMirroredPosition(float, float, float, Camera) Gets the vertically mirrored position of a reference vector relative to a camera. Declaration public static Vec3 GetVMirroredPosition(float x, float y, float z, Camera camera) Parameters Type Name Description float x The reference x vector. float y The reference y vector float z The reference z vector Camera camera The camera used for mirroring. Returns Type Description Vec3 The vertically mirrored position vector. LookAt(Camera, Vec3) Lets the camera look at a position. Declaration public static void LookAt(Camera camera, Vec3 targetPosition) Parameters Type Name Description Camera camera The camera. Vec3 targetPosition The target position. LookAtX(Camera, Vec3) Adjusts the camera's rotation to look at a specified position along the X-axis. Declaration public static void LookAtX(Camera camera, Vec3 targetPosition) Parameters Type Name Description Camera camera The camera to adjust. Vec3 targetPosition The position to look at. LookAtY(Camera, Vec3) Adjusts the camera's rotation to look at a specified position along the Y-axis. Declaration public static void LookAtY(Camera camera, Vec3 targetPosition) Parameters Type Name Description Camera camera The camera to adjust. Vec3 targetPosition The position to look at. RayDirection(Camera, Viewport, float, float) Calculates the direction of a ray in world space based on screen coordinates. Declaration public static Vec3 RayDirection(Camera camera, Viewport viewport, float x, float y) Parameters Type Name Description Camera camera The Camera object. Viewport viewport The Viewport object. float x X-coordinate on the screen. float y Y-coordinate on the screen. Returns Type Description Vec3 Direction of the ray as a Vec3. ToDegrees(float) Converts radians to degrees. Declaration public static float ToDegrees(float radians) Parameters Type Name Description float radians The angle in radians. Returns Type Description float The angle in degrees. ToRadians(float) Converts degrees to radians. Declaration public static float ToRadians(float degrees) Parameters Type Name Description float degrees The angle in degrees. Returns Type Description float The angle in radians. TransformToWorldCords(Game, float, float) Transforms screen coordinates to world coordinates in the context of a Game. Declaration public static Vec3 TransformToWorldCords(Game game, float x, float y) Parameters Type Name Description Game game The Game object. float x X-coordinate on the screen. float y Y-coordinate on the screen. Returns Type Description Vec3 World coordinates as a Vec3. TransformToWorldCords(Camera, Viewport, float, float) Transforms screen coordinates to world coordinates in the context of a specific Camera and Viewport. Declaration public static Vec3 TransformToWorldCords(Camera camera, Viewport viewport, float x, float y) Parameters Type Name Description Camera camera The Camera object. Viewport viewport The Viewport object. float x X-coordinate on the screen. float y Y-coordinate on the screen. Returns Type Description Vec3 World coordinates as a Vec3."
  },
  "api/Genesis.Core.html": {
    "href": "api/Genesis.Core.html",
    "title": "Namespace Genesis.Core | GFX",
    "keywords": "Namespace Genesis.Core Classes AssetManager Manages game assets such as textures and fonts. Game Represents the main game class responsible for managing game loops, scenes, rendering, and updates. GameElement Represents a base class for game elements in the Genesis framework. GenesisWindow IGameBehavior Represents the base class for game behaviors in the Genesis framework. Input Provides utility methods for handling user input in the Genesis framework. Layer Represents a layer containing game elements in the Genesis framework. Light Represents a light source in the Genesis framework. Light2D Represents a 2D light element in the game. Scene Represents a game scene in the Genesis framework. Scene2D Represents a 2D scene in the game. Scene3D Represents a 3D scene for rendering, including lighting and an optional skybox. Storage Class for dynamic clearing not used elements. Utils Contains utility functions for various tasks within the Genesis.Core namespace. Delegates GameEventHandler SceneEventHandler SceneSizeEvenHandler"
  },
  "api/Genesis.Graphics.Animation.html": {
    "href": "api/Genesis.Graphics.Animation.html",
    "title": "Class Animation | GFX",
    "keywords": "Class Animation Represents an animation definition with details such as name, starting cell, row, and number of frames. Inheritance object Animation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Animation Constructors Animation() Initializes a new instance of the Animation class. Declaration public Animation() Animation(string, int, int, int) Initializes a new instance of the Animation class with specified parameters. Declaration public Animation(string name, int cell, int row, int frames) Parameters Type Name Description string name The name of the animation. int cell The starting cell index of the animation. int row The row index in the animation sheet. int frames The number of frames in the animation. Properties Cell Gets or sets the starting cell index of the animation. Declaration public int Cell { get; set; } Property Value Type Description int Frames Gets or sets the number of frames in the animation. Declaration public int Frames { get; set; } Property Value Type Description int Name Gets or sets the name of the animation. Declaration public string Name { get; set; } Property Value Type Description string Row Gets or sets the row index in the animation sheet. Declaration public int Row { get; set; } Property Value Type Description int"
  },
  "api/Genesis.Graphics.Animation3D.Animation.html": {
    "href": "api/Genesis.Graphics.Animation3D.Animation.html",
    "title": "Class Animation | GFX",
    "keywords": "Class Animation Represents an animation associated with a 3D model. Inheritance object Animation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public class Animation Constructors Animation(Scene, Model, int) Initializes a new instance of the Animation class. Declaration public Animation(Scene scene, Model model, int index) Parameters Type Name Description Scene scene Model model int index Properties BoneInfoMap Mapping of bone names to bone information. Declaration public Dictionary<string, boneinfo> BoneInfoMap { get; set; } Property Value Type Description Dictionary<string, boneinfo> Bones List of bones affected by the animation. Declaration public List<Bone> Bones { get; set; } Property Value Type Description List<Bone> Duration Duration of the animation in ticks. Declaration public float Duration { get; set; } Property Value Type Description float Name Name of the animation. Declaration public string Name { get; set; } Property Value Type Description string RootNode Root node of the animation's scene hierarchy. Declaration public AssimpNodeData RootNode { get; set; } Property Value Type Description AssimpNodeData TicksPerSecond Number of ticks per second for the animation. Declaration public float TicksPerSecond { get; set; } Property Value Type Description float Methods FindBone(string) Finds a bone with the specified name. Declaration public Bone FindBone(string name) Parameters Type Name Description string name Returns Type Description Bone"
  },
  "api/Genesis.Graphics.Animation3D.Animator.html": {
    "href": "api/Genesis.Graphics.Animation3D.Animator.html",
    "title": "Class Animator | GFX",
    "keywords": "Class Animator Controls the animation playback of a 3D model. Inheritance object Animator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public class Animator Constructors Animator() Declaration public Animator() Animator(Animation) Initializes a new instance of the Animator class with the specified animation. Declaration public Animator(Animation animation) Parameters Type Name Description Animation animation Properties CurrentAnimation Currently active animation. Declaration public Animation CurrentAnimation { get; set; } Property Value Type Description Animation CurrentTime Current time in the animation. Declaration public float CurrentTime { get; set; } Property Value Type Description float DeltaTime Time elapsed since last frame. Declaration public float DeltaTime { get; set; } Property Value Type Description float FinalBoneMatrices List of final bone transformation matrices. Declaration public List<mat4> FinalBoneMatrices { get; set; } Property Value Type Description List<mat4> InterpolateFrames Flag indicating whether to interpolate frames during animation playback. Declaration public bool InterpolateFrames { get; set; } Property Value Type Description bool Loop Flag indicating whether to loop the animation. Declaration public bool Loop { get; set; } Property Value Type Description bool Play Flag indicating whether the animation is playing. Declaration public bool Play { get; set; } Property Value Type Description bool Methods CalculateBoneTransform(AssimpNodeData, mat4) Calculates bone transformations recursively based on the animation hierarchy. Declaration public void CalculateBoneTransform(AssimpNodeData node, mat4 parentTransform) Parameters Type Name Description AssimpNodeData node mat4 parentTransform LoadAnimation(Animation) Loads a new animation. Declaration public void LoadAnimation(Animation animation) Parameters Type Name Description Animation animation UpdateAnimation(float) Updates the animation based on the elapsed time since the last frame. Declaration public void UpdateAnimation(float dt) Parameters Type Name Description float dt"
  },
  "api/Genesis.Graphics.Animation3D.AssimpNodeData.html": {
    "href": "api/Genesis.Graphics.Animation3D.AssimpNodeData.html",
    "title": "Struct AssimpNodeData | GFX",
    "keywords": "Struct AssimpNodeData Represents data associated with a node in the Assimp scene hierarchy. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct AssimpNodeData Fields children Declaration public List<AssimpNodeData> children Field Value Type Description List<AssimpNodeData> childrenCount Declaration public int childrenCount Field Value Type Description int name Declaration public string name Field Value Type Description string transformation Declaration public mat4 transformation Field Value Type Description mat4"
  },
  "api/Genesis.Graphics.Animation3D.Bone.html": {
    "href": "api/Genesis.Graphics.Animation3D.Bone.html",
    "title": "Class Bone | GFX",
    "keywords": "Class Bone Represents a bone in a skeletal animation system. Inheritance object Bone Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public class Bone Constructors Bone(string, int, NodeAnimationChannel) Initializes a new instance of the Bone class. Declaration public Bone(string name, int id, NodeAnimationChannel channel) Parameters Type Name Description string name int id NodeAnimationChannel channel Properties ID ID of the bone. Declaration public int ID { get; set; } Property Value Type Description int LocalTransform Local transformation matrix of the bone. Declaration public mat4 LocalTransform { get; set; } Property Value Type Description mat4 Name Name of the bone. Declaration public string Name { get; set; } Property Value Type Description string NumPositions Number of position keyframes. Declaration public int NumPositions { get; set; } Property Value Type Description int NumRotations Number of rotation keyframes. Declaration public int NumRotations { get; set; } Property Value Type Description int NumScalings Number of scale keyframes. Declaration public int NumScalings { get; set; } Property Value Type Description int Positions List of position keyframes for the bone. Declaration public List<KeyPosition> Positions { get; set; } Property Value Type Description List<KeyPosition> Rotations List of rotation keyframes for the bone. Declaration public List<KeyRotation> Rotations { get; set; } Property Value Type Description List<KeyRotation> Scales List of scale keyframes for the bone. Declaration public List<KeyScale> Scales { get; set; } Property Value Type Description List<KeyScale> Methods Update(float, bool) Updates the bone transformation based on the animation time. Declaration public void Update(float animationTime, bool interpolate) Parameters Type Name Description float animationTime bool interpolate"
  },
  "api/Genesis.Graphics.Animation3D.KeyPosition.html": {
    "href": "api/Genesis.Graphics.Animation3D.KeyPosition.html",
    "title": "Struct KeyPosition | GFX",
    "keywords": "Struct KeyPosition Represents a keyframe position in an animation. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct KeyPosition Fields position Declaration public vec3 position Field Value Type Description vec3 timeStamp Declaration public float timeStamp Field Value Type Description float"
  },
  "api/Genesis.Graphics.Animation3D.KeyRotation.html": {
    "href": "api/Genesis.Graphics.Animation3D.KeyRotation.html",
    "title": "Struct KeyRotation | GFX",
    "keywords": "Struct KeyRotation Represents a keyframe rotation in an animation. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct KeyRotation Fields orientation Declaration public quat orientation Field Value Type Description quat timeStamp Declaration public float timeStamp Field Value Type Description float"
  },
  "api/Genesis.Graphics.Animation3D.KeyScale.html": {
    "href": "api/Genesis.Graphics.Animation3D.KeyScale.html",
    "title": "Struct KeyScale | GFX",
    "keywords": "Struct KeyScale Represents a keyframe scale in an animation. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct KeyScale Fields scale Declaration public vec3 scale Field Value Type Description vec3 timeStamp Declaration public float timeStamp Field Value Type Description float"
  },
  "api/Genesis.Graphics.Animation3D.ModelMesh.html": {
    "href": "api/Genesis.Graphics.Animation3D.ModelMesh.html",
    "title": "Class ModelMesh | GFX",
    "keywords": "Class ModelMesh Represents a mesh of a 3D model. Inheritance object ModelMesh Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public class ModelMesh Constructors ModelMesh() Initializes a new instance of the ModelMesh class. Declaration public ModelMesh() Fields MaxBoneInfluence Maximum number of bones influencing a vertex. Declaration public const int MaxBoneInfluence = 4 Field Value Type Description int Properties Indices List of indices defining the geometry of the mesh. Declaration public List<int> Indices { get; set; } Property Value Type Description List<int> Material Material applied to the mesh. Declaration public Material Material { get; set; } Property Value Type Description Material Name Name of the mesh. Declaration public string Name { get; set; } Property Value Type Description string Propertys Additional properties of the mesh. Declaration public Dictionary<string, object> Propertys { get; set; } Property Value Type Description Dictionary<string, object> Vertices List of vertices in the mesh. Declaration public List<vertex> Vertices { get; set; } Property Value Type Description List<vertex>"
  },
  "api/Genesis.Graphics.Animation3D.boneinfo.html": {
    "href": "api/Genesis.Graphics.Animation3D.boneinfo.html",
    "title": "Struct boneinfo | GFX",
    "keywords": "Struct boneinfo Contains information about a bone. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct boneinfo Fields id Declaration public int id Field Value Type Description int offset Declaration public mat4 offset Field Value Type Description mat4"
  },
  "api/Genesis.Graphics.Animation3D.html": {
    "href": "api/Genesis.Graphics.Animation3D.html",
    "title": "Namespace Genesis.Graphics.Animation3D | GFX",
    "keywords": "Namespace Genesis.Graphics.Animation3D Classes Animation Represents an animation associated with a 3D model. Animator Controls the animation playback of a 3D model. Bone Represents a bone in a skeletal animation system. ModelMesh Represents a mesh of a 3D model. Structs AssimpNodeData Represents data associated with a node in the Assimp scene hierarchy. KeyPosition Represents a keyframe position in an animation. KeyRotation Represents a keyframe rotation in an animation. KeyScale Represents a keyframe scale in an animation. boneinfo Contains information about a bone. vertex Represents a vertex in a 3D model mesh."
  },
  "api/Genesis.Graphics.Animation3D.vertex.html": {
    "href": "api/Genesis.Graphics.Animation3D.vertex.html",
    "title": "Struct vertex | GFX",
    "keywords": "Struct vertex Represents a vertex in a 3D model mesh. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics.Animation3D Assembly: Genesis.dll Syntax public struct vertex Fields BoneIDs Declaration public ivec4 BoneIDs Field Value Type Description ivec4 BoneWeights Declaration public vec4 BoneWeights Field Value Type Description vec4 position Declaration public vec3 position Field Value Type Description vec3 textcoords Declaration public vec2 textcoords Field Value Type Description vec2"
  },
  "api/Genesis.Graphics.Camera.html": {
    "href": "api/Genesis.Graphics.Camera.html",
    "title": "Class Camera | GFX",
    "keywords": "Class Camera Represents a camera in a graphics context for rendering 2D scenes. Inheritance object Camera PerspectiveCamera Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Camera Constructors Camera(Vec3, Vec3, float, float) Initializes a new instance of the Camera class with the specified location, size, near and far distances. Declaration public Camera(Vec3 location, Vec3 size, float near, float far) Parameters Type Name Description Vec3 location The initial location of the camera in 3D space. Vec3 size The size of the camera. float near The distance to the near clipping plane of the camera. float far The distance to the far clipping plane of the camera. Properties Far Gets or sets the distance to the far clipping plane of the camera. Declaration public float Far { get; set; } Property Value Type Description float Location Gets or sets the location of the camera in 3D space. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Near Gets or sets the distance to the near clipping plane of the camera. Declaration public float Near { get; set; } Property Value Type Description float Rotation Gets or sets the rotation of the camera in 3D space. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Size Gets or sets the size of the camera. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Type Gets or sets the type of the camera, either orthographic or perspective. Declaration public CameraType Type { get; set; } Property Value Type Description CameraType Methods GetRect() Gets the rectangular region represented by the camera's location and size. Declaration public Rect GetRect() Returns Type Description Rect A Rect object representing the camera's view region. LookAt(GameElement) Adjusts the camera to look at the specified game element (only 2D). Declaration public void LookAt(GameElement element) Parameters Type Name Description GameElement element The game element to look at. LookAt(GameElement, bool) Adjusts the camera to look at the specified game element, with an option to center the view on the element. Declaration public void LookAt(GameElement element, bool centerOffset) Parameters Type Name Description GameElement element The game element to look at. bool centerOffset If true, centers the view on the element; otherwise, positions the camera at the element's location. ProjectMouse2D(Camera, Viewport, int, int) Projects the mouse coords into screen coords Declaration public static Vec3 ProjectMouse2D(Camera camera, Viewport viewport, int mouseX, int mouseY) Parameters Type Name Description Camera camera The camera Viewport viewport The viewport int mouseX the screen x coordinate int mouseY the screen y coordinate Returns Type Description Vec3"
  },
  "api/Genesis.Graphics.CameraType.html": {
    "href": "api/Genesis.Graphics.CameraType.html",
    "title": "Enum CameraType | GFX",
    "keywords": "Enum CameraType Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public enum CameraType Fields Name Description Ortho Perspective"
  },
  "api/Genesis.Graphics.Face.html": {
    "href": "api/Genesis.Graphics.Face.html",
    "title": "Class Face | GFX",
    "keywords": "Class Face Represents a face in a 3D model with vertices, texture coordinates, and optional properties. Inheritance object Face Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Face Constructors Face() Initializes a new instance of the Face class. Declaration public Face() Face(Texture) Initializes a new instance of the Face class with a specified texture. Declaration public Face(Texture texture) Parameters Type Name Description Texture texture The texture associated with the face. Face(Vec3[]) Initializes a new instance of the Face class with specified vertices. Declaration public Face(Vec3[] vecs) Parameters Type Name Description Vec3[] vecs An array of vertices defining the face. Face(Vec3[], Vec3[], Texture) Initializes a new instance of the Face class with specified vertices, texture coordinates, and a texture. Declaration public Face(Vec3[] vecs, Vec3[] texCords, Texture texture) Parameters Type Name Description Vec3[] vecs An array of vertices defining the face. Vec3[] texCords An array of texture coordinates associated with the face vertices. Texture texture The texture associated with the face. Properties Propertys Gets or sets additional properties associated with the face. Declaration public Dictionary<string, object> Propertys { get; set; } Property Value Type Description Dictionary<string, object> TexCords Gets or sets the list of texture coordinates associated with the face vertices. Declaration public List<Vec3> TexCords { get; set; } Property Value Type Description List<Vec3> Texture Gets or sets the texture associated with the face. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Vertices Gets or sets the list of vertices defining the face. Declaration public List<Vec3> Vertices { get; set; } Property Value Type Description List<Vec3> Methods InitFace(IRenderDevice) Initializes the face by loading its associated texture using the specified renderer. Declaration public void InitFace(IRenderDevice renderer) Parameters Type Name Description IRenderDevice renderer The renderer responsible for loading the texture."
  },
  "api/Genesis.Graphics.Font.html": {
    "href": "api/Genesis.Graphics.Font.html",
    "title": "Class Font | GFX",
    "keywords": "Class Font Represents a font with information about glyph size, spacing, and glyph atlas. Inheritance object Font Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Font Constructors Font() Initializes a new instance of the Font class. Declaration public Font() Properties Column Gets or sets the number of columns in the glyph atlas. Declaration public int Column { get; set; } Property Value Type Description int FontAtlas Gets or sets the bitmap containing the font atlas. Declaration public Bitmap FontAtlas { get; set; } Property Value Type Description Bitmap GlyphSize Gets or sets the size of each glyph in the font. Declaration public float GlyphSize { get; set; } Property Value Type Description float Glyphes Gets or sets the list of glyphs in the font. Declaration public List<Glyphe> Glyphes { get; set; } Property Value Type Description List<Glyphe> Name Gets or sets the name of the font. Declaration public string Name { get; set; } Property Value Type Description string RenderID Gets or sets the render ID associated with the font. Declaration public int RenderID { get; set; } Property Value Type Description int Rows Gets or sets the number of rows in the glyph atlas. Declaration public int Rows { get; set; } Property Value Type Description int Spacing Gets or sets the spacing between glyphs. Declaration public float Spacing { get; set; } Property Value Type Description float Methods Base64ToImage(string) Converts a base64-encoded image string to a Bitmap. Declaration public Bitmap Base64ToImage(string base64) Parameters Type Name Description string base64 The base64-encoded image string. Returns Type Description Bitmap The decoded Bitmap image. FromFile(string) Loads font information from an XML file. Declaration public void FromFile(string file) Parameters Type Name Description string file The path to the XML file containing font information. GetGlyphe(char) Gets the glyph associated with a specific character. Declaration public Glyphe GetGlyphe(char character) Parameters Type Name Description char character The character for which to retrieve the glyph. Returns Type Description Glyphe The glyph associated with the specified character. LoadSystemFont(string) Loads a system font with a default set of glyphs. Declaration public static Font LoadSystemFont(string fontName) Parameters Type Name Description string fontName The name of the system font to load. Returns Type Description Font The loaded system font."
  },
  "api/Genesis.Graphics.Framebuffer.html": {
    "href": "api/Genesis.Graphics.Framebuffer.html",
    "title": "Class Framebuffer | GFX",
    "keywords": "Class Framebuffer Represents a framebuffer object in graphics rendering. Inheritance object Framebuffer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Framebuffer Constructors Framebuffer() Declaration public Framebuffer() Properties FramebufferID Gets or sets the ID of the framebuffer. Declaration public int FramebufferID { get; set; } Property Value Type Description int RenderBuffer Gets or sets the ID of the render buffer associated with the framebuffer. Declaration public int RenderBuffer { get; set; } Property Value Type Description int Texture Gets or sets the ID of the texture associated with the framebuffer. Declaration public int Texture { get; set; } Property Value Type Description int Methods ToTexture() Converts the framebuffer to a texture. Declaration public Texture ToTexture() Returns Type Description Texture The converted texture."
  },
  "api/Genesis.Graphics.Glyphe.html": {
    "href": "api/Genesis.Graphics.Glyphe.html",
    "title": "Class Glyphe | GFX",
    "keywords": "Class Glyphe Represents a glyph in a font texture atlas. Inheritance object Glyphe Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Glyphe Constructors Glyphe(char, int, int) Initializes a new instance of the Glyphe class. Declaration public Glyphe(char character, int row, int column) Parameters Type Name Description char character The character associated with the glyph. int row The row index of the glyph in the texture atlas. int column The column index of the glyph in the texture atlas. Properties Character Gets or sets the character associated with the glyph. Declaration public char Character { get; set; } Property Value Type Description char Column Gets or sets the column index of the glyph in the texture atlas. Declaration public int Column { get; set; } Property Value Type Description int Row Gets or sets the row index of the glyph in the texture atlas. Declaration public int Row { get; set; } Property Value Type Description int"
  },
  "api/Genesis.Graphics.IRenderDevice.html": {
    "href": "api/Genesis.Graphics.IRenderDevice.html",
    "title": "Interface IRenderDevice | GFX",
    "keywords": "Interface IRenderDevice Interface for a rendering device that handles graphics rendering operations. Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public interface IRenderDevice Methods Begin() Begins the rendering process. Declaration void Begin() BuildFramebuffer(int, int) Builds a framebuffer with the specified width and height. Declaration Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, Texture) Builds a framebuffer with the specified width, height, and texture. Declaration Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Texture texture The texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, int) Builds a framebuffer with the specified width, height, and texture ID. Declaration Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. int texture The ID of the texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. CreateDynamicVertexBuffer(float[]) Creates a dynamic vertex buffer with the specified float array. Declaration int CreateDynamicVertexBuffer(float[] floats) Parameters Type Name Description float[] floats The float array for the dynamic vertex buffer. Returns Type Description int The ID of the created dynamic vertex buffer. CreateStaticVertexBuffer(float[]) Creates a static vertex buffer with the specified vertices. Declaration int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The vertices for the static vertex buffer. Returns Type Description int The ID of the created static vertex buffer. Dispose() Disposes of the rendering device and releases any resources. Declaration void Dispose() DisposeElement(GameElement) Disposes the game element Declaration void DisposeElement(GameElement element) Parameters Type Name Description GameElement element The element to dispose DisposeElement3D(Element3D) Disposes the specified 3D element, freeing up resources. Declaration void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to dispose. DisposeFont(Font) Disposes the specified font, freeing up resources. Declaration void DisposeFont(Font font) Parameters Type Name Description Font font The font to dispose. DisposeTexture(Texture) Disposes the specified texture, freeing up resources. Declaration void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture The texture to dispose. DrawBufferedSprite(BufferedSprite) Draws a buffered sprite in the current rendering context. Declaration void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite The buffered sprite to draw. DrawElement3D(Element3D) Draws a 3D element in the current rendering context. Declaration void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to draw. DrawGameElement(GameElement) Draws a game element in the current rendering context. Declaration void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element The game element to draw. DrawLine(Vec3, Vec3, Color) Draws a line with specified starting and ending points and color in the current rendering context. Declaration void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from The starting point of the line. Vec3 to The ending point of the line. Color color The color of the line. DrawMesh(Mesh, Color) Draws a mesh with specified mesh and color in the current rendering context. Declaration void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh The mesh to draw. Color color The color of the mesh. DrawRect(Rect, Color) Draws a colored rectangle with specified position and size in the current rendering context. Declaration void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. DrawRect(Rect, Color, float) Draws a colored rectangle with specified position, size, and border width in the current rendering context. Declaration void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. float borderWidth The width of the rectangle border. DrawSkyBox(Skybox) Draws a skybox in the current rendering context. Declaration void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox The skybox to draw. DrawSprite(Sprite) Draws a sprite in the current rendering context. Declaration void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite The sprite to draw. DrawSprite(Vec3, Vec3, Texture) Draws a sprite with specified location, size, and texture in the current rendering context. Declaration void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Texture, TexCoords) Draws a sprite with specified location, size, texture, and texture coordinates in the current rendering context. Declaration void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawSprite(Vec3, Vec3, Color, Texture) Draws a sprite with specified location, size, color, and texture in the current rendering context. Declaration void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Draws a sprite with specified location, size, color, texture, and texture coordinates in the current rendering context. Declaration void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawString(string, Vec3, float, Font, Color) Draws a string with specified text, location, fontsize, font, and color in the current rendering context. Declaration void DrawString(string text, Vec3 location, float fontsize, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontsize The fontsize of the text. Font font The font to use for drawing the text. Color color The color of the text. DrawString(string, Vec3, float, float, Font, Color) Draws a string with specified text, location, fontsize, spacing, font, and color in the current rendering context. Declaration void DrawString(string text, Vec3 location, float fontsize, float spacing, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontsize The fontsize of the text. float spacing The spacing between characters. Font font The font to use for drawing the text. Color color The color of the text. DrawTexture(Vec3, Vec3, float, float, Texture) Draws a texture with specified location, size, and texture coordinates in the current rendering context. Declaration void DrawTexture(Vec3 location, Vec3 size, float repeatX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location The location of the texture. Vec3 size The size of the texture. float repeatX The horizontal texture repeat factor. float repeatY The vertical texture repeat factor. Texture texture The texture to draw. DrawVectors(Vec3[], Color) Draws vectors with specified positions in the current rendering context. Declaration void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs The array of vectors to draw. Color color The color of the vectors. End() Ends the rendering process. Declaration void End() FillRect(Rect, Color) Fills a colored rectangle with specified position and size in the current rendering context. Declaration void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to fill. Color color The color to fill the rectangle with. FinishCanvasRendering(Scene, Canvas) Finishes the rendering for a canvas within a 2D scene. Declaration void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to finish rendering. FinishLightmap2D(Scene, Framebuffer) Finish the lightmap 2D rendering Declaration void FinishLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer FinishSceneRendering(Scene) Finishes the rendering for a 2D scene. Declaration void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to finish rendering. GetError() Gets the last OpenGL error code. Declaration int GetError() Returns Type Description int The error code. GetHandle() Gets the handle (pointer) to the underlying rendering context. Declaration IntPtr GetHandle() Returns Type Description IntPtr The handle to the rendering context. Init() Initializes the rendering device. Declaration void Init() InitElement3D(Element3D) Initializes a 3D element for rendering. Declaration void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitGameElement(GameElement) Initializes a game element for rendering. Declaration void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Initializes a sprite for rendering. Declaration void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Loads a font into the rendering device. Declaration void LoadFont(Font font) Parameters Type Name Description Font font The font to load. LoadTexture(Texture) Loads a texture into the rendering device. Declaration void LoadTexture(Texture texture) Parameters Type Name Description Texture texture The texture to load. ModelViewMatrix() Sets the current rendering matrix to the model-view matrix. Declaration void ModelViewMatrix() PopMatrix() Pops the matrix from the top of the matrix stack. Declaration void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Prepares the rendering for a canvas within a 2D scene. Declaration void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to prepare rendering for. PrepareLightmap2D(Scene, Framebuffer) Prepares the render for the 2D lightmap Declaration void PrepareLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer PrepareSceneRendering(Scene) Prepares the rendering for a 2D scene. Declaration void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to prepare. ProjectionMatrix() Sets the current rendering matrix to the projection matrix. Declaration void ProjectionMatrix() PushMatrix() Pushes the current matrix onto the matrix stack. Declaration void PushMatrix() Rotate(float, Vec3) Rotates the matrix by the specified angle around the given vector. Declaration void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle The rotation angle in degrees. Vec3 vector The vector to rotate around. SetCamera(Camera) Sets the camera for rendering. Declaration void SetCamera(Camera camera) Parameters Type Name Description Camera camera The camera to set. SetFramebuffer(Framebuffer) Sets the active framebuffer using its ID. Declaration void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer The ID of the framebuffer to set as active. SetFramebuffer(int) Sets the active framebuffer using the specified framebuffer object. Declaration void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer The framebuffer to set as active. SetLightSource(Light) Sets the light source for rendering. Declaration void SetLightSource(Light light) Parameters Type Name Description Light light The light source to set. TextureClampS() Sets the texture wrapping mode to clamp in the S direction. Declaration void TextureClampS() TextureClampT() Sets the texture wrapping mode to clamp in the T direction. Declaration void TextureClampT() TextureRepeatS() Sets the texture wrapping mode to repeat in the S direction. Declaration void TextureRepeatS() TextureRepeatT() Sets the texture wrapping mode to repeat in the T direction. Declaration void TextureRepeatT() Translate(Vec3) Translates the matrix by the specified vector. Declaration void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector The translation vector. Translate(float, float, float) Translates the matrix by the specified coordinates. Declaration void Translate(float x, float y, float z) Parameters Type Name Description float x The x-coordinate translation. float y The y-coordinate translation. float z The z-coordinate translation. UpdateFramebufferSize(Framebuffer, int, int) Updates the size of the specified framebuffer. Declaration void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer The framebuffer to update. int width The new width of the framebuffer. int height The new height of the framebuffer. Viewport(float, float, float, float) Sets the viewport for rendering. Declaration void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x The x-coordinate of the viewport. float y The y-coordinate of the viewport. float width The width of the viewport. float height The height of the viewport."
  },
  "api/Genesis.Graphics.Material.html": {
    "href": "api/Genesis.Graphics.Material.html",
    "title": "Class Material | GFX",
    "keywords": "Class Material Class representing a 3D material and managing its properties. Inheritance object Material Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Material Constructors Material() Constructor for the Material class. Initializes properties and the dictionary for user-defined properties. Declaration public Material() Material(string, Color) Constructor for the Material class. Initializes properties and the dictionary for user-defined properties. Declaration public Material(string name, Color DiffuseColor) Parameters Type Name Description string name Color DiffuseColor Properties DiffuseColor The diffuse color of the material. Declaration public Color DiffuseColor { get; set; } Property Value Type Description Color DiffuseTexture The path to the diffuse texture of the material. Declaration public string DiffuseTexture { get; set; } Property Value Type Description string Name Declaration public string Name { get; set; } Property Value Type Description string NormalTexture The path to the normal texture of the material. Declaration public string NormalTexture { get; set; } Property Value Type Description string Opacity Gets or sets the opacity Declaration public float Opacity { get; set; } Property Value Type Description float Propeterys A collection of user-defined properties. Declaration public Dictionary<string, object> Propeterys { get; set; } Property Value Type Description Dictionary<string, object> Methods LoadMaterial(string) Loads a material from a JSON file. Declaration public static Material LoadMaterial(string filename) Parameters Type Name Description string filename The path to the JSON file containing the material data. Returns Type Description Material The loaded material object. SaveMaterial(string) Saves the material object to a JSON file. Declaration public void SaveMaterial(string filename) Parameters Type Name Description string filename The path to save the material JSON file. Serialize() Serializes the material object into a JSON string. Declaration public string Serialize() Returns Type Description string Serialized JSON string of the material."
  },
  "api/Genesis.Graphics.MaterialBuffer.html": {
    "href": "api/Genesis.Graphics.MaterialBuffer.html",
    "title": "Struct MaterialBuffer | GFX",
    "keywords": "Struct MaterialBuffer Struktur zur Darstellung von Materialdaten, die in einem Material-Buffer gespeichert werden. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public struct MaterialBuffer Fields HasData Indicates whether the material buffer contains data. Declaration public bool HasData Field Value Type Description bool Normals Array for storing normal data. Declaration public float[] Normals Field Value Type Description float[] Texcords Array for storing texture coordinates. Declaration public float[] Texcords Field Value Type Description float[] Verticies Array for storing vertex data. Declaration public float[] Verticies Field Value Type Description float[]"
  },
  "api/Genesis.Graphics.Mesh.html": {
    "href": "api/Genesis.Graphics.Mesh.html",
    "title": "Class Mesh | GFX",
    "keywords": "Class Mesh Class representing a 3D mesh, including its geometry and material information. Inheritance object Mesh Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Mesh Constructors Mesh() Constructor for the Mesh class. Initializes properties and collections. Declaration public Mesh() Properties Faces List of data representing the faces of the mesh. Declaration public List<float> Faces { get; set; } Property Value Type Description List<float> Indicies List of indices defining the mesh faces. Declaration public List<int> Indicies { get; set; } Property Value Type Description List<int> Material Index of the material associated with the mesh. Declaration public Material Material { get; set; } Property Value Type Description Material Normals List of normal vectors for the mesh vertices. Declaration public List<float> Normals { get; set; } Property Value Type Description List<float> Propeterys A collection of user-defined properties associated with the mesh. Declaration public Dictionary<string, object> Propeterys { get; set; } Property Value Type Description Dictionary<string, object> TextureCords List of texture coordinates for the mesh vertices. Declaration public List<float> TextureCords { get; set; } Property Value Type Description List<float> Vericies List of vertex coordinates for the mesh. Declaration public List<float> Vericies { get; set; } Property Value Type Description List<float>"
  },
  "api/Genesis.Graphics.PerspectiveCamera.html": {
    "href": "api/Genesis.Graphics.PerspectiveCamera.html",
    "title": "Class PerspectiveCamera | GFX",
    "keywords": "Class PerspectiveCamera Represents a perspective camera derived from the Camera class. Inheritance object Camera PerspectiveCamera Inherited Members Camera.LookAt(GameElement) Camera.LookAt(GameElement, bool) Camera.GetRect() Camera.ProjectMouse2D(Camera, Viewport, int, int) Camera.Location Camera.Size Camera.Rotation Camera.Near Camera.Far Camera.Type object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class PerspectiveCamera : Camera Constructors PerspectiveCamera(Vec3, Vec3, float, float) Constructor for the PerspectiveCamera class. Declaration public PerspectiveCamera(Vec3 location, Vec3 size, float near, float far) Parameters Type Name Description Vec3 location The position of the camera. Vec3 size The size of the camera. float near The near clipping plane of the camera. float far The far clipping plane of the camera. Methods CameraFront() Gets the front direction vector of the camera. Declaration public Vec3 CameraFront() Returns Type Description Vec3 The front direction vector of the camera. Forward(float) Calculates a point in front of the camera at a specified distance. Declaration public Vec3 Forward(float distance) Parameters Type Name Description float distance The distance from the camera. Returns Type Description Vec3 The calculated point in front of the camera. LookAt(Vec3) Adjusts the camera's orientation to look at a specified position. Declaration public void LookAt(Vec3 vec3) Parameters Type Name Description Vec3 vec3 The position to look at. MoveBackward(float) Moves the camera backward by a specified value. Declaration public void MoveBackward(float value) Parameters Type Name Description float value The distance to move the camera backward. MoveDown(float) Moves the camera down by a specified value. Declaration public void MoveDown(float value) Parameters Type Name Description float value The distance to move the camera down. MoveForward(float) Moves the camera forward by a specified value. Declaration public void MoveForward(float value) Parameters Type Name Description float value The distance to move the camera forward. MoveLeft(float) Moves the camera left by a specified value. Declaration public void MoveLeft(float value) Parameters Type Name Description float value The distance to move the camera left. MoveRight(float) Moves the camera right by a specified value. Declaration public void MoveRight(float value) Parameters Type Name Description float value The distance to move the camera right. MoveUp(float) Moves the camera up by a specified value. Declaration public void MoveUp(float value) Parameters Type Name Description float value The distance to move the camera up. RenderToTexture(Game, IRenderDevice, Texture, Vec3) Renders the scene to a texture using a specified render target and resolution. Declaration public void RenderToTexture(Game game, IRenderDevice renderer, Texture renderTarget, Vec3 resolution) Parameters Type Name Description Game game The Game instance. IRenderDevice renderer The render device. Texture renderTarget The render target texture. Vec3 resolution The resolution of the rendered texture. RenderToTexture(Game, IRenderDevice, int, Vec3) Renders the scene to a texture using a specified render target ID and resolution. Declaration public void RenderToTexture(Game game, IRenderDevice renderer, int renderTarget, Vec3 resolution) Parameters Type Name Description Game game The Game instance. IRenderDevice renderer The render device. int renderTarget The ID of the render target. Vec3 resolution The resolution of the rendered texture."
  },
  "api/Genesis.Graphics.Physics.BulletDebugRenderer.html": {
    "href": "api/Genesis.Graphics.Physics.BulletDebugRenderer.html",
    "title": "Class BulletDebugRenderer | GFX",
    "keywords": "Class BulletDebugRenderer Inheritance object DebugDraw BulletDebugRenderer Implements IDisposable Inherited Members DebugDraw.DrawLine(Vector3, Vector3, Vector3) DebugDraw.DrawLine(ref Vector3, ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawAabb(ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawArc(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, ref Vector3, bool, float) DebugDraw.DrawBox(ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawBox(ref Vector3, ref Vector3, ref Matrix, ref Vector3) DebugDraw.DrawCapsule(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawCone(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawContactPoint(ref Vector3, ref Vector3, float, int, ref Vector3) DebugDraw.DrawCylinder(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawPlane(ref Vector3, float, ref Matrix, ref Vector3) DebugDraw.DrawSphere(float, ref Matrix, ref Vector3) DebugDraw.DrawSphere(ref Vector3, float, ref Vector3) DebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3) DebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3, float) DebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) DebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) DebugDraw.DrawTransform(ref Matrix, float) DebugDraw.PlaneSpace1(ref Vector3, out Vector3, out Vector3) DebugDraw.Dispose() DebugDraw.Dispose(bool) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Physics Assembly: Genesis.dll Syntax public class BulletDebugRenderer : DebugDraw, IDisposable Constructors BulletDebugRenderer(IRenderDevice) Declaration public BulletDebugRenderer(IRenderDevice RenderDevice) Parameters Type Name Description IRenderDevice RenderDevice Properties DebugMode Declaration public override DebugDrawModes DebugMode { get; set; } Property Value Type Description DebugDrawModes Overrides BulletSharp.DebugDraw.DebugMode Methods Draw3DText(ref Vector3, string) Declaration public override void Draw3DText(ref Vector3 location, string textString) Parameters Type Name Description Vector3 location string textString Overrides DebugDraw.Draw3DText(ref Vector3, string) DrawLine(ref Vector3, ref Vector3, ref Vector3) Declaration public override void DrawLine(ref Vector3 from, ref Vector3 to, ref Vector3 color) Parameters Type Name Description Vector3 from Vector3 to Vector3 color Overrides BulletSharp.DebugDraw.DrawLine(ref BulletSharp.Math.Vector3, ref BulletSharp.Math.Vector3, ref BulletSharp.Math.Vector3) ReportErrorWarning(string) Declaration public override void ReportErrorWarning(string warningString) Parameters Type Name Description string warningString Overrides DebugDraw.ReportErrorWarning(string) Implements IDisposable"
  },
  "api/Genesis.Graphics.Physics.html": {
    "href": "api/Genesis.Graphics.Physics.html",
    "title": "Namespace Genesis.Graphics.Physics | GFX",
    "keywords": "Namespace Genesis.Graphics.Physics Classes BulletDebugRenderer"
  },
  "api/Genesis.Graphics.RenderDevice.ClassicGL.html": {
    "href": "api/Genesis.Graphics.RenderDevice.ClassicGL.html",
    "title": "Class ClassicGL | GFX",
    "keywords": "Class ClassicGL Inheritance object ClassicGL Implements IRenderDevice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.RenderDevice Assembly: Genesis.dll Syntax public class ClassicGL : IRenderDevice Constructors ClassicGL(IntPtr) Declaration public ClassicGL(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd Methods Begin() Begins the rendering process. Declaration public void Begin() BuildFramebuffer(int, int) Builds a framebuffer with the specified width and height. Declaration public Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, Texture) Builds a framebuffer with the specified width, height, and texture. Declaration public Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Texture texture The texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, int) Builds a framebuffer with the specified width, height, and texture ID. Declaration public Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. int texture The ID of the texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. CreateDynamicVertexBuffer(float[]) Creates a dynamic vertex buffer with the specified float array. Declaration public int CreateDynamicVertexBuffer(float[] floats) Parameters Type Name Description float[] floats The float array for the dynamic vertex buffer. Returns Type Description int The ID of the created dynamic vertex buffer. CreateStaticVertexBuffer(float[]) Creates a static vertex buffer with the specified vertices. Declaration public int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The vertices for the static vertex buffer. Returns Type Description int The ID of the created static vertex buffer. Dispose() Disposes of the rendering device and releases any resources. Declaration public void Dispose() DisposeElement(GameElement) Disposes the game element Declaration public void DisposeElement(GameElement element) Parameters Type Name Description GameElement element The element to dispose DisposeElement3D(Element3D) Disposes the specified 3D element, freeing up resources. Declaration public void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to dispose. DisposeFont(Font) Disposes the specified font, freeing up resources. Declaration public void DisposeFont(Font font) Parameters Type Name Description Font font The font to dispose. DisposeTexture(Texture) Disposes the specified texture, freeing up resources. Declaration public void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture The texture to dispose. DrawBufferedSprite(BufferedSprite) Draws a buffered sprite in the current rendering context. Declaration public void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite The buffered sprite to draw. DrawElement3D(Element3D) Draws a 3D element in the current rendering context. Declaration public void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to draw. DrawGameElement(GameElement) Draws a game element in the current rendering context. Declaration public void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element The game element to draw. DrawLine(Vec3, Vec3, Color) Draws a line with specified starting and ending points and color in the current rendering context. Declaration public void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from The starting point of the line. Vec3 to The ending point of the line. Color color The color of the line. DrawMesh(Mesh, Color) Draws a mesh with specified mesh and color in the current rendering context. Declaration public void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh The mesh to draw. Color color The color of the mesh. DrawRect(Rect, Color) Draws a colored rectangle with specified position and size in the current rendering context. Declaration public void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. DrawRect(Rect, Color, float) Draws a colored rectangle with specified position, size, and border width in the current rendering context. Declaration public void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. float borderWidth The width of the rectangle border. DrawSkyBox(Skybox) Draws a skybox in the current rendering context. Declaration public void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox The skybox to draw. DrawSprite(Sprite) Draws a sprite in the current rendering context. Declaration public void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite The sprite to draw. DrawSprite(Vec3, Vec3, Texture) Draws a sprite with specified location, size, and texture in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Texture, TexCoords) Draws a sprite with specified location, size, texture, and texture coordinates in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawSprite(Vec3, Vec3, Color, Texture) Draws a sprite with specified location, size, color, and texture in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Draws a sprite with specified location, size, color, texture, and texture coordinates in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawString(string, Vec3, float, Font, Color) Draws a string with specified text, location, fontsize, font, and color in the current rendering context. Declaration public void DrawString(string text, Vec3 location, float fontSize, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontSize Font font The font to use for drawing the text. Color color The color of the text. DrawString(string, Vec3, float, float, Font, Color) Draws a string with specified text, location, fontsize, spacing, font, and color in the current rendering context. Declaration public void DrawString(string text, Vec3 location, float fontSize, float spacing, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontSize float spacing The spacing between characters. Font font The font to use for drawing the text. Color color The color of the text. DrawTexture(Vec3, Vec3, float, float, Texture) Draws a texture with specified location, size, and texture coordinates in the current rendering context. Declaration public void DrawTexture(Vec3 location, Vec3 size, float repeateX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location The location of the texture. Vec3 size The size of the texture. float repeateX float repeatY The vertical texture repeat factor. Texture texture The texture to draw. DrawVectors(Vec3[], Color) Draws vectors with specified positions in the current rendering context. Declaration public void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs The array of vectors to draw. Color color The color of the vectors. End() Ends the rendering process. Declaration public void End() FillRect(Rect, Color) Fills a colored rectangle with specified position and size in the current rendering context. Declaration public void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to fill. Color color The color to fill the rectangle with. FinishCanvasRendering(Scene, Canvas) Finishes the rendering for a canvas within a 2D scene. Declaration public void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to finish rendering. FinishLightmap2D(Scene, Framebuffer) Finish the lightmap 2D rendering Declaration public void FinishLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer FinishSceneRendering(Scene) Finishes the rendering for a 2D scene. Declaration public void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to finish rendering. GenerateTexture(OpenGL, Texture) Declaration public int GenerateTexture(OpenGL gl, Texture texture) Parameters Type Name Description OpenGL gl Texture texture Returns Type Description int GenerateTexture(OpenGL, Bitmap) Declaration public int GenerateTexture(OpenGL gl, Bitmap texture) Parameters Type Name Description OpenGL gl Bitmap texture Returns Type Description int GetError() Gets the last OpenGL error code. Declaration public int GetError() Returns Type Description int The error code. GetHandle() Gets the handle (pointer) to the underlying rendering context. Declaration public IntPtr GetHandle() Returns Type Description IntPtr The handle to the rendering context. Init() Initializes the rendering device. Declaration public void Init() InitElement3D(Element3D) Initializes a 3D element for rendering. Declaration public void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitGameElement(GameElement) Initializes a game element for rendering. Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Initializes a sprite for rendering. Declaration public void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Loads a font into the rendering device. Declaration public void LoadFont(Font font) Parameters Type Name Description Font font The font to load. LoadTexture(Texture) Loads a texture into the rendering device. Declaration public void LoadTexture(Texture texture) Parameters Type Name Description Texture texture The texture to load. ModelViewMatrix() Sets the current rendering matrix to the model-view matrix. Declaration public void ModelViewMatrix() PopMatrix() Pops the matrix from the top of the matrix stack. Declaration public void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Prepares the rendering for a canvas within a 2D scene. Declaration public void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to prepare rendering for. PrepareLightmap2D(Scene, Framebuffer) Prepares the render for the 2D lightmap Declaration public void PrepareLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer PrepareSceneRendering(Scene) Prepares the rendering for a 2D scene. Declaration public void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to prepare. ProjectionMatrix() Sets the current rendering matrix to the projection matrix. Declaration public void ProjectionMatrix() PushMatrix() Pushes the current matrix onto the matrix stack. Declaration public void PushMatrix() Rotate(float, Vec3) Rotates the matrix by the specified angle around the given vector. Declaration public void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle The rotation angle in degrees. Vec3 vector The vector to rotate around. SetCamera(Camera) Sets the camera for rendering. Declaration public void SetCamera(Camera camera) Parameters Type Name Description Camera camera The camera to set. SetFramebuffer(Framebuffer) Sets the active framebuffer using its ID. Declaration public void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer The ID of the framebuffer to set as active. SetFramebuffer(int) Sets the active framebuffer using the specified framebuffer object. Declaration public void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer The framebuffer to set as active. SetLightSource(Light) Sets the light source for rendering. Declaration public void SetLightSource(Light light) Parameters Type Name Description Light light The light source to set. TextureClampS() Sets the texture wrapping mode to clamp in the S direction. Declaration public void TextureClampS() TextureClampT() Sets the texture wrapping mode to clamp in the T direction. Declaration public void TextureClampT() TextureRepeatS() Sets the texture wrapping mode to repeat in the S direction. Declaration public void TextureRepeatS() TextureRepeatT() Sets the texture wrapping mode to repeat in the T direction. Declaration public void TextureRepeatT() Translate(Vec3) Translates the matrix by the specified vector. Declaration public void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector The translation vector. Translate(float, float, float) Translates the matrix by the specified coordinates. Declaration public void Translate(float x, float y, float z) Parameters Type Name Description float x The x-coordinate translation. float y The y-coordinate translation. float z The z-coordinate translation. UpdateFramebufferSize(Framebuffer, int, int) Updates the size of the specified framebuffer. Declaration public void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer The framebuffer to update. int width The new width of the framebuffer. int height The new height of the framebuffer. Viewport(float, float, float, float) Sets the viewport for rendering. Declaration public void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x The x-coordinate of the viewport. float y The y-coordinate of the viewport. float width The width of the viewport. float height The height of the viewport. Implements IRenderDevice"
  },
  "api/Genesis.Graphics.RenderDevice.Experimental.html": {
    "href": "api/Genesis.Graphics.RenderDevice.Experimental.html",
    "title": "Class Experimental | GFX",
    "keywords": "Class Experimental Inheritance object Experimental Implements IRenderDevice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.RenderDevice Assembly: Genesis.dll Syntax public class Experimental : IRenderDevice Constructors Experimental(IntPtr) Declaration public Experimental(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd Fields sceneBuffer Declaration public Framebuffer sceneBuffer Field Value Type Description Framebuffer Methods Begin() Begins the rendering process. Declaration public void Begin() BuildFramebuffer(int, int) Builds a framebuffer with the specified width and height. Declaration public Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, Texture) Builds a framebuffer with the specified width, height, and texture. Declaration public Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. Texture texture The texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. BuildFramebuffer(int, int, int) Builds a framebuffer with the specified width, height, and texture ID. Declaration public Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width The width of the framebuffer. int height The height of the framebuffer. int texture The ID of the texture associated with the framebuffer. Returns Type Description Framebuffer The built framebuffer. CreateDynamicVertexBuffer(float[]) Creates a dynamic vertex buffer with the specified float array. Declaration public int CreateDynamicVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies Returns Type Description int The ID of the created dynamic vertex buffer. CreateShader(string, ShaderProgram) Declaration public void CreateShader(string name, ShaderProgram program) Parameters Type Name Description string name ShaderProgram program CreateStaticVertexBuffer(float[]) Creates a static vertex buffer with the specified vertices. Declaration public int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The vertices for the static vertex buffer. Returns Type Description int The ID of the created static vertex buffer. Dispose() Disposes of the rendering device and releases any resources. Declaration public void Dispose() DisposeElement(GameElement) Disposes the game element Declaration public void DisposeElement(GameElement element) Parameters Type Name Description GameElement element The element to dispose DisposeElement3D(Element3D) Disposes the specified 3D element, freeing up resources. Declaration public void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to dispose. DisposeFont(Font) Disposes the specified font, freeing up resources. Declaration public void DisposeFont(Font font) Parameters Type Name Description Font font The font to dispose. DisposeShader(ShaderProgram) Declaration public void DisposeShader(ShaderProgram program) Parameters Type Name Description ShaderProgram program DisposeTexture(Texture) Disposes the specified texture, freeing up resources. Declaration public void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture The texture to dispose. DrawBufferedSprite(BufferedSprite) Draws a buffered sprite in the current rendering context. Declaration public void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite The buffered sprite to draw. DrawElement3D(Element3D) Draws a 3D element in the current rendering context. Declaration public void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element The 3D element to draw. DrawGameElement(GameElement) Draws a game element in the current rendering context. Declaration public void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element The game element to draw. DrawLine(Vec3, Vec3, Color) Draws a line with specified starting and ending points and color in the current rendering context. Declaration public void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from The starting point of the line. Vec3 to The ending point of the line. Color color The color of the line. DrawMesh(Mesh, Color) Draws a mesh with specified mesh and color in the current rendering context. Declaration public void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh The mesh to draw. Color color The color of the mesh. DrawParticleEmitter(ParticleEmitter) Declaration public void DrawParticleEmitter(ParticleEmitter emitter) Parameters Type Name Description ParticleEmitter emitter DrawRect(Rect, Color) Draws a colored rectangle with specified position and size in the current rendering context. Declaration public void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. DrawRect(Rect, Color, float) Draws a colored rectangle with specified position, size, and border width in the current rendering context. Declaration public void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect The rectangle to draw. Color color The color of the rectangle. float borderWidth The width of the rectangle border. DrawSkyBox(Skybox) Draws a skybox in the current rendering context. Declaration public void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox The skybox to draw. DrawSprite(Sprite) Draws a sprite in the current rendering context. Declaration public void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite The sprite to draw. DrawSprite(Vec3, Vec3, Texture) Draws a sprite with specified location, size, and texture in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Texture, TexCoords) Draws a sprite with specified location, size, texture, and texture coordinates in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawSprite(Vec3, Vec3, Color, Texture) Draws a sprite with specified location, size, color, and texture in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Draws a sprite with specified location, size, color, texture, and texture coordinates in the current rendering context. Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location The location of the sprite. Vec3 size The size of the sprite. Color color The color of the sprite. Texture texture The texture of the sprite. TexCoords texCoords The texture coordinates of the sprite. DrawString(string, Vec3, float, Font, Color) Draws a string with specified text, location, fontsize, font, and color in the current rendering context. Declaration public void DrawString(string text, Vec3 location, float fontSize, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontSize Font font The font to use for drawing the text. Color color The color of the text. DrawString(string, Vec3, float, float, Font, Color) Draws a string with specified text, location, fontsize, spacing, font, and color in the current rendering context. Declaration public void DrawString(string text, Vec3 location, float fontSize, float spacing, Font font, Color color) Parameters Type Name Description string text The text to draw. Vec3 location The location of the text. float fontSize float spacing The spacing between characters. Font font The font to use for drawing the text. Color color The color of the text. DrawTexture(Vec3, Vec3, float, float, Texture) Draws a texture with specified location, size, and texture coordinates in the current rendering context. Declaration public void DrawTexture(Vec3 location, Vec3 size, float repeateX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location The location of the texture. Vec3 size The size of the texture. float repeateX float repeatY The vertical texture repeat factor. Texture texture The texture to draw. DrawVectors(Vec3[], Color) Draws vectors with specified positions in the current rendering context. Declaration public void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs The array of vectors to draw. Color color The color of the vectors. End() Ends the rendering process. Declaration public void End() FillRect(Rect, Color) Fills a colored rectangle with specified position and size in the current rendering context. Declaration public void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect The rectangle to fill. Color color The color to fill the rectangle with. FinishCanvasRendering(Scene, Canvas) Finishes the rendering for a canvas within a 2D scene. Declaration public void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to finish rendering. FinishLightmap2D(Scene, Framebuffer) Finish the lightmap 2D rendering Declaration public void FinishLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer FinishSceneRendering(Scene) Finishes the rendering for a 2D scene. Declaration public void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to finish rendering. GenerateTexture(OpenGL, Texture) Declaration public int GenerateTexture(OpenGL gl, Texture texture) Parameters Type Name Description OpenGL gl Texture texture Returns Type Description int GenerateTexture(OpenGL, Bitmap) Declaration public int GenerateTexture(OpenGL gl, Bitmap texture) Parameters Type Name Description OpenGL gl Bitmap texture Returns Type Description int GetError() Gets the last OpenGL error code. Declaration public int GetError() Returns Type Description int The error code. GetHandle() Gets the handle (pointer) to the underlying rendering context. Declaration public IntPtr GetHandle() Returns Type Description IntPtr The handle to the rendering context. GetRenderer() Declaration public OpenGL GetRenderer() Returns Type Description OpenGL GetShaderProgram(ShaderProgram) Declaration public ShaderProgram GetShaderProgram(ShaderProgram refProgram) Parameters Type Name Description ShaderProgram refProgram Returns Type Description ShaderProgram Init() Initializes the rendering device. Declaration public void Init() InitElement3D(Element3D) Initializes a 3D element for rendering. Declaration public void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitGameElement(GameElement) Initializes a game element for rendering. Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitNormalMap(string) Declaration public int InitNormalMap(string path) Parameters Type Name Description string path Returns Type Description int InitSprite(Sprite) Initializes a sprite for rendering. Declaration public void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite InitTexture(string) Declaration public int InitTexture(string path) Parameters Type Name Description string path Returns Type Description int LoadFont(Font) Loads a font into the rendering device. Declaration public void LoadFont(Font font) Parameters Type Name Description Font font The font to load. LoadTexture(Texture) Loads a texture into the rendering device. Declaration public void LoadTexture(Texture texture) Parameters Type Name Description Texture texture The texture to load. ModelViewMatrix() Sets the current rendering matrix to the model-view matrix. Declaration public void ModelViewMatrix() PopMatrix() Pops the matrix from the top of the matrix stack. Declaration public void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Prepares the rendering for a canvas within a 2D scene. Declaration public void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The 2D scene containing the canvas. Canvas canvas The canvas to prepare rendering for. PrepareLightmap2D(Scene, Framebuffer) Prepares the render for the 2D lightmap Declaration public void PrepareLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer PrepareSceneRendering(Scene) Prepares the rendering for a 2D scene. Declaration public void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene The 2D scene to prepare. ProjectionMatrix() Sets the current rendering matrix to the projection matrix. Declaration public void ProjectionMatrix() PushMatrix() Pushes the current matrix onto the matrix stack. Declaration public void PushMatrix() Rotate(float, Vec3) Rotates the matrix by the specified angle around the given vector. Declaration public void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle The rotation angle in degrees. Vec3 vector The vector to rotate around. SetCamera(Camera) Sets the camera for rendering. Declaration public void SetCamera(Camera camera) Parameters Type Name Description Camera camera The camera to set. SetFramebuffer(Framebuffer) Sets the active framebuffer using its ID. Declaration public void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer The ID of the framebuffer to set as active. SetFramebuffer(int) Sets the active framebuffer using the specified framebuffer object. Declaration public void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer The framebuffer to set as active. SetLightSource(Light) Sets the light source for rendering. Declaration public void SetLightSource(Light light) Parameters Type Name Description Light light The light source to set. TextureClampS() Sets the texture wrapping mode to clamp in the S direction. Declaration public void TextureClampS() TextureClampT() Sets the texture wrapping mode to clamp in the T direction. Declaration public void TextureClampT() TextureRepeatS() Sets the texture wrapping mode to repeat in the S direction. Declaration public void TextureRepeatS() TextureRepeatT() Sets the texture wrapping mode to repeat in the T direction. Declaration public void TextureRepeatT() Translate(Vec3) Translates the matrix by the specified vector. Declaration public void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector The translation vector. Translate(float, float, float) Translates the matrix by the specified coordinates. Declaration public void Translate(float x, float y, float z) Parameters Type Name Description float x The x-coordinate translation. float y The y-coordinate translation. float z The z-coordinate translation. UpdateFramebufferSize(Framebuffer, int, int) Updates the size of the specified framebuffer. Declaration public void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer The framebuffer to update. int width The new width of the framebuffer. int height The new height of the framebuffer. Viewport(float, float, float, float) Sets the viewport for rendering. Declaration public void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x The x-coordinate of the viewport. float y The y-coordinate of the viewport. float width The width of the viewport. float height The height of the viewport. Implements IRenderDevice"
  },
  "api/Genesis.Graphics.RenderDevice.GLRenderer.html": {
    "href": "api/Genesis.Graphics.RenderDevice.GLRenderer.html",
    "title": "Class GLRenderer | GFX",
    "keywords": "Class GLRenderer Inheritance object GLRenderer Implements IRenderDevice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.RenderDevice Assembly: Genesis.dll Syntax public class GLRenderer : IRenderDevice Constructors GLRenderer(IntPtr) Declaration public GLRenderer(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd Fields sceneBuffer Declaration public Framebuffer sceneBuffer Field Value Type Description Framebuffer Methods Begin() Beginn to draw Declaration public void Begin() BuildFramebuffer(int, int) Creates a new framebuffer Declaration public Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width int height Returns Type Description Framebuffer BuildFramebuffer(int, int, Texture) Creates a new framebuffer Declaration public Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width int height Texture texture Returns Type Description Framebuffer BuildFramebuffer(int, int, int) Creates a new framebuffer Declaration public Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width int height int texture Returns Type Description Framebuffer BuildShape(Shape) Creates an buffer for the shape Declaration public void BuildShape(Shape shape) Parameters Type Name Description Shape shape CreateDynamicVertexBuffer(float[]) Creates a dynamic vertex buffer in OpenGL and initializes it with the specified vertices. Dynamic buffers are suitable for frequently changing data, like dynamic vertex updates. Declaration public int CreateDynamicVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The array of vertices to be stored in the buffer. Returns Type Description int The OpenGL handle (ID) of the created dynamic vertex buffer. CreateStaticVertexBuffer(float[]) Creates a static vertex buffer in OpenGL and initializes it with the specified vertices. Static buffers are suitable for infrequently changing data, like static geometry. Declaration public int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The array of vertices to be stored in the buffer. Returns Type Description int The OpenGL handle (ID) of the created static vertex buffer. Dispose() Disposes the render device Declaration public void Dispose() DisposeElement(GameElement) Disposes the element data from the gpu Declaration public void DisposeElement(GameElement element) Parameters Type Name Description GameElement element The element to dispose DisposeElement3D(Element3D) Dispose the 3D element Declaration public void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element DisposeFont(Font) Disposes the font Declaration public void DisposeFont(Font font) Parameters Type Name Description Font font DisposeShader(ShaderProgram) Deletes the shader program Declaration public void DisposeShader(ShaderProgram program) Parameters Type Name Description ShaderProgram program DisposeTexture(Texture) Disposes the texture Declaration public void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture DrawBufferedSprite(BufferedSprite) Draws a buffered sprite in the current rendering context. Declaration public void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite The buffered sprite to draw. DrawElement3D(Element3D) Draws an 3D element within the scene Declaration public void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element DrawGameElement(GameElement) Renders the GameElement Declaration public void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element DrawLine(Vec3, Vec3, Color) Draws a line Declaration public void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from Vec3 to Color color DrawMesh(Mesh, Color) Draws a mesh Declaration public void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh Color color DrawParticleEmitter(ParticleEmitter) Draws the particle emitter Declaration public void DrawParticleEmitter(ParticleEmitter emitter) Parameters Type Name Description ParticleEmitter emitter DrawRect(Rect, Color) Draws a rect with no fill Declaration public void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color DrawRect(Rect, Color, float) Draws a rect with no fill Declaration public void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect Color color float borderWidth DrawSkyBox(Skybox) Draws an skybox Declaration public void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox DrawSprite(Sprite) Renders a sprite with modern gl Declaration public void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite DrawSprite(Vec3, Vec3, Texture) Draws a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Texture texture DrawSprite(Vec3, Vec3, Texture, TexCoords) Draws a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Texture texture TexCoords texCoords DrawSprite(Vec3, Vec3, Color, Texture) Renders a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Draws a Sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture TexCoords texCoords DrawString(string, Vec3, float, Font, Color) Renders a String Declaration public void DrawString(string text, Vec3 location, float fontSize, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize Font font Color color DrawString(string, Vec3, float, float, Font, Color) Renders a string Declaration public void DrawString(string text, Vec3 location, float fontSize, float spacing, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize float spacing Font font Color color DrawTexture(Vec3, Vec3, float, float, Texture) Draws a texture Declaration public void DrawTexture(Vec3 location, Vec3 size, float repeateX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location Vec3 size float repeateX float repeatY Texture texture DrawVectors(Vec3[], Color) Draws the vector array Declaration public void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs Color color End() Ends the rendering Declaration public void End() FillRect(Rect, Color) Fills a rectangle with the given color. LegacyGL Declaration public void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color FinishCanvasRendering(Scene, Canvas) Finish the canvas rendering Declaration public void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The scene from the canvas Canvas canvas The canvas to render FinishLightmap2D(Scene, Framebuffer) Finish the lightmap 2D rendering Declaration public void FinishLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer FinishSceneRendering(Scene) Finish the scene rendering Declaration public void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene The scene which getted rendered GenerateTexture(OpenGL, Texture) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Texture texture) Parameters Type Name Description OpenGL gl Texture texture Returns Type Description int GenerateTexture(OpenGL, Bitmap) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Bitmap texture) Parameters Type Name Description OpenGL gl Bitmap texture Returns Type Description int GetError() Returns an error code from the render device Declaration public int GetError() Returns Type Description int GetHandle() Returns the handle of the render target Declaration public IntPtr GetHandle() Returns Type Description IntPtr GetRenderer() Returns the native renderer Declaration public OpenGL GetRenderer() Returns Type Description OpenGL GetShaderProgram(ShaderProgram) Returns the shader programm with the typeof the refProgram. Returns null is no program found Declaration public ShaderProgram GetShaderProgram(ShaderProgram refProgram) Parameters Type Name Description ShaderProgram refProgram Returns Type Description ShaderProgram Init() Initial the moderngl render device Declaration public void Init() InitElement3D(Element3D) Inital an 3D element Declaration public void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitElement3DNormalMap(string) Declaration public int InitElement3DNormalMap(string path) Parameters Type Name Description string path Returns Type Description int InitElement3DTexture(string) Declaration public int InitElement3DTexture(string path) Parameters Type Name Description string path Returns Type Description int InitGameElement(GameElement) Inits the game element Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Initial the sprite Declaration public void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Loads the the font Declaration public void LoadFont(Font font) Parameters Type Name Description Font font LoadShader(string, ShaderProgram) Declaration public void LoadShader(string name, ShaderProgram program) Parameters Type Name Description string name ShaderProgram program LoadTexture(Texture) Loads a texture into the vram Declaration public void LoadTexture(Texture texture) Parameters Type Name Description Texture texture ModelViewMatrix() This function will not be used within this render device Declaration public void ModelViewMatrix() PopMatrix() This function will not be used within this render device Declaration public void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Prepares the renderer for the canvas rendering Declaration public void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene The scene from the canvas Canvas canvas The canvas to render PrepareLightmap2D(Scene, Framebuffer) Prepares the render for the 2D lightmap Declaration public void PrepareLightmap2D(Scene scene, Framebuffer framebuffer) Parameters Type Name Description Scene scene Framebuffer framebuffer PrepareSceneRendering(Scene) Prepares the renderer for scene rendering Declaration public void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene The scene to render ProjectionMatrix() This function will not be used within this render device Declaration public void ProjectionMatrix() PushMatrix() This function will not be used within this render device Declaration public void PushMatrix() Rotate(float, Vec3) This function will not be used within this render device Declaration public void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle Vec3 vector SetCamera(Camera) Set the Projection and view matrices Declaration public void SetCamera(Camera camera) Parameters Type Name Description Camera camera SetFramebuffer(Framebuffer) Sets an framebuffer as active render target Declaration public void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer The framebuffer for the rendering SetFramebuffer(int) Sets an framebuffer as active render target Declaration public void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer The framebuffer id for the rendering SetLightSource(Light) Sets an Lightsource Declaration public void SetLightSource(Light light) Parameters Type Name Description Light light TextureClampS() Sets the texture clampS Declaration public void TextureClampS() TextureClampT() Sets the texture clampT Declaration public void TextureClampT() TextureRepeatS() Sets the texture repeatS Declaration public void TextureRepeatS() TextureRepeatT() Sets the texture repeatT Declaration public void TextureRepeatT() Translate(Vec3) This function will not be used within this render device Declaration public void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector Translate(float, float, float) This function will not be used within this render device Declaration public void Translate(float x, float y, float z) Parameters Type Name Description float x float y float z UpdateFramebufferSize(Framebuffer, int, int) Update the framebuffer size Declaration public void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer int width int height Viewport(float, float, float, float) Sets the viewport for the rendering Declaration public void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Implements IRenderDevice"
  },
  "api/Genesis.Graphics.RenderDevice.html": {
    "href": "api/Genesis.Graphics.RenderDevice.html",
    "title": "Namespace Genesis.Graphics.RenderDevice | GFX",
    "keywords": "Namespace Genesis.Graphics.RenderDevice Classes ClassicGL Experimental GLRenderer"
  },
  "api/Genesis.Graphics.Shader.html": {
    "href": "api/Genesis.Graphics.Shader.html",
    "title": "Class Shader | GFX",
    "keywords": "Class Shader Represents a shader used in graphics rendering. Inheritance object Shader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Shader Constructors Shader() Default constructor for the Shader class. Declaration public Shader() Shader(string) Constructor for the Shader class that initializes the source code. Declaration public Shader(string source) Parameters Type Name Description string source The source code of the shader. Properties ShaderID Gets or sets the ID of the shader. Declaration public int ShaderID { get; set; } Property Value Type Description int Source Gets or sets the source code of the shader. Declaration public string Source { get; set; } Property Value Type Description string Methods FromFile(string) Creates a Shader object by reading the source code from a file. Declaration public static Shader FromFile(string filename) Parameters Type Name Description string filename The path to the file containing the shader source code. Returns Type Description Shader A Shader object with the source code read from the file."
  },
  "api/Genesis.Graphics.ShaderProgram.html": {
    "href": "api/Genesis.Graphics.ShaderProgram.html",
    "title": "Class ShaderProgram | GFX",
    "keywords": "Class ShaderProgram Represents a shader program consisting of a vertex shader and a fragment shader. Inheritance object ShaderProgram AnimatedModelShader BasicShader DiffuseLightning DiffuseNormalLightning DiffuseNormalShader DiffuseShader DiffuseSolidShader FXScreenSpaceShadowShader Light2DShader MVPRectShader MVPShader MVPSolidShader ParticleShader ScreenShader SkyboxShader SpriteShader TerrainShader WireframeShader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class ShaderProgram Constructors ShaderProgram() Default constructor for the ShaderProgram class. Declaration public ShaderProgram() Properties FragmentShader Gets or sets the fragment shader associated with the program. Declaration public Shader FragmentShader { get; set; } Property Value Type Description Shader ProgramID Gets or sets the ID of the shader program. Declaration public int ProgramID { get; set; } Property Value Type Description int VertexShader Gets or sets the vertex shader associated with the program. Declaration public Shader VertexShader { get; set; } Property Value Type Description Shader"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.AnimatedModelShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.AnimatedModelShader.html",
    "title": "Class AnimatedModelShader | GFX",
    "keywords": "Class AnimatedModelShader Inheritance object ShaderProgram AnimatedModelShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class AnimatedModelShader : ShaderProgram Constructors AnimatedModelShader() Declaration public AnimatedModelShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.BasicShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.BasicShader.html",
    "title": "Class BasicShader | GFX",
    "keywords": "Class BasicShader Inheritance object ShaderProgram BasicShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class BasicShader : ShaderProgram Constructors BasicShader() Declaration public BasicShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.DiffuseLightning.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.DiffuseLightning.html",
    "title": "Class DiffuseLightning | GFX",
    "keywords": "Class DiffuseLightning Inheritance object ShaderProgram DiffuseLightning Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseLightning : ShaderProgram Constructors DiffuseLightning() Declaration public DiffuseLightning()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalLightning.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalLightning.html",
    "title": "Class DiffuseNormalLightning | GFX",
    "keywords": "Class DiffuseNormalLightning Inheritance object ShaderProgram DiffuseNormalLightning Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseNormalLightning : ShaderProgram Constructors DiffuseNormalLightning() Declaration public DiffuseNormalLightning()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalShader.html",
    "title": "Class DiffuseNormalShader | GFX",
    "keywords": "Class DiffuseNormalShader Inheritance object ShaderProgram DiffuseNormalShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseNormalShader : ShaderProgram Constructors DiffuseNormalShader() Declaration public DiffuseNormalShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.DiffuseShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.DiffuseShader.html",
    "title": "Class DiffuseShader | GFX",
    "keywords": "Class DiffuseShader Inheritance object ShaderProgram DiffuseShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseShader : ShaderProgram Constructors DiffuseShader() Declaration public DiffuseShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.DiffuseSolidShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.DiffuseSolidShader.html",
    "title": "Class DiffuseSolidShader | GFX",
    "keywords": "Class DiffuseSolidShader Inheritance object ShaderProgram DiffuseSolidShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseSolidShader : ShaderProgram Constructors DiffuseSolidShader() Declaration public DiffuseSolidShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.FXScreenSpaceShadowShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.FXScreenSpaceShadowShader.html",
    "title": "Class FXScreenSpaceShadowShader | GFX",
    "keywords": "Class FXScreenSpaceShadowShader Inheritance object ShaderProgram FXScreenSpaceShadowShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class FXScreenSpaceShadowShader : ShaderProgram Constructors FXScreenSpaceShadowShader() Declaration public FXScreenSpaceShadowShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.Light2DShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.Light2DShader.html",
    "title": "Class Light2DShader | GFX",
    "keywords": "Class Light2DShader Inheritance object ShaderProgram Light2DShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class Light2DShader : ShaderProgram Constructors Light2DShader() Declaration public Light2DShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.MVPRectShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.MVPRectShader.html",
    "title": "Class MVPRectShader | GFX",
    "keywords": "Class MVPRectShader Inheritance object ShaderProgram MVPRectShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPRectShader : ShaderProgram Constructors MVPRectShader() Declaration public MVPRectShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.MVPShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.MVPShader.html",
    "title": "Class MVPShader | GFX",
    "keywords": "Class MVPShader Inheritance object ShaderProgram MVPShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPShader : ShaderProgram Constructors MVPShader() Declaration public MVPShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.MVPSolidShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.MVPSolidShader.html",
    "title": "Class MVPSolidShader | GFX",
    "keywords": "Class MVPSolidShader Inheritance object ShaderProgram MVPSolidShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPSolidShader : ShaderProgram Constructors MVPSolidShader() Declaration public MVPSolidShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.ParticleShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.ParticleShader.html",
    "title": "Class ParticleShader | GFX",
    "keywords": "Class ParticleShader Inheritance object ShaderProgram ParticleShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class ParticleShader : ShaderProgram Constructors ParticleShader() Declaration public ParticleShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.ScreenShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.ScreenShader.html",
    "title": "Class ScreenShader | GFX",
    "keywords": "Class ScreenShader Inheritance object ShaderProgram ScreenShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class ScreenShader : ShaderProgram Constructors ScreenShader() Declaration public ScreenShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.SkyboxShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.SkyboxShader.html",
    "title": "Class SkyboxShader | GFX",
    "keywords": "Class SkyboxShader Inheritance object ShaderProgram SkyboxShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class SkyboxShader : ShaderProgram Constructors SkyboxShader() Declaration public SkyboxShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.SpriteShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.SpriteShader.html",
    "title": "Class SpriteShader | GFX",
    "keywords": "Class SpriteShader Inheritance object ShaderProgram SpriteShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class SpriteShader : ShaderProgram Constructors SpriteShader() Declaration public SpriteShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.TerrainShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.TerrainShader.html",
    "title": "Class TerrainShader | GFX",
    "keywords": "Class TerrainShader Inheritance object ShaderProgram TerrainShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class TerrainShader : ShaderProgram Constructors TerrainShader() Declaration public TerrainShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.WireframeShader.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.WireframeShader.html",
    "title": "Class WireframeShader | GFX",
    "keywords": "Class WireframeShader Inheritance object ShaderProgram WireframeShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class WireframeShader : ShaderProgram Constructors WireframeShader() Declaration public WireframeShader()"
  },
  "api/Genesis.Graphics.Shaders.OpenGL.html": {
    "href": "api/Genesis.Graphics.Shaders.OpenGL.html",
    "title": "Namespace Genesis.Graphics.Shaders.OpenGL | GFX",
    "keywords": "Namespace Genesis.Graphics.Shaders.OpenGL Classes AnimatedModelShader BasicShader DiffuseLightning DiffuseNormalLightning DiffuseNormalShader DiffuseShader DiffuseSolidShader FXScreenSpaceShadowShader Light2DShader MVPRectShader MVPShader MVPSolidShader ParticleShader ScreenShader SkyboxShader SpriteShader TerrainShader WireframeShader"
  },
  "api/Genesis.Graphics.Shapes.BufferedSpriteShape.html": {
    "href": "api/Genesis.Graphics.Shapes.BufferedSpriteShape.html",
    "title": "Class BufferedSpriteShape | GFX",
    "keywords": "Class BufferedSpriteShape Represents a shape for a buffered sprite in a graphics context. Inheritance object Shape BufferedSpriteShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class BufferedSpriteShape : Shape Constructors BufferedSpriteShape() Declaration public BufferedSpriteShape() Methods GetShape() Gets the vertices defining the buffered sprite shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices, colors, and texture coordinates of the buffered sprite. Overrides Shape.GetShape() Remarks The vertices are defined in groups of three for each triangle face: Vertex positions (x, y, z) Colors (r, g, b) Texture coordinates (u, v)"
  },
  "api/Genesis.Graphics.Shapes.FrameShape.html": {
    "href": "api/Genesis.Graphics.Shapes.FrameShape.html",
    "title": "Class FrameShape | GFX",
    "keywords": "Class FrameShape Represents a shape that defines a frame or rectangle. Inheritance object Shape FrameShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class FrameShape : Shape Constructors FrameShape() Declaration public FrameShape() Methods GetShape() Gets the vertices defining the frame shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices and texture coordinates. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Vertex positions (x, y, z) Texture coordinates (u, v)"
  },
  "api/Genesis.Graphics.Shapes.GlypheShape.html": {
    "href": "api/Genesis.Graphics.Shapes.GlypheShape.html",
    "title": "Class GlypheShape | GFX",
    "keywords": "Class GlypheShape Represents a shape that defines a glyphe (glyph or character). Inheritance object Shape GlypheShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class GlypheShape : Shape Constructors GlypheShape() Declaration public GlypheShape() Methods GetShape() Gets the vertices defining the glyphe shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices, colors, and texture coordinates. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Vertex positions (x, y, z) Colors (r, g, b) Texture coordinates (u, v)"
  },
  "api/Genesis.Graphics.Shapes.Light2DShape.html": {
    "href": "api/Genesis.Graphics.Shapes.Light2DShape.html",
    "title": "Class Light2DShape | GFX",
    "keywords": "Class Light2DShape Inheritance object Shape Light2DShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class Light2DShape : Shape Constructors Light2DShape() Declaration public Light2DShape() Methods GetShape() Gets the vertices defining the shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices of the shape. Overrides Shape.GetShape()"
  },
  "api/Genesis.Graphics.Shapes.LineShape.html": {
    "href": "api/Genesis.Graphics.Shapes.LineShape.html",
    "title": "Class LineShape | GFX",
    "keywords": "Class LineShape Represents a shape that defines a line segment. Inheritance object Shape LineShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class LineShape : Shape Constructors LineShape() Declaration public LineShape() Methods GetShape() Gets the vertices defining the line segment shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the start and end points of the line. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Start point (x, y, z) End point (x, y, z)"
  },
  "api/Genesis.Graphics.Shapes.PlaneShape.html": {
    "href": "api/Genesis.Graphics.Shapes.PlaneShape.html",
    "title": "Class PlaneShape | GFX",
    "keywords": "Class PlaneShape Represents a shape that defines a plane in three-dimensional space. Inheritance object Shape PlaneShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class PlaneShape : Shape Constructors PlaneShape() Declaration public PlaneShape() Methods GetShape() Gets the vertices defining the plane shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices, colors, and texture coordinates. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Vertex positions (x, y, z) Colors (r, g, b) Texture coordinates (u, v)"
  },
  "api/Genesis.Graphics.Shapes.QubeShape.html": {
    "href": "api/Genesis.Graphics.Shapes.QubeShape.html",
    "title": "Class QubeShape | GFX",
    "keywords": "Class QubeShape Represents a shape that defines a cube in three-dimensional space. Inheritance object Shape QubeShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class QubeShape : Shape Constructors QubeShape() Declaration public QubeShape() Methods GetNormals() Gets the normals defining the cube shape. Declaration public float[] GetNormals() Returns Type Description float[] An array of floating-point values representing the normals of the cube faces. Remarks The normals are defined in groups of three for each triangle face. GetShape() Gets the vertices defining the cube shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices of the cube. Overrides Shape.GetShape() Remarks The vertices are defined in groups of three for each triangle face. GetTextureCoordinates() Gets the texture coordinates defining the cube shape. Declaration public float[] GetTextureCoordinates() Returns Type Description float[] An array of floating-point values representing the texture coordinates of the cube. Remarks The texture coordinates are defined in groups of two for each vertex."
  },
  "api/Genesis.Graphics.Shapes.RectShape.html": {
    "href": "api/Genesis.Graphics.Shapes.RectShape.html",
    "title": "Class RectShape | GFX",
    "keywords": "Class RectShape Represents a shape that defines a rectangle in two-dimensional space. Inheritance object Shape RectShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class RectShape : Shape Constructors RectShape() Declaration public RectShape() Methods GetShape() Gets the vertices defining the rectangle shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices and colors of the rectangle. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Vertex positions (x, y, z) Colors (r, g, b)"
  },
  "api/Genesis.Graphics.Shapes.Shape.html": {
    "href": "api/Genesis.Graphics.Shapes.Shape.html",
    "title": "Class Shape | GFX",
    "keywords": "Class Shape Represents an abstract base class for defining shapes in a graphics context. Inheritance object Shape BufferedSpriteShape FrameShape GlypheShape Light2DShape LineShape PlaneShape QubeShape RectShape SpriteShape Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public abstract class Shape Constructors Shape() Declaration protected Shape() Properties vbo Gets or sets the Vertex Buffer Object (VBO) associated with the shape. Declaration public int vbo { get; set; } Property Value Type Description int Methods GetShape() Gets the vertices defining the shape. Declaration public abstract float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices of the shape."
  },
  "api/Genesis.Graphics.Shapes.SpriteShape.html": {
    "href": "api/Genesis.Graphics.Shapes.SpriteShape.html",
    "title": "Class SpriteShape | GFX",
    "keywords": "Class SpriteShape Represents a shape that can be rendered as a sprite. Inheritance object Shape SpriteShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class SpriteShape : Shape Constructors SpriteShape() Declaration public SpriteShape() Methods GetShape() Gets the vertices defining the sprite shape. Declaration public override float[] GetShape() Returns Type Description float[] An array of floating-point values representing the vertices, colors, and texture coordinates. Overrides Shape.GetShape() Remarks The vertices are defined in the following order: Vertex positions (x, y, z) Colors (r, g, b) Texture coordinates (u, v)"
  },
  "api/Genesis.Graphics.Shapes.html": {
    "href": "api/Genesis.Graphics.Shapes.html",
    "title": "Namespace Genesis.Graphics.Shapes | GFX",
    "keywords": "Namespace Genesis.Graphics.Shapes Classes BufferedSpriteShape Represents a shape for a buffered sprite in a graphics context. FrameShape Represents a shape that defines a frame or rectangle. GlypheShape Represents a shape that defines a glyphe (glyph or character). Light2DShape LineShape Represents a shape that defines a line segment. PlaneShape Represents a shape that defines a plane in three-dimensional space. QubeShape Represents a shape that defines a cube in three-dimensional space. RectShape Represents a shape that defines a rectangle in two-dimensional space. Shape Represents an abstract base class for defining shapes in a graphics context. SpriteShape Represents a shape that can be rendered as a sprite."
  },
  "api/Genesis.Graphics.TexCoords.html": {
    "href": "api/Genesis.Graphics.TexCoords.html",
    "title": "Class TexCoords | GFX",
    "keywords": "Class TexCoords Represents values for texture coordinates defining a rectangle. Inheritance object TexCoords Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class TexCoords Constructors TexCoords() Default constructor for the TexCoords class. Declaration public TexCoords() TexCoords(Vec3, Vec3, Vec3, Vec3) Constructor for the TexCoords class that initializes the texture coordinates. Declaration public TexCoords(Vec3 topLeft, Vec3 topRight, Vec3 bottomRight, Vec3 bottomLeft) Parameters Type Name Description Vec3 topLeft The texture coordinate for the top-left corner. Vec3 topRight The texture coordinate for the top-right corner. Vec3 bottomRight The texture coordinate for the bottom-right corner. Vec3 bottomLeft The texture coordinate for the bottom-left corner. Properties BottomLeft Gets or sets the texture coordinate for the bottom-left corner. Declaration public Vec3 BottomLeft { get; set; } Property Value Type Description Vec3 BottomRight Gets or sets the texture coordinate for the bottom-right corner. Declaration public Vec3 BottomRight { get; set; } Property Value Type Description Vec3 TopLeft Gets or sets the texture coordinate for the top-left corner. Declaration public Vec3 TopLeft { get; set; } Property Value Type Description Vec3 TopRight Gets or sets the texture coordinate for the top-right corner. Declaration public Vec3 TopRight { get; set; } Property Value Type Description Vec3 Methods GetFloats() Gets an array of floats representing the texture coordinates in the order (X, Y). Declaration public float[] GetFloats() Returns Type Description float[] An array of floats representing the texture coordinates."
  },
  "api/Genesis.Graphics.Texture.html": {
    "href": "api/Genesis.Graphics.Texture.html",
    "title": "Class Texture | GFX",
    "keywords": "Class Texture Represents a texture used in graphics rendering. Inheritance object Texture Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Texture Constructors Texture(Bitmap) Constructor for the Texture class that initializes the texture with a Bitmap. Declaration public Texture(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap The Bitmap representing the texture. Texture(int) Constructor for the Texture class that initializes the texture with a render ID. Declaration public Texture(int RenderID) Parameters Type Name Description int RenderID Texture(string, Bitmap) Constructor for the Texture class that initializes the texture with a name and a Bitmap. Declaration public Texture(string name, Bitmap bitnmap) Parameters Type Name Description string name The name of the texture. Bitmap bitnmap Properties Bitnmap Gets or sets the Bitmap representing the texture. Declaration public Bitmap Bitnmap { get; set; } Property Value Type Description Bitmap Name Gets or sets the name of the texture. Declaration public string Name { get; set; } Property Value Type Description string RenderID Gets or sets the render ID associated with the texture. Declaration public int RenderID { get; set; } Property Value Type Description int"
  },
  "api/Genesis.Graphics.Viewport.html": {
    "href": "api/Genesis.Graphics.Viewport.html",
    "title": "Class Viewport | GFX",
    "keywords": "Class Viewport Represents a viewport used in graphics rendering. Inheritance object Viewport Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Viewport Constructors Viewport() Default constructor for the Viewport class. Declaration public Viewport() Viewport(float, float) Constructor for the Viewport class that initializes the viewport with a specified width and height. Declaration public Viewport(float width, float height) Parameters Type Name Description float width The width of the viewport. float height The height of the viewport. Viewport(float, float, float, float) Constructor for the Viewport class that initializes the viewport with a specified X-coordinate, Y-coordinate, width, and height. Declaration public Viewport(float x, float y, float width, float height) Parameters Type Name Description float x The X-coordinate of the viewport. float y The Y-coordinate of the viewport. float width The width of the viewport. float height The height of the viewport. Properties Height Gets or sets the height of the viewport. Declaration public float Height { get; set; } Property Value Type Description float Width Gets or sets the width of the viewport. Declaration public float Width { get; set; } Property Value Type Description float X Gets or sets the X-coordinate of the viewport. Declaration public float X { get; set; } Property Value Type Description float Y Gets or sets the Y-coordinate of the viewport. Declaration public float Y { get; set; } Property Value Type Description float Methods GetSize() Gets the size of the viewport as a System.Drawing.Size. Declaration public Size GetSize() Returns Type Description Size The size of the viewport as a System.Drawing.Size. GetSizeF() Gets the size of the viewport as a System.Drawing.SizeF. Declaration public SizeF GetSizeF() Returns Type Description SizeF The size of the viewport as a System.Drawing.SizeF. SetNewViewport(float, float) Sets a new width and height for the viewport. Declaration public void SetNewViewport(float width, float height) Parameters Type Name Description float width The new width of the viewport. float height The new height of the viewport."
  },
  "api/Genesis.Graphics.html": {
    "href": "api/Genesis.Graphics.html",
    "title": "Namespace Genesis.Graphics | GFX",
    "keywords": "Namespace Genesis.Graphics Classes Animation Represents an animation definition with details such as name, starting cell, row, and number of frames. Camera Represents a camera in a graphics context for rendering 2D scenes. Face Represents a face in a 3D model with vertices, texture coordinates, and optional properties. Font Represents a font with information about glyph size, spacing, and glyph atlas. Framebuffer Represents a framebuffer object in graphics rendering. Glyphe Represents a glyph in a font texture atlas. Material Class representing a 3D material and managing its properties. Mesh Class representing a 3D mesh, including its geometry and material information. PerspectiveCamera Represents a perspective camera derived from the Camera class. Shader Represents a shader used in graphics rendering. ShaderProgram Represents a shader program consisting of a vertex shader and a fragment shader. TexCoords Represents values for texture coordinates defining a rectangle. Texture Represents a texture used in graphics rendering. Viewport Represents a viewport used in graphics rendering. Structs MaterialBuffer Struktur zur Darstellung von Materialdaten, die in einem Material-Buffer gespeichert werden. Interfaces IRenderDevice Interface for a rendering device that handles graphics rendering operations. Enums CameraType"
  },
  "api/Genesis.Math.Matrix4x4.html": {
    "href": "api/Genesis.Math.Matrix4x4.html",
    "title": "Class Matrix4x4 | GFX",
    "keywords": "Class Matrix4x4 Inheritance object Matrix4x4 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Matrix4x4 Constructors Matrix4x4() Declaration public Matrix4x4() Properties this[int, int] Declaration public float this[int row, int col] { get; set; } Parameters Type Name Description int row int col Property Value Type Description float Methods Identity() Declaration public static Matrix4x4 Identity() Returns Type Description Matrix4x4 LookAt(Vec3, Vec3, Vec3) Declaration public static Matrix4x4 LookAt(Vec3 eye, Vec3 target, Vec3 up) Parameters Type Name Description Vec3 eye Vec3 target Vec3 up Returns Type Description Matrix4x4 Multiply(Matrix4x4) Declaration public Matrix4x4 Multiply(Matrix4x4 right) Parameters Type Name Description Matrix4x4 right Returns Type Description Matrix4x4 Multiply(Vec3) Declaration public Vec3 Multiply(Vec3 vector) Parameters Type Name Description Vec3 vector Returns Type Description Vec3 Normalize() Declaration public void Normalize() Ortho(float, float, float, float, float, float) Declaration public static Matrix4x4 Ortho(float left, float right, float bottom, float top, float near, float far) Parameters Type Name Description float left float right float bottom float top float near float far Returns Type Description Matrix4x4 RotateX(float) Declaration public static Matrix4x4 RotateX(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 RotateY(float) Declaration public static Matrix4x4 RotateY(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 RotateZ(float) Declaration public static Matrix4x4 RotateZ(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 Scale(Vec3) Declaration public static Matrix4x4 Scale(Vec3 scale) Parameters Type Name Description Vec3 scale Returns Type Description Matrix4x4 ToArray() Declaration public float[] ToArray() Returns Type Description float[] Translate(Vec3) Declaration public static Matrix4x4 Translate(Vec3 translation) Parameters Type Name Description Vec3 translation Returns Type Description Matrix4x4 Operators operator *(Matrix4x4, Matrix4x4) Declaration public static Matrix4x4 operator *(Matrix4x4 left, Matrix4x4 right) Parameters Type Name Description Matrix4x4 left Matrix4x4 right Returns Type Description Matrix4x4"
  },
  "api/Genesis.Math.NoisePoint.html": {
    "href": "api/Genesis.Math.NoisePoint.html",
    "title": "Struct NoisePoint | GFX",
    "keywords": "Struct NoisePoint Represents a point in a noise map with coordinates and a noise value. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public struct NoisePoint Constructors NoisePoint(float, float, float) Constructor for the NoisePoint struct. Declaration public NoisePoint(float x, float y, float value) Parameters Type Name Description float x The x-coordinate of the point. float y The y-coordinate of the point. float value The noise value associated with the point. Fields value Declaration public float value Field Value Type Description float x Declaration public float x Field Value Type Description float y Declaration public float y Field Value Type Description float"
  },
  "api/Genesis.Math.PerlinNoise.html": {
    "href": "api/Genesis.Math.PerlinNoise.html",
    "title": "Class PerlinNoise | GFX",
    "keywords": "Class PerlinNoise Class for generating Perlin noise. Inheritance object PerlinNoise Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class PerlinNoise Constructors PerlinNoise() Declaration public PerlinNoise() Methods GenerateNoise(float, float, float, int, int) Generates Perlin noise at a specific point with specified parameters. Declaration public static float GenerateNoise(float x, float y, float persistence, int octaves, int seed) Parameters Type Name Description float x The x-coordinate of the point. float y The y-coordinate of the point. float persistence The persistence value affecting the amplitude of octaves. int octaves The number of octaves to generate. int seed The seed value for the noise generation. Returns Type Description float The generated Perlin noise value at the specified point. GenerateNoiseMap(int, int, int) Generates a 2D noise map with specified dimensions and seed. Declaration public List<NoisePoint> GenerateNoiseMap(int width, int height, int seed) Parameters Type Name Description int width The width of the noise map. int height The height of the noise map. int seed The seed value for the noise generation. Returns Type Description List<NoisePoint> A list of NoisePoint objects representing the generated noise map."
  },
  "api/Genesis.Math.Rect.html": {
    "href": "api/Genesis.Math.Rect.html",
    "title": "Class Rect | GFX",
    "keywords": "Class Rect Represents a rectangle with position and dimensions. Inheritance object Rect Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Rect Constructors Rect() Default constructor for the Rect class. Declaration public Rect() Rect(float, float, float, float) Constructor for the Rect class that initializes the rectangle with specified position and dimensions. Declaration public Rect(float x, float y, float width, float height) Parameters Type Name Description float x The X-coordinate of the rectangle. float y The Y-coordinate of the rectangle. float width The width of the rectangle. float height The height of the rectangle. Properties Height Gets or sets the height of the rectangle. Declaration public float Height { get; set; } Property Value Type Description float Width Gets or sets the width of the rectangle. Declaration public float Width { get; set; } Property Value Type Description float X Gets or sets the X-coordinate of the rectangle. Declaration public float X { get; set; } Property Value Type Description float Y Gets or sets the Y-coordinate of the rectangle. Declaration public float Y { get; set; } Property Value Type Description float Methods Contains(float, float) Checks if a point with specified coordinates is contained within the rectangle. Declaration public bool Contains(float x, float y) Parameters Type Name Description float x The X-coordinate of the point. float y The Y-coordinate of the point. Returns Type Description bool True if the point is contained within the rectangle, otherwise false. Intersects(Rect) Checks if the current rectangle intersects with another rectangle. Declaration public bool Intersects(Rect rect) Parameters Type Name Description Rect rect The other rectangle to check for intersection. Returns Type Description bool True if the rectangles intersect, otherwise false. ToString() Converts the rectangle to a string representation in the format \"X;Y;Width;Height\". Declaration public override string ToString() Returns Type Description string A string representation of the rectangle. Overrides object.ToString()"
  },
  "api/Genesis.Math.Vec3.html": {
    "href": "api/Genesis.Math.Vec3.html",
    "title": "Class Vec3 | GFX",
    "keywords": "Class Vec3 Represents a 3D vector for coordinates. Inheritance object Vec3 Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Vec3 Constructors Vec3(vec3) Creates a new 3D vector with specified coordinates from a glm vec3 object. Declaration public Vec3(vec3 vec3) Parameters Type Name Description vec3 vec3 Vec3(Point) Creates a new 3D vector with specified coordinates from a Point object. Declaration public Vec3(Point point) Parameters Type Name Description Point point Vec3(PointF) Creates a new 3D vector with specified coordinates from a PointF object. Declaration public Vec3(PointF point) Parameters Type Name Description PointF point Vec3(Size) Creates a new 3D vector with specified coordinates from a Size object. Declaration public Vec3(Size size) Parameters Type Name Description Size size The Size object to extract coordinates from. Vec3(SizeF) Creates a new 3D vector with specified coordinates from a SizeF object. Declaration public Vec3(SizeF size) Parameters Type Name Description SizeF size The SizeF object to extract coordinates from. Vec3(float) Creates a new Vector Declaration public Vec3(float value) Parameters Type Name Description float value Vec3(float, float) Creates a new Vector Declaration public Vec3(float x, float y) Parameters Type Name Description float x float y Vec3(float, float, float) Creates a new 3D vector with specified coordinates. Declaration public Vec3(float x, float y, float z) Parameters Type Name Description float x The X-coordinate of the vector. float y The Y-coordinate of the vector. float z The Z-coordinate of the vector. Properties X Gets or sets the X-coordinate of the vector. Declaration public float X { get; set; } Property Value Type Description float Y Gets or sets the Y-coordinate of the vector. Declaration public float Y { get; set; } Property Value Type Description float Z Gets or sets the Z-coordinate of the vector. Declaration public float Z { get; set; } Property Value Type Description float Methods Add(Vec3) Adds the value from a vector Declaration public void Add(Vec3 vec) Parameters Type Name Description Vec3 vec Add(float, float) Adds the values to the vector Declaration public void Add(float x, float y) Parameters Type Name Description float x float y Add(float, float, float) Adds the values to the vector Declaration public void Add(float x, float y, float z) Parameters Type Name Description float x float y float z AddX(float) Add the value to the X param Declaration public void AddX(float x) Parameters Type Name Description float x AddY(float) Add the value to the y param Declaration public void AddY(float y) Parameters Type Name Description float y AddZ(float) Add the value to the z param Declaration public void AddZ(float z) Parameters Type Name Description float z Ceiling(Vec3) Returns a new Vec3 object where each component is the smallest integer greater than or equal to the corresponding component of the input Vec3. Declaration public static Vec3 Ceiling(Vec3 vec) Parameters Type Name Description Vec3 vec The input Vec3 to be processed. Returns Type Description Vec3 A new Vec3 with each component rounded up to the nearest integer. Cross(Vec3, Vec3) Calculates the cross product of two vectors. Declaration public static Vec3 Cross(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector. Returns Type Description Vec3 A new Vec3 instance representing the cross product of the two vectors. Degres(Vec3) Returns the offset angle to the vector. Declaration public float Degres(Vec3 vec3) Parameters Type Name Description Vec3 vec3 The reference vector. Returns Type Description float The offset angle to the vector in degrees. Degres(float, float) Returns the offset angle to the vector. Declaration public float Degres(float x, float y) Parameters Type Name Description float x The X-coordinate of the vector. float y The Y-coordinate of the vector. Returns Type Description float The offset angle to the vector in degrees. Distance(Vec3) Returns the distance between two vectors Declaration public float Distance(Vec3 vec3) Parameters Type Name Description Vec3 vec3 Returns Type Description float Dot(Vec3, Vec3) Calculates the dot product of two vectors. Declaration public static float Dot(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector. Returns Type Description float The dot product of the two vectors. Floor(Vec3) Returns a new Vec3 object where each component is rounded down to the nearest integer Declaration public static Vec3 Floor(Vec3 vec) Parameters Type Name Description Vec3 vec The input Vec3 to be processed. Returns Type Description Vec3 A new Vec3 with each component rounded down to the nearest integer. Forward(Vec3, float) Returns the forward vector Declaration public Vec3 Forward(Vec3 rotation, float dist) Parameters Type Name Description Vec3 rotation float dist Returns Type Description Vec3 Half() Returns a new Vec3 instance with the components of this instance halved. Declaration public Vec3 Half() Returns Type Description Vec3 A new Vec3 instance with the components halved. Half(Vec3) Returns a new Vec3 instance with each component halved. Declaration public static Vec3 Half(Vec3 vec) Parameters Type Name Description Vec3 vec The Vec3 instance to halve. Returns Type Description Vec3 A new Vec3 instance with each component halved. Normalize() Normalizes the vector. Declaration public Vec3 Normalize() Returns Type Description Vec3 A normalized Vec3 instance. Normalized(Vec3) Returns a normalized version of the input vector. Declaration public static Vec3 Normalized(Vec3 vec) Parameters Type Name Description Vec3 vec The vector to normalize. Returns Type Description Vec3 A normalized Vec3 instance. Random(Vec3, Vec3) Generates an rendom vector from min an max value Declaration public static Vec3 Random(Vec3 min, Vec3 max) Parameters Type Name Description Vec3 min The min vector Vec3 max The max vector Returns Type Description Vec3 Random(Vec3, Vec3, int) Generates an rendom vector from min an max value with the given seed Declaration public static Vec3 Random(Vec3 min, Vec3 max, int seed) Parameters Type Name Description Vec3 min The min vector Vec3 max The max vector int seed The seed Returns Type Description Vec3 Round(Vec3) Returns a new Vec3 object where each component is rounded to the nearest integer Declaration public static Vec3 Round(Vec3 vec) Parameters Type Name Description Vec3 vec The input Vec3 to be processed. Returns Type Description Vec3 A new Vec3 with each component rounded to the nearest integer. Set(Vec3) Sets the value for the vector Declaration public void Set(Vec3 vec) Parameters Type Name Description Vec3 vec Set(float, float, float) Sets the value for the vector Declaration public void Set(float x, float y, float z) Parameters Type Name Description float x float y float z Sub(Vec3) Subtract the vector Declaration public void Sub(Vec3 v) Parameters Type Name Description Vec3 v ToBulletVec3() Converts the vector to its BulletSharp equivalent. Declaration public Vector3 ToBulletVec3() Returns Type Description Vector3 A BulletSharp Vector3 instance representing the same vector. ToGlmVec3() Converts the vector to its GLM equivalent. Declaration public vec3 ToGlmVec3() Returns Type Description vec3 A GLM vec3 instance representing the same vector. ToString() Returns a string representation of the vector. Declaration public override string ToString() Returns Type Description string A string containing the X, Y, and Z coordinates of the vector. Overrides object.ToString() Towards(float, float) Calculates the vector towards in 3D. Declaration public Vec3 Towards(float degrees, float dist) Parameters Type Name Description float degrees float dist The distance. Returns Type Description Vec3 A new Vec3 instance representing the vector towards in 3D. Towards2D(float, Vec3, float) Returns a new vector towards the given direction. Declaration public static Vec3 Towards2D(float degrees, Vec3 start, float dist) Parameters Type Name Description float degrees Vec3 start float dist Returns Type Description Vec3 Towards3D(Vec3, Vec3, float) Calculates the Vector towards in 3D Declaration public static Vec3 Towards3D(Vec3 rotation, Vec3 start, float dist) Parameters Type Name Description Vec3 rotation Vec3 start float dist Returns Type Description Vec3 Towards3D(float, float, float, Vec3, float) Calculates the towards vector Declaration public static Vec3 Towards3D(float rotX, float rotY, float rotZ, Vec3 start, float dist) Parameters Type Name Description float rotX float rotY float rotZ Vec3 start float dist Returns Type Description Vec3 Zero() Returns a new 3D vector with X = 0, Y = 0, Z = 0. Declaration public static Vec3 Zero() Returns Type Description Vec3 A Vec3 instance representing the zero vector. Operators operator +(Vec3, Vec3) Add operator for vector addition. Declaration public static Vec3 operator +(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector. Returns Type Description Vec3 A new Vec3 instance representing the result of vector addition. operator /(Vec3, Vec3) Add operator for vector substraction. Declaration public static Vec3 operator /(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector. Returns Type Description Vec3 A new Vec3 instance representing the result of vector substraction. operator *(Vec3, Vec3) Add operator for vector multiplication. Declaration public static Vec3 operator *(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector. Returns Type Description Vec3 A new Vec3 instance representing the result of vector multiplication. operator *(Vec3, float) Multiplies the vector by a scalar value. Declaration public static Vec3 operator *(Vec3 vec, float value) Parameters Type Name Description Vec3 vec The vector to multiply. float value The scalar value. Returns Type Description Vec3 A new Vec3 instance representing the result of the multiplication. operator -(Vec3, Vec3) Subtracts one vector from another. Declaration public static Vec3 operator -(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 The first vector. Vec3 vec2 The second vector to subtract. Returns Type Description Vec3 A new Vec3 instance representing the result of the subtraction."
  },
  "api/Genesis.Math.html": {
    "href": "api/Genesis.Math.html",
    "title": "Namespace Genesis.Math | GFX",
    "keywords": "Namespace Genesis.Math Classes Matrix4x4 PerlinNoise Class for generating Perlin noise. Rect Represents a rectangle with position and dimensions. Vec3 Represents a 3D vector for coordinates. Structs NoisePoint Represents a point in a noise map with coordinates and a noise value."
  },
  "api/Genesis.Physics.Aabb.html": {
    "href": "api/Genesis.Physics.Aabb.html",
    "title": "Class Aabb | GFX",
    "keywords": "Class Aabb Represents an Axis-Aligned Bounding Box (AABB) in 3D space. Inheritance object Aabb Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class Aabb Constructors Aabb() Creates a new AABB with default values. Declaration public Aabb() Aabb(Vector3, Vector3) Creates a new AABB with specified minimum and maximum values. Declaration public Aabb(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min Minimum corner Vector3 max Maximum corner Properties Max Gets or sets the maximum corner of the AABB. Declaration public Vec3 Max { get; set; } Property Value Type Description Vec3 Min Gets or sets the minimum corner of the AABB. Declaration public Vec3 Min { get; set; } Property Value Type Description Vec3 Methods Contains(Vec3) Checks if the AABB contains a specified point. Declaration public bool Contains(Vec3 v) Parameters Type Name Description Vec3 v Point to check Returns Type Description bool True if the point is inside the AABB, otherwise false FromBulletRigidBody(RigidBody) Returns the AABB of a Bullet rigid body. Declaration public static Aabb FromBulletRigidBody(RigidBody rigidBody) Parameters Type Name Description RigidBody rigidBody Bullet RigidBody Returns Type Description Aabb Aabb representing the bounding box of the rigid body IntersectRay(Vec3, Vec3, Vec3, Vec3) Checks if a ray intersects with the AABB. Declaration public static bool IntersectRay(Vec3 rayOrigin, Vec3 rayDirection, Vec3 aabbMin, Vec3 aabbMax) Parameters Type Name Description Vec3 rayOrigin Origin of the ray Vec3 rayDirection Direction of the ray Vec3 aabbMin Minimum corner of the AABB Vec3 aabbMax Maximum corner of the AABB Returns Type Description bool True if the ray intersects with the AABB, otherwise false"
  },
  "api/Genesis.Physics.HitResult.html": {
    "href": "api/Genesis.Physics.HitResult.html",
    "title": "Struct HitResult | GFX",
    "keywords": "Struct HitResult Represents the result of a raycasting hit. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct HitResult Fields hitLocation Declaration public Vec3 hitLocation Field Value Type Description Vec3 rayEnd Declaration public Vec3 rayEnd Field Value Type Description Vec3 rayStart Declaration public Vec3 rayStart Field Value Type Description Vec3 rigidBody Declaration public RigidBody rigidBody Field Value Type Description RigidBody"
  },
  "api/Genesis.Physics.MatrixSet.html": {
    "href": "api/Genesis.Physics.MatrixSet.html",
    "title": "Struct MatrixSet | GFX",
    "keywords": "Struct MatrixSet Represents a set of matrices used in raycasting. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct MatrixSet Fields projectionMatrix Declaration public mat4 projectionMatrix Field Value Type Description mat4 viewMatrix Declaration public mat4 viewMatrix Field Value Type Description mat4"
  },
  "api/Genesis.Physics.MouseRay2.html": {
    "href": "api/Genesis.Physics.MouseRay2.html",
    "title": "Class MouseRay2 | GFX",
    "keywords": "Class MouseRay2 Represents a class for calculating a ray based on mouse input. Inheritance object MouseRay2 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class MouseRay2 Constructors MouseRay2() Declaration public MouseRay2() Methods GetRayTo(Point, PerspectiveCamera, Viewport) Gets the ray direction from the camera's location to a specified point on the screen. Declaration public Vector3 GetRayTo(Point point, PerspectiveCamera camera, Viewport viewport) Parameters Type Name Description Point point The screen point PerspectiveCamera camera The camera used for perspective Viewport viewport The viewport representing the screen size Returns Type Description Vector3 The direction of the ray in world coordinates"
  },
  "api/Genesis.Physics.PhysicHandler.html": {
    "href": "api/Genesis.Physics.PhysicHandler.html",
    "title": "Class PhysicHandler | GFX",
    "keywords": "Class PhysicHandler Represents an abstract class for handling physics interactions. Inheritance object PhysicHandler PhysicsHandler2D PhysicsHandler3D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public abstract class PhysicHandler Constructors PhysicHandler() Initializes a new instance of the PhysicHandler class. Declaration public PhysicHandler() Properties Callbacks Gets or sets the dictionary of physics callbacks. Declaration public Dictionary<object, PhysicHandlerEvent> Callbacks { get; set; } Property Value Type Description Dictionary<object, PhysicHandlerEvent> Methods ManageElement(PhysicsBehavior) Manages physics interactions for a specific physics behavior. Declaration public virtual void ManageElement(PhysicsBehavior physicsBehavior) Parameters Type Name Description PhysicsBehavior physicsBehavior The physics behavior to manage Process(Scene, Game) Processes physics interactions for a given scene and game. Declaration public abstract void Process(Scene scene, Game game) Parameters Type Name Description Scene scene The scene to process physics for Game game The game to process physics for"
  },
  "api/Genesis.Physics.PhysicHandlerEvent.html": {
    "href": "api/Genesis.Physics.PhysicHandlerEvent.html",
    "title": "Delegate PhysicHandlerEvent | GFX",
    "keywords": "Delegate PhysicHandlerEvent Represents a delegate for handling physics events. Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public delegate void PhysicHandlerEvent(Scene scene, Game game, object element) Parameters Type Name Description Scene scene The scene involved in the physics event Game game The game involved in the physics event object element The element involved in the physics event Constructors PhysicHandlerEvent(object, IntPtr) Declaration public PhysicHandlerEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, object, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, object element, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game object element AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, object) Declaration public virtual void Invoke(Scene scene, Game game, object element) Parameters Type Name Description Scene scene Game game object element"
  },
  "api/Genesis.Physics.PhysicPropeterys.html": {
    "href": "api/Genesis.Physics.PhysicPropeterys.html",
    "title": "Struct PhysicPropeterys | GFX",
    "keywords": "Struct PhysicPropeterys Represents the properties related to physics. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct PhysicPropeterys Fields gravityX Declaration public float gravityX Field Value Type Description float gravityY Declaration public float gravityY Field Value Type Description float gravityZ Declaration public float gravityZ Field Value Type Description float"
  },
  "api/Genesis.Physics.PhysicsBehavior.html": {
    "href": "api/Genesis.Physics.PhysicsBehavior.html",
    "title": "Class PhysicsBehavior | GFX",
    "keywords": "Class PhysicsBehavior Represents an abstract class for defining physics behavior in the game. Inheritance object IGameBehavior PhysicsBehavior BoxTrigger2D BufferedSpriteCollider PhysicsBox2D PhysicsPolygon2D Rigidbody2D BoxCollider BoxTrigger CapsuleCollider ConvexHullBehavior QubeConvexHull SphereCollider StaticMeshBehavior Inherited Members IGameBehavior.OnInit(Game, GameElement) IGameBehavior.OnUpdate(Game, GameElement) IGameBehavior.OnRender(Game, GameElement) IGameBehavior.OnDestroy(Game, GameElement) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public abstract class PhysicsBehavior : IGameBehavior Constructors PhysicsBehavior() Declaration protected PhysicsBehavior() Fields OnCollide Event triggered when a collision occurs. Declaration public PhysicsBehaviorEvent OnCollide Field Value Type Description PhysicsBehaviorEvent Methods Collide(Scene, Game, CollisionObject) Handles the collision event, invoking the OnCollide event if subscribed. Declaration public virtual void Collide(Scene scene, Game game, CollisionObject collisionObject) Parameters Type Name Description Scene scene The scene where the collision occurred Game game The game associated with the collision CollisionObject collisionObject The collision object involved in the event GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public abstract object GetPhysicsObject() Returns Type Description object The physics object GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to type T. Declaration public abstract T GetPhysicsObject<T>() Returns Type Description T The physics object cast to type T Type Parameters Name Description T Type to cast the physics object to"
  },
  "api/Genesis.Physics.PhysicsBehaviorEvent.html": {
    "href": "api/Genesis.Physics.PhysicsBehaviorEvent.html",
    "title": "Delegate PhysicsBehaviorEvent | GFX",
    "keywords": "Delegate PhysicsBehaviorEvent Represents a delegate for handling physics behavior events. Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public delegate void PhysicsBehaviorEvent(Scene scene, Game game, object collision) Parameters Type Name Description Scene scene The scene involved in the physics behavior event Game game The game involved in the physics behavior event object collision The collision object involved in the physics behavior event Constructors PhysicsBehaviorEvent(object, IntPtr) Declaration public PhysicsBehaviorEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, object, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, object collision, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game object collision AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, object) Declaration public virtual void Invoke(Scene scene, Game game, object collision) Parameters Type Name Description Scene scene Game game object collision"
  },
  "api/Genesis.Physics.PhysicsHandler2D.html": {
    "href": "api/Genesis.Physics.PhysicsHandler2D.html",
    "title": "Class PhysicsHandler2D | GFX",
    "keywords": "Class PhysicsHandler2D Represents a 2D physics handler responsible for managing physics simulation in a game. Inheritance object PhysicHandler PhysicsHandler2D Inherited Members PhysicHandler.Callbacks object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class PhysicsHandler2D : PhysicHandler Constructors PhysicsHandler2D(float, float) Initializes a new instance of the PhysicsHandler2D class with specified gravity values. Declaration public PhysicsHandler2D(float gravityX, float gravityY) Parameters Type Name Description float gravityX The X component of gravity. float gravityY The Y component of gravity. Properties PhysicsWorld Gets or sets the 2D physics world used for simulation. Declaration public DiscreteDynamicsWorld PhysicsWorld { get; set; } Property Value Type Description DiscreteDynamicsWorld ProcessPhysics Gets or sets a flag indicating whether physics simulation should be processed. Declaration public bool ProcessPhysics { get; set; } Property Value Type Description bool Substepps Gets ore sets the substepps for physic simulation Declaration public int Substepps { get; set; } Property Value Type Description int TickRate Gets or sets the tick rate for physics simulation. Declaration public float TickRate { get; set; } Property Value Type Description float Methods ManageElement(PhysicsBehavior) Manages a physics behavior element by adding its RigidBody to the physics world. Declaration public override void ManageElement(PhysicsBehavior physicsBehavior) Parameters Type Name Description PhysicsBehavior physicsBehavior The PhysicsBehavior representing the collision object. Overrides PhysicHandler.ManageElement(PhysicsBehavior) Process(Scene, Game) Processes the physics simulation for the given scene and game. Declaration public override void Process(Scene scene, Game game) Parameters Type Name Description Scene scene The current game scene. Game game The current game instance. Overrides PhysicHandler.Process(Scene, Game)"
  },
  "api/Genesis.Physics.PhysicsHandler3D.html": {
    "href": "api/Genesis.Physics.PhysicsHandler3D.html",
    "title": "Class PhysicsHandler3D | GFX",
    "keywords": "Class PhysicsHandler3D Represents a 3D physics handler responsible for managing physics simulation in a game. Inheritance object PhysicHandler PhysicsHandler3D Inherited Members PhysicHandler.Callbacks object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class PhysicsHandler3D : PhysicHandler Constructors PhysicsHandler3D(PhysicPropeterys) Initializes a new instance of the PhysicsHandler3D class with specified PhysicPropeterys. Declaration public PhysicsHandler3D(PhysicPropeterys propeterys) Parameters Type Name Description PhysicPropeterys propeterys The physics properties containing gravity values. PhysicsHandler3D(float, float, float) Initializes a new instance of the PhysicsHandler3D class with specified gravity values. Declaration public PhysicsHandler3D(float gravityX, float gravityY, float gravityZ) Parameters Type Name Description float gravityX The X component of gravity. float gravityY The Y component of gravity. float gravityZ The Z component of gravity. Properties PhysicsWorld Gets or sets the 3D physics world used for simulation. Declaration public DiscreteDynamicsWorld PhysicsWorld { get; set; } Property Value Type Description DiscreteDynamicsWorld ProcessPhysics Gets or sets a flag indicating whether physics simulation should be processed. Declaration public bool ProcessPhysics { get; set; } Property Value Type Description bool Methods ManageElement(PhysicsBehavior) Manages a physics behavior element by adding its collision object to the physics world. Declaration public override void ManageElement(PhysicsBehavior collisionObjec) Parameters Type Name Description PhysicsBehavior collisionObjec The PhysicsBehavior representing the rigid body element. Overrides PhysicHandler.ManageElement(PhysicsBehavior) Process(Scene, Game) Processes the physics simulation for the given scene and game. Declaration public override void Process(Scene scene, Game game) Parameters Type Name Description Scene scene The current game scene. Game game The current game instance. Overrides PhysicHandler.Process(Scene, Game)"
  },
  "api/Genesis.Physics.Raycast.html": {
    "href": "api/Genesis.Physics.Raycast.html",
    "title": "Class Raycast | GFX",
    "keywords": "Class Raycast Represents a class for performing raycasting in 3D space. Inheritance object Raycast Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class Raycast Constructors Raycast(Camera, Viewport) Initializes a new instance of the Raycast class. Declaration public Raycast(Camera camera, Viewport viewport) Parameters Type Name Description Camera camera The camera used for raycasting. Viewport viewport The viewport associated with the raycasting. Properties Camera Gets or sets the camera used for raycasting. Declaration public Camera Camera { get; set; } Property Value Type Description Camera Viewport Gets or sets the viewport associated with the raycasting. Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods GetEndVec(Camera, Viewport, int, int) Gets the end vector for raycasting based on the mouse cursor position. Declaration public static vec4 GetEndVec(Camera camera, Viewport vp, int posX, int posY) Parameters Type Name Description Camera camera The camera used for raycasting. Viewport vp The viewport associated with the raycasting. int posX X-coordinate of the mouse cursor. int posY Y-coordinate of the mouse cursor. Returns Type Description vec4 The end vector for raycasting. GetMouseWorldPosition(Camera, Viewport, int, int) Gets the world position of the mouse cursor based on a given camera and viewport. Declaration public static Vec3 GetMouseWorldPosition(Camera camera, Viewport viewport, int mouseX, int mouseY) Parameters Type Name Description Camera camera The camera used for raycasting. Viewport viewport The viewport associated with the raycasting. int mouseX X-coordinate of the mouse cursor. int mouseY Y-coordinate of the mouse cursor. Returns Type Description Vec3 World position of the mouse cursor. GetMouseWorldPosition(int, int) Gets the world position of the mouse cursor. Declaration public Vec3 GetMouseWorldPosition(int mouseX, int mouseY) Parameters Type Name Description int mouseX X-coordinate of the mouse cursor. int mouseY Y-coordinate of the mouse cursor. Returns Type Description Vec3 World position of the mouse cursor. GetRayDir(vec4, vec4) Gets the direction vector for a ray based on start and end vectors. Declaration public static vec3 GetRayDir(vec4 start, vec4 end) Parameters Type Name Description vec4 start The start vector of the ray. vec4 end The end vector of the ray. Returns Type Description vec3 The direction vector of the ray. GetStartVec(Camera, Viewport, int, int) Gets the start vector for raycasting based on the mouse cursor position. Declaration public static vec4 GetStartVec(Camera camera, Viewport vp, int posX, int posY) Parameters Type Name Description Camera camera The camera used for raycasting. Viewport vp The viewport associated with the raycasting. int posX X-coordinate of the mouse cursor. int posY Y-coordinate of the mouse cursor. Returns Type Description vec4 The start vector for raycasting. GetViewProjectionMatrix(Camera) Gets the view and projection matrices for raycasting based on a given camera. Declaration public static MatrixSet GetViewProjectionMatrix(Camera camera) Parameters Type Name Description Camera camera The camera for which matrices are calculated. Returns Type Description MatrixSet MatrixSet containing the view and projection matrices. PerformCast(Camera, Viewport, PhysicHandler, int, int) Performs a raycast and returns the hit result based on the mouse cursor position. Declaration public static HitResult PerformCast(Camera camera, Viewport viewport, PhysicHandler physicHandler, int posX, int posY) Parameters Type Name Description Camera camera The camera used for raycasting. Viewport viewport The viewport associated with the raycasting. PhysicHandler physicHandler The physics handler used for raycasting. int posX X-coordinate of the mouse cursor. int posY Y-coordinate of the mouse cursor. Returns Type Description HitResult HitResult containing information about the raycasting hit. PerformCast(PhysicHandler, int, int) Performs a raycast and returns the hit result based on the mouse cursor position. Declaration public HitResult PerformCast(PhysicHandler physicHandler, int posX, int posY) Parameters Type Name Description PhysicHandler physicHandler The physics handler used for raycasting. int posX X-coordinate of the mouse cursor. int posY Y-coordinate of the mouse cursor. Returns Type Description HitResult HitResult containing information about the raycasting hit."
  },
  "api/Genesis.Physics.html": {
    "href": "api/Genesis.Physics.html",
    "title": "Namespace Genesis.Physics | GFX",
    "keywords": "Namespace Genesis.Physics Classes Aabb Represents an Axis-Aligned Bounding Box (AABB) in 3D space. MouseRay2 Represents a class for calculating a ray based on mouse input. PhysicHandler Represents an abstract class for handling physics interactions. PhysicsBehavior Represents an abstract class for defining physics behavior in the game. PhysicsHandler2D Represents a 2D physics handler responsible for managing physics simulation in a game. PhysicsHandler3D Represents a 3D physics handler responsible for managing physics simulation in a game. Raycast Represents a class for performing raycasting in 3D space. Structs HitResult Represents the result of a raycasting hit. MatrixSet Represents a set of matrices used in raycasting. PhysicPropeterys Represents the properties related to physics. Delegates PhysicHandlerEvent Represents a delegate for handling physics events. PhysicsBehaviorEvent Represents a delegate for handling physics behavior events."
  },
  "api/Genesis.UI.Canvas.html": {
    "href": "api/Genesis.UI.Canvas.html",
    "title": "Class Canvas | GFX",
    "keywords": "Class Canvas Represents a canvas for organizing and rendering UI widgets. Inheritance object Canvas Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Canvas Constructors Canvas(string, Vec3, Vec3) Creates a new instance of the Canvas class. Declaration public Canvas(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name The name of the canvas. Vec3 location The location of the canvas. Vec3 size The size of the canvas. Properties Enabled Gets or sets a value indicating whether the canvas is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Gets or sets the location of the canvas. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Gets or sets the name of the canvas. Declaration public string Name { get; set; } Property Value Type Description string Size Gets or sets the size of the canvas. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Widgets Gets or sets the list of widgets contained within the canvas. Declaration public List<Widget> Widgets { get; set; } Property Value Type Description List<Widget> Methods AddWidget(Widget) Adds a widget to the canvas. Declaration public void AddWidget(Widget entity) Parameters Type Name Description Widget entity CenterWidget(Canvas, Widget) Centers the widget in the middle of the canvas. Declaration public static void CenterWidget(Canvas canvas, Widget widget) Parameters Type Name Description Canvas canvas The canvas instance. Widget widget The widget to be centered. GetBounds() Returns the bounds of the canvas. Declaration public Rect GetBounds() Returns Type Description Rect The bounds of the canvas. GetScreenBounds() Returns the screen bounds of the canvas. Declaration public Rect GetScreenBounds() Returns Type Description Rect The screen bounds of the canvas. GetWidget(string) Returns a widget with the specified name, searching within entities and their children. Declaration public Widget GetWidget(string name) Parameters Type Name Description string name The name to search for. Returns Type Description Widget The widget with the specified name, or null if not found. LoadCanvas(string, AssetManager, UIParser) Loads a canvas from a specified JSON file using a UI parser and asset manager. Declaration public static Canvas LoadCanvas(string File, AssetManager assets, UIParser parser) Parameters Type Name Description string File Path to the JSON file containing canvas configuration. AssetManager assets Asset manager for managing resources such as images, fonts, etc. UIParser parser UI parser that contains the logic for parsing the JSON data. Returns Type Description Canvas The created canvas based on the JSON configuration. LoadWidget(JObject, AssetManager, UIParser) Loads a widget from provided JSON data using a UI parser and asset manager. Declaration public static Widget LoadWidget(JObject data, AssetManager assets, UIParser parser) Parameters Type Name Description JObject data JSON data containing the configuration of the widget to be created. AssetManager assets Asset manager for managing resources such as images, fonts, etc. UIParser parser UI parser that contains the logic for parsing the JSON data. Returns Type Description Widget The created widget based on the JSON data. OnDispose(Game, Scene) Disposes of the canvas. Declaration public void OnDispose(Game game, Scene scene) Parameters Type Name Description Game game The game instance. Scene scene The scene instance. OnInit(Game, Scene) Initializes the canvas. Declaration public void OnInit(Game game, Scene scene) Parameters Type Name Description Game game The game instance. Scene scene The scene instance. OnRender(Game, IRenderDevice, Scene) Renders the canvas. Declaration public void OnRender(Game game, IRenderDevice renderDevice, Scene scene) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Scene scene The scene instance. OnUpdate(Game, Scene) Updates the canvas. Declaration public void OnUpdate(Game game, Scene scene) Parameters Type Name Description Game game The game instance. Scene scene The scene instance."
  },
  "api/Genesis.UI.ImageButton.html": {
    "href": "api/Genesis.UI.ImageButton.html",
    "title": "Class ImageButton | GFX",
    "keywords": "Class ImageButton Represents an image button widget in the UI. Inheritance object Widget ImageButton Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ImageButton : Widget Constructors ImageButton(string, Vec3, Vec3, Texture, Texture) Creates a new instance of the ImageButton class. Declaration public ImageButton(string name, Vec3 location, Vec3 size, Texture normalTexture, Texture hoverTexture) Parameters Type Name Description string name The name of the image button. Vec3 location The location of the image button. Vec3 size The size of the image button. Texture normalTexture The normal texture displayed when the button is not hovered. Texture hoverTexture The hover texture displayed when the button is hovered. Properties HoverTexture Gets or sets the hover texture displayed when the button is hovered. Declaration public Texture HoverTexture { get; set; } Property Value Type Description Texture NormalTexture Gets or sets the normal texture displayed when the button is not hovered. Declaration public Texture NormalTexture { get; set; } Property Value Type Description Texture Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the image button on the screen. Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Scene scene The scene instance. Canvas canvas The canvas containing the image button. Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "api/Genesis.UI.Label.html": {
    "href": "api/Genesis.UI.Label.html",
    "title": "Class Label | GFX",
    "keywords": "Class Label Represents a label widget in the UI. Inheritance object Widget Label Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Label : Widget Constructors Label(string, Vec3, string, Font, Color) Create a new instance of the label Declaration public Label(string name, Vec3 location, string text, Font font, Color color) Parameters Type Name Description string name Vec3 location string text Font font Color color Properties Font Gets or sets the font used for the label. Declaration public Font Font { get; set; } Property Value Type Description Font FontSize Gets or sets the font size of the label. Declaration public float FontSize { get; set; } Property Value Type Description float Text Gets or sets the text content of the label. Declaration public string Text { get; set; } Property Value Type Description string TextColor Gets or sets the color of the text in the label. Declaration public Color TextColor { get; set; } Property Value Type Description Color Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the label Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "api/Genesis.UI.ListItem.html": {
    "href": "api/Genesis.UI.ListItem.html",
    "title": "Class ListItem | GFX",
    "keywords": "Class ListItem Represents a list item with a name, text, and a callback function for selection. Inheritance object ListItem Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ListItem Constructors ListItem(string, string, ListItemBehavior) Creates a new instance of the ListItem class. Declaration public ListItem(string name, string text, ListItemBehavior func) Parameters Type Name Description string name The name of the list item. string text The text content of the list item. ListItemBehavior func The callback function invoked when the item is selected. Properties Name Gets or sets the name of the list item. Declaration public string Name { get; set; } Property Value Type Description string OnSelect Gets or sets the callback function invoked when the item is selected. Declaration public ListItemBehavior OnSelect { get; set; } Property Value Type Description ListItemBehavior Text Gets or sets the text content of the list item. Declaration public string Text { get; set; } Property Value Type Description string"
  },
  "api/Genesis.UI.ListItemBehavior.html": {
    "href": "api/Genesis.UI.ListItemBehavior.html",
    "title": "Delegate ListItemBehavior | GFX",
    "keywords": "Delegate ListItemBehavior Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void ListItemBehavior(Game game, Scene scene, ListItem item) Parameters Type Name Description Game game Scene scene ListItem item Constructors ListItemBehavior(object, IntPtr) Declaration public ListItemBehavior(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, Scene, ListItem, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, Scene scene, ListItem item, AsyncCallback callback, object @object) Parameters Type Name Description Game game Scene scene ListItem item AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, Scene, ListItem) Declaration public virtual void Invoke(Game game, Scene scene, ListItem item) Parameters Type Name Description Game game Scene scene ListItem item"
  },
  "api/Genesis.UI.ListSelector.html": {
    "href": "api/Genesis.UI.ListSelector.html",
    "title": "Class ListSelector | GFX",
    "keywords": "Class ListSelector Represents a list selector widget in the UI, allowing the user to navigate and select items. Inheritance object Widget ListSelector Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ListSelector : Widget Constructors ListSelector(string, Vec3, Font) Creates a new instance of the ListSelector class. Declaration public ListSelector(string name, Vec3 location, Font font) Parameters Type Name Description string name The name of the list selector. Vec3 location The location of the list selector. Font font The font used for rendering text in the list. Properties CenterText Gets or sets a value indicating whether the text should be centered within each line. Declaration public bool CenterText { get; set; } Property Value Type Description bool Font Gets or sets the font used for rendering text in the list. Declaration public Font Font { get; set; } Property Value Type Description Font FontSize Gets or sets the font size used for rendering text in the list. Declaration public float FontSize { get; set; } Property Value Type Description float FontSpacing Gets or sets the font spacing used for rendering text in the list. Declaration public float FontSpacing { get; set; } Property Value Type Description float IndexChangedBehavior Gets or sets the behavior invoked when the selected index changes. Declaration public ListSelectorBehavior IndexChangedBehavior { get; set; } Property Value Type Description ListSelectorBehavior Items Gets or sets the list of items in the selector. Declaration public List<ListItem> Items { get; set; } Property Value Type Description List<ListItem> LineHeight Gets or sets the height of each line in the list. Declaration public float LineHeight { get; set; } Property Value Type Description float SelectedIndex Gets or sets the index of the currently selected item. Declaration public int SelectedIndex { get; set; } Property Value Type Description int Methods AddItem(ListItem) Adds an item to the list selector. Declaration public void AddItem(ListItem item) Parameters Type Name Description ListItem item The item to add. OnRender(Game, IRenderDevice, Scene, Canvas) Renders the list selector on the screen. Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device. Scene scene The scene instance. Canvas canvas The canvas containing the list selector. Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas) OnUpdate(Game, Scene, Canvas) Updates the list selector. Declaration public override void OnUpdate(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. Scene scene The scene instance. Canvas canvas The canvas containing the list selector. Overrides Widget.OnUpdate(Game, Scene, Canvas)"
  },
  "api/Genesis.UI.ListSelectorBehavior.html": {
    "href": "api/Genesis.UI.ListSelectorBehavior.html",
    "title": "Delegate ListSelectorBehavior | GFX",
    "keywords": "Delegate ListSelectorBehavior Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void ListSelectorBehavior(Game game, Scene scene, ListSelector selector) Parameters Type Name Description Game game Scene scene ListSelector selector Constructors ListSelectorBehavior(object, IntPtr) Declaration public ListSelectorBehavior(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, Scene, ListSelector, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, Scene scene, ListSelector selector, AsyncCallback callback, object @object) Parameters Type Name Description Game game Scene scene ListSelector selector AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, Scene, ListSelector) Declaration public virtual void Invoke(Game game, Scene scene, ListSelector selector) Parameters Type Name Description Game game Scene scene ListSelector selector"
  },
  "api/Genesis.UI.Panel.html": {
    "href": "api/Genesis.UI.Panel.html",
    "title": "Class Panel | GFX",
    "keywords": "Class Panel Represents a UI panel that can have a background image, background color, or both. Inheritance object Widget Panel Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Panel : Widget Constructors Panel(string, Vec3, Vec3) Initializes a new instance of the Panel class with the specified name, location, and size. Declaration public Panel(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name The name of the panel. Vec3 location The location of the panel. Vec3 size The size of the panel. Properties BackgroundColor Gets or sets the background color of the panel. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundImage Gets or sets the background image of the panel. Declaration public Texture BackgroundImage { get; set; } Property Value Type Description Texture HasBackgroundColor Gets or sets a value indicating whether the panel has a background color. Declaration public bool HasBackgroundColor { get; set; } Property Value Type Description bool Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the panel, considering the background image and color. Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Scene scene The scene in which the panel is rendered. Canvas canvas The canvas to which the panel belongs. Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "api/Genesis.UI.ProgressBar.html": {
    "href": "api/Genesis.UI.ProgressBar.html",
    "title": "Class ProgressBar | GFX",
    "keywords": "Class ProgressBar Represents a progress bar UI element. Inheritance object Widget ProgressBar Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ProgressBar : Widget Constructors ProgressBar(string, Vec3, Vec3) Initializes a new instance of the ProgressBar class with the specified name, location, and size. Declaration public ProgressBar(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name The name of the progress bar. Vec3 location The location of the progress bar. Vec3 size The size of the progress bar. Properties BackgroundColor Gets or sets the background color of the progress bar. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BarColor Gets or sets the color of the progress bar. Declaration public Color BarColor { get; set; } Property Value Type Description Color BorderColor Gets or sets the color of the progress bar border. Declaration public Color BorderColor { get; set; } Property Value Type Description Color MaxValue Gets or sets the maximum value of the progress bar. Declaration public float MaxValue { get; set; } Property Value Type Description float Value Gets or sets the current value of the progress bar. Declaration public float Value { get; set; } Property Value Type Description float Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the progress bar with its background, bar, and border. Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Scene scene The scene in which the progress bar is rendered. Canvas canvas The canvas to which the progress bar belongs. Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "api/Genesis.UI.UIEvent.html": {
    "href": "api/Genesis.UI.UIEvent.html",
    "title": "Delegate UIEvent | GFX",
    "keywords": "Delegate UIEvent Delegate for handling UI events. Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void UIEvent(Widget entity, Game game, Scene scene, Canvas canvas) Parameters Type Name Description Widget entity The widget triggering the event. Game game The game instance. Scene scene The current scene. Canvas canvas The canvas used for rendering. Constructors UIEvent(object, IntPtr) Declaration public UIEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Widget, Game, Scene, Canvas, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Widget entity, Game game, Scene scene, Canvas canvas, AsyncCallback callback, object @object) Parameters Type Name Description Widget entity Game game Scene scene Canvas canvas AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Widget, Game, Scene, Canvas) Declaration public virtual void Invoke(Widget entity, Game game, Scene scene, Canvas canvas) Parameters Type Name Description Widget entity Game game Scene scene Canvas canvas"
  },
  "api/Genesis.UI.UIParseHandler.html": {
    "href": "api/Genesis.UI.UIParseHandler.html",
    "title": "Delegate UIParseHandler | GFX",
    "keywords": "Delegate UIParseHandler Delegate for handling the parsing of JSON data into a widget. Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate Widget UIParseHandler(JObject data, AssetManager assets) Parameters Type Name Description JObject data JSON data containing the widget configuration. AssetManager assets Asset manager for managing resources such as textures, fonts, etc. Returns Type Description Widget The parsed widget based on the JSON data. Constructors UIParseHandler(object, IntPtr) Declaration public UIParseHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(JObject, AssetManager, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(JObject data, AssetManager assets, AsyncCallback callback, object @object) Parameters Type Name Description JObject data AssetManager assets AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual Widget EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Widget Invoke(JObject, AssetManager) Declaration public virtual Widget Invoke(JObject data, AssetManager assets) Parameters Type Name Description JObject data AssetManager assets Returns Type Description Widget"
  },
  "api/Genesis.UI.UIParser.html": {
    "href": "api/Genesis.UI.UIParser.html",
    "title": "Class UIParser | GFX",
    "keywords": "Class UIParser This class provides functions to parse a JSON object as a widget. Inheritance object UIParser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class UIParser Constructors UIParser() Initializes a new instance of the UIParser class. Declaration public UIParser() Properties UIHandler Gets or sets the dictionary of UI parse handlers, mapping widget types to their respective parsing functions. Declaration public Dictionary<string, UIParseHandler> UIHandler { get; set; } Property Value Type Description Dictionary<string, UIParseHandler>"
  },
  "api/Genesis.UI.Widget.html": {
    "href": "api/Genesis.UI.Widget.html",
    "title": "Class Widget | GFX",
    "keywords": "Class Widget Base class for UI widgets. Inheritance object Widget ImageButton Label ListSelector Panel ProgressBar Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Widget Constructors Widget() Creates a new instance of the Widget class. Declaration public Widget() Properties Children Gets or sets the list of child widgets. Declaration public List<Widget> Children { get; set; } Property Value Type Description List<Widget> Debug Gets or sets a value indicating whether debug mode is enabled for the widget. Declaration public bool Debug { get; set; } Property Value Type Description bool Enabled Gets or sets a value indicating whether the widget is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Gets or sets the location of the widget in 3D space. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Gets or sets the name of the widget. Declaration public string Name { get; set; } Property Value Type Description string Parent Gets or sets the parent widget. Declaration public Widget Parent { get; set; } Property Value Type Description Widget Size Gets or sets the size of the widget. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Methods AddChildren(Widget) Adds a child widget to the entity and sets the parent of the child entity. Declaration public void AddChildren(Widget widget) Parameters Type Name Description Widget widget The child widget to be added. FindChildren(string) Recursively finds a child widget with the given name. Declaration public Widget FindChildren(string name) Parameters Type Name Description string name The name to search for. Returns Type Description Widget The widget with the specified name, or null if not found. GetChildren(string) Returns the child widget with the specified name. Declaration public Widget GetChildren(string name) Parameters Type Name Description string name The name of the child widget to find. Returns Type Description Widget The child widget with the specified name, or null if not found. GetRelativeBounds2D(Canvas) Gets the relative bounds of the widget on the canvas. Declaration public Rect GetRelativeBounds2D(Canvas canvas) Parameters Type Name Description Canvas canvas The canvas used for rendering. Returns Type Description Rect The relative bounds of the widget. GetRelativePos(Canvas) Gets the relative position of the widget on the screen. Declaration public Vec3 GetRelativePos(Canvas canvas) Parameters Type Name Description Canvas canvas The canvas used for rendering. Returns Type Description Vec3 The relative position of the widget. IsHover(Game, Scene, Canvas) Checks if the mouse is hovering over the widget. Declaration public bool IsHover(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. Scene scene The current scene. Canvas canvas The canvas used for rendering. Returns Type Description bool True if the mouse is hovering over the widget, otherwise false. OnDispose(Game, Scene, Canvas) Disposes the widget. Declaration public virtual void OnDispose(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. Scene scene The current scene. Canvas canvas The canvas used for rendering. OnInit(Game, Scene, Canvas) Initializes the widget. Declaration public virtual void OnInit(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. Scene scene The current scene. Canvas canvas The canvas used for rendering. OnRender(Game, IRenderDevice, Scene, Canvas) Renders the widget. Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Scene scene The current scene. Canvas canvas The canvas used for rendering. OnUpdate(Game, Scene, Canvas) Updates the widget. Declaration public virtual void OnUpdate(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game The game instance. Scene scene The current scene. Canvas canvas The canvas used for rendering. Events Click Event triggered when the widget is clicked. Declaration public event UIEvent Click Event Type Type Description UIEvent MouseEnter Event triggered when the mouse enters the widget. Declaration public event UIEvent MouseEnter Event Type Type Description UIEvent MouseLeave Event triggered when the mouse leaves the widget. Declaration public event UIEvent MouseLeave Event Type Type Description UIEvent"
  },
  "api/Genesis.UI.html": {
    "href": "api/Genesis.UI.html",
    "title": "Namespace Genesis.UI | GFX",
    "keywords": "Namespace Genesis.UI Classes Canvas Represents a canvas for organizing and rendering UI widgets. ImageButton Represents an image button widget in the UI. Label Represents a label widget in the UI. ListItem Represents a list item with a name, text, and a callback function for selection. ListSelector Represents a list selector widget in the UI, allowing the user to navigate and select items. Panel Represents a UI panel that can have a background image, background color, or both. ProgressBar Represents a progress bar UI element. UIParser This class provides functions to parse a JSON object as a widget. Widget Base class for UI widgets. Delegates ListItemBehavior ListSelectorBehavior UIEvent Delegate for handling UI events. UIParseHandler Delegate for handling the parsing of JSON data into a widget."
  },
  "api/Genesis.html": {
    "href": "api/Genesis.html",
    "title": "Namespace Genesis | GFX",
    "keywords": "Namespace Genesis Classes Class1"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | GFX",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | GFX",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "GFX Documentation | GFX",
    "keywords": "GFX Documentation Welcome to the official documentation for the GFX Game Engine, version 0.1.2! Overview GFX is a powerful framework developed in C# for creating both 2D and 3D games. It offers streamlined scene rendering, extensive customization through GameBehaviors, and support for a variety of game elements. Key Features Scene Management: Efficient management of scenes with support for layers and various game elements. Customization: Implement game logic using custom GameBehaviors and extend functionalities with abstract classes. Graphics: Supports OpenGL 4.5 for rendering, with plans for Vulkan and DirectX 12 integration. Physics: Utilizes BulletSharp for physics simulation, supporting both 2D and 3D environments. Asset Management: Easily load textures and fonts managed by the Asset Manager. External Libraries: Integrates AssimpNet, BulletSharp, GlmSharp, NetGL, and Newtonsoft.Json for enhanced functionality. Getting Started To start using Genesis Game Engine, clone the repository and refer to the documentation for detailed installation and usage instructions. Community and Support Website: https://gfx-engine.org Forum: forum.gfx-engine.org Join our community to get help, share ideas, and stay updated with the latest developments. License Genesis Game Engine is licensed under the MIT License. See the License file for more details. For contributions and bug reports, visit the GitHub repository."
  },
  "obj/api/Genesis.Class1.html": {
    "href": "obj/api/Genesis.Class1.html",
    "title": "Class Class1 | GFX",
    "keywords": "Class Class1 Inheritance object Class1 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis Assembly: Genesis.dll Syntax public class Class1 Constructors Class1() Declaration public Class1()"
  },
  "obj/api/Genesis.Core.AssetManager.html": {
    "href": "obj/api/Genesis.Core.AssetManager.html",
    "title": "Class AssetManager | GFX",
    "keywords": "Class AssetManager Manages game assets such as textures and fonts. Inheritance object AssetManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class AssetManager Constructors AssetManager() Initializes a new instance of the AssetManager class. Declaration public AssetManager() Properties Fonts List of loaded fonts. Declaration public List<Font> Fonts { get; set; } Property Value Type Description List<Font> Textures List of loaded textures. Declaration public List<Texture> Textures { get; set; } Property Value Type Description List<Texture> Methods AddFont(Font) Adds an font Declaration public void AddFont(Font font) Parameters Type Name Description Font font the font to add AddTexture(string, Bitmap) Adds a texture to the asset manager. Declaration public Texture AddTexture(string name, Bitmap bitmap) Parameters Type Name Description string name The name of the texture. Bitmap bitmap The bitmap representing the texture. Returns Type Description Texture The added texture. DisposeTextures(Game) Disposes of the loaded textures and fonts. Declaration public void DisposeTextures(Game game) Parameters Type Name Description Game game The game object associated with the assets. GetFont(string) Gets a font by name. Declaration public Font GetFont(string name) Parameters Type Name Description string name The name of the font. Returns Type Description Font The font with the specified name, or null if not found. GetRessourcesDirectory() Gets the resource directory path. Declaration public static string GetRessourcesDirectory() Returns Type Description string The path to the resource directory. GetTexture(string) Gets a texture by name. Declaration public Texture GetTexture(string name) Parameters Type Name Description string name The name of the texture. Returns Type Description Texture The texture with the specified name, or null if not found. ImportAssetLibary(string) Imports assets from an asset library. Declaration public void ImportAssetLibary(string file) Parameters Type Name Description string file The file path of the asset library to import. Init(IRenderDevice) Initializes the assets in the rendering device. Declaration public void Init(IRenderDevice renderDevice) Parameters Type Name Description IRenderDevice renderDevice The rendering device to load the assets into. LoadFonts() Loads fonts from the resource folder. Declaration public void LoadFonts() LoadSystemFont(string) Loads a system font Declaration public void LoadSystemFont(string font) Parameters Type Name Description string font LoadTextures() Loads textures from the resource folder. Declaration public void LoadTextures() PackAssets(string) Packs the assets into an asset library. Declaration public void PackAssets(string file) Parameters Type Name Description string file The file path to save the asset library."
  },
  "obj/api/Genesis.Core.Behaviors.AnimationBehavior.html": {
    "href": "obj/api/Genesis.Core.Behaviors.AnimationBehavior.html",
    "title": "Class AnimationBehavior | GFX",
    "keywords": "Class AnimationBehavior Represents a behavior that enables sprite animations in the Genesis framework. Inheritance object IGameBehavior AnimationBehavior Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public class AnimationBehavior : IGameBehavior Constructors AnimationBehavior() Initializes a new instance of the AnimationBehavior class. Declaration public AnimationBehavior() AnimationBehavior(float, float, long, Texture) Initializes a new instance of the AnimationBehavior class with specified parameters. Declaration public AnimationBehavior(float cells, float rows, long frameTime, Texture animationSheet) Parameters Type Name Description float cells The number of cells (frames) in a row in the animation sheet. float rows The number of rows in the animation sheet. long frameTime The time in milliseconds between animation frames. Texture animationSheet The texture containing the animation frames. Properties AnimationSheet Gets or sets the texture containing the animation frames. Declaration public Texture AnimationSheet { get; set; } Property Value Type Description Texture Animations Gets or sets the list of animations available for this behavior. Declaration public List<Animation> Animations { get; set; } Property Value Type Description List<Animation> Cells Gets or sets the number of cells (frames) in a row in the animation sheet. Declaration public float Cells { get; set; } Property Value Type Description float FrameTime Gets or sets the time in milliseconds between animation frames. Declaration public long FrameTime { get; set; } Property Value Type Description long Rows Gets or sets the number of rows in the animation sheet. Declaration public float Rows { get; set; } Property Value Type Description float SelectedAnimation Gets or sets the currently selected animation. Declaration public Animation SelectedAnimation { get; set; } Property Value Type Description Animation Methods AddAnimation(Animation) Adds an animation to the list of available animations. Declaration public void AddAnimation(Animation animation) Parameters Type Name Description Animation animation LoadAnimation(string) Loads the specified animation by name. Declaration public void LoadAnimation(string name) Parameters Type Name Description string name The name of the animation to load. OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game element is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game element is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) Play() Starts playing the animation. Declaration public void Play() Stop() Stops playing the animation. Declaration public void Stop()"
  },
  "obj/api/Genesis.Core.Behaviors.Physics2D.Rigidbody2D.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics2D.Rigidbody2D.html",
    "title": "Class Rigidbody2D | GFX",
    "keywords": "Class Rigidbody2D Represents a 2D physics behavior for game elements. Inheritance object IGameBehavior PhysicsBehavior Rigidbody2D Inherited Members PhysicsBehavior.OnCollide PhysicsBehavior.Collide(Scene, Game, RigidBody) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics2D Assembly: Genesis.dll Syntax public class Rigidbody2D : PhysicsBehavior Constructors Rigidbody2D() Declaration public Rigidbody2D() Properties AngularFactor Gets or sets the angular factor for the RigidBody's rotation. Declaration public Vec3 AngularFactor { get; set; } Property Value Type Description Vec3 LinearFactor Gets or sets the linear factor for the RigidBody's motion. Declaration public Vec3 LinearFactor { get; set; } Property Value Type Description Vec3 RigidBody Gets or sets the RigidBody associated with this 2D physics behavior. Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods CreateRigidbody(PhysicHandler, float) Creates a RigidBody with the specified mass using the provided PhysicHandler. Declaration public void CreateRigidbody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler The PhysicHandler responsible for managing physics elements. float mass The mass of the RigidBody. GetPhysicsObject() Gets the physics object associated with this behavior. Declaration public override object GetPhysicsObject() Returns Type Description object The RigidBody physics object. Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Gets the physics object associated with this behavior, cast to the specified type. Declaration public override T GetPhysicsObject<T>() Returns Type Description T The RigidBody physics object cast to the specified type. Type Parameters Name Description T The type to which the physics object is cast. Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the associated game element is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the associated game element is being initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called during the rendering phase of the game update cycle. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Updates the behavior during the game's update cycle. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The current game instance. GameElement parent The parent game element associated with this behavior. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Updates the RigidBody's motion state based on the parent's location. Declaration public void UpdateRigidBody()"
  },
  "obj/api/Genesis.Core.Behaviors.Physics2D.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics2D.html",
    "title": "Namespace Genesis.Core.Behaviors.Physics2D | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors.Physics2D Classes Rigidbody2D Represents a 2D physics behavior for game elements."
  },
  "obj/api/Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior.html",
    "title": "Class ConvexHullBehavior | GFX",
    "keywords": "Class ConvexHullBehavior A ConvexHull Rigidbody for Element3D. Inheritance object IGameBehavior PhysicsBehavior ConvexHullBehavior Inherited Members PhysicsBehavior.OnCollide IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class ConvexHullBehavior : PhysicsBehavior Constructors ConvexHullBehavior() Declaration public ConvexHullBehavior() Properties RigidBody Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods Collide(Scene, Game, RigidBody) Declaration public override void Collide(Scene scene, Game game, RigidBody collisionObject) Parameters Type Name Description Scene scene Game game RigidBody collisionObject Overrides PhysicsBehavior.Collide(Scene, Game, RigidBody) CreateRigidBody(PhysicHandler, float) Declaration public void CreateRigidBody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler float mass GetPhysicsObject() Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Declaration public void UpdateRigidBody()"
  },
  "obj/api/Genesis.Core.Behaviors.Physics3D.QubeConvexHull.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics3D.QubeConvexHull.html",
    "title": "Class QubeConvexHull | GFX",
    "keywords": "Class QubeConvexHull Inheritance object IGameBehavior PhysicsBehavior QubeConvexHull Inherited Members PhysicsBehavior.OnCollide IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class QubeConvexHull : PhysicsBehavior Constructors QubeConvexHull() Declaration public QubeConvexHull() Properties RigidBody Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods Collide(Scene, Game, RigidBody) Declaration public override void Collide(Scene scene, Game game, RigidBody collisionObject) Parameters Type Name Description Scene scene Game game RigidBody collisionObject Overrides PhysicsBehavior.Collide(Scene, Game, RigidBody) CreateRigidBody(PhysicHandler, float) Declaration public void CreateRigidBody(PhysicHandler handler, float mass) Parameters Type Name Description PhysicHandler handler float mass GetPhysicsObject() Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Declaration public void UpdateRigidBody()"
  },
  "obj/api/Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.html",
    "title": "Class StaticMeshBehavior | GFX",
    "keywords": "Class StaticMeshBehavior Inheritance object IGameBehavior PhysicsBehavior StaticMeshBehavior Inherited Members PhysicsBehavior.OnCollide IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors.Physics3D Assembly: Genesis.dll Syntax public class StaticMeshBehavior : PhysicsBehavior Constructors StaticMeshBehavior() Declaration public StaticMeshBehavior() Properties RigidBody Declaration public RigidBody RigidBody { get; set; } Property Value Type Description RigidBody Methods Collide(Scene, Game, RigidBody) Gets called when the element collides with another Declaration public override void Collide(Scene scene, Game game, RigidBody collisionObject) Parameters Type Name Description Scene scene Game game RigidBody collisionObject Overrides PhysicsBehavior.Collide(Scene, Game, RigidBody) CreateRigidBody(PhysicHandler, float, Mesh) Create the rigidbody for this behavior Declaration public void CreateRigidBody(PhysicHandler handler, float mass, Mesh mesh) Parameters Type Name Description PhysicHandler handler float mass Mesh mesh Exceptions Type Condition InvalidOperationException GetPhysicsObject() Returns the physic object Declaration public override object GetPhysicsObject() Returns Type Description object Overrides PhysicsBehavior.GetPhysicsObject() GetPhysicsObject<T>() Declaration public override T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T Overrides PhysicsBehavior.GetPhysicsObject<T>() OnDestroy(Game, GameElement) Destroys the behavior Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Check on init if the parent type is a Element3D Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnInit(Game, GameElement) Exceptions Type Condition InvalidOperationException OnRender(Game, GameElement) Renderer callback Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Update callback Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game GameElement parent Overrides IGameBehavior.OnUpdate(Game, GameElement) UpdateRigidBody() Sets the scaling for the RigidBody Declaration public void UpdateRigidBody()"
  },
  "obj/api/Genesis.Core.Behaviors.Physics3D.html": {
    "href": "obj/api/Genesis.Core.Behaviors.Physics3D.html",
    "title": "Namespace Genesis.Core.Behaviors.Physics3D | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors.Physics3D Classes ConvexHullBehavior Represents a ConvexHull Rigidbody for Element3D. QubeConvexHull Represents a Physics behavior for a 3D cube with a convex hull shape. StaticMeshBehavior Represents a Physics behavior for a static mesh in 3D."
  },
  "obj/api/Genesis.Core.Behaviors.SpriteMovementController.html": {
    "href": "obj/api/Genesis.Core.Behaviors.SpriteMovementController.html",
    "title": "Class SpriteMovementController | GFX",
    "keywords": "Class SpriteMovementController Inheritance object IGameBehavior SpriteMovementController Inherited Members IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.Behaviors Assembly: Genesis.dll Syntax public class SpriteMovementController : IGameBehavior Constructors SpriteMovementController() Declaration public SpriteMovementController() Properties Automove Declaration public bool Automove { get; set; } Property Value Type Description bool MoveSpeed Declaration public float MoveSpeed { get; set; } Property Value Type Description float Methods MoveDown() Declaration public void MoveDown() MoveLeft() Declaration public void MoveLeft() MoveRight() Declaration public void MoveRight() MoveUp() Declaration public void MoveUp() OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public override void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnDestroy(Game, GameElement) OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public override void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnInit(Game, GameElement) OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public override void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnRender(Game, GameElement) OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public override void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. Overrides IGameBehavior.OnUpdate(Game, GameElement)"
  },
  "obj/api/Genesis.Core.Behaviors.html": {
    "href": "obj/api/Genesis.Core.Behaviors.html",
    "title": "Namespace Genesis.Core.Behaviors | GFX",
    "keywords": "Namespace Genesis.Core.Behaviors Classes AnimationBehavior Represents a behavior that enables sprite animations in the Genesis framework. SpriteMovementController Represents a behavior for controlling the movement of a sprite."
  },
  "obj/api/Genesis.Core.Game.html": {
    "href": "obj/api/Genesis.Core.Game.html",
    "title": "Class Game | GFX",
    "keywords": "Class Game Represents the main game class responsible for managing game loops, scenes, rendering, and updates. Inheritance object Game Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Game Constructors Game(IRenderDevice, Viewport) Creates a new instance of the Game class. Declaration public Game(IRenderDevice renderDevice, Viewport viewport) Parameters Type Name Description IRenderDevice renderDevice The rendering device to use. Viewport viewport The viewport configuration. Properties AssetManager Gets or sets the asset manager for handling game assets. Declaration public AssetManager AssetManager { get; set; } Property Value Type Description AssetManager DeltaTime Gets or sets the time elapsed since the last frame in milliseconds. Declaration public double DeltaTime { get; set; } Property Value Type Description double FPS Gets or sets the current frames per second achieved by the game loop. Declaration public double FPS { get; set; } Property Value Type Description double LastFrame Gets or sets the timestamp of the last frame. Declaration public long LastFrame { get; set; } Property Value Type Description long RenderDevice Gets or sets the rendering device used by the game. Declaration public IRenderDevice RenderDevice { get; set; } Property Value Type Description IRenderDevice Run Gets or sets a value indicating whether the game loop is running. Declaration public bool Run { get; set; } Property Value Type Description bool Scenes Gets or sets the list of scenes in the game. Declaration public List<Scene> Scenes { get; set; } Property Value Type Description List<Scene> SelectedScene Gets or sets the currently selected scene. Declaration public Scene SelectedScene { get; set; } Property Value Type Description Scene Storage Gets or sets the storage object for managing game data. Declaration public Storage Storage { get; set; } Property Value Type Description Storage TargetFPS Gets or sets the target frames per second for the game loop. Declaration public int TargetFPS { get; set; } Property Value Type Description int Viewport Gets or sets the viewport configuration for rendering. Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods AddScene(Scene) Adds a scene to the list of scenes. Declaration public Scene AddScene(Scene scene) Parameters Type Name Description Scene scene The Scene object to be added. Returns Type Description Scene The added Scene object. GetElementCenterScreenLocation2D(GameElement) Returns the screen location of the given element with a center anchor. Declaration public Vec3 GetElementCenterScreenLocation2D(GameElement element) Parameters Type Name Description GameElement element The GameElement to get the centered screen coordinates for. Returns Type Description Vec3 A Vec3 representing the centered screen coordinates of the element. GetElementScreenLocation2D(GameElement) Get the screen coordinates of the given element. Declaration public Vec3 GetElementScreenLocation2D(GameElement element) Parameters Type Name Description GameElement element The GameElement to get the screen coordinates for. Returns Type Description Vec3 A Vec3 representing the screen coordinates of the element. GetSceneCord(Vec3) Transforms a display vector to a vector inside the scene. Declaration public Vec3 GetSceneCord(Vec3 location) Parameters Type Name Description Vec3 location The display vector to transform. Returns Type Description Vec3 A Vec3 representing the transformed vector inside the scene. InitGameElement(GameElement) Initializes a GameElement within the game environment. Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element The GameElement to be initialized. LoadScene(string) Loads a scene with the given name. Declaration public void LoadScene(string name) Parameters Type Name Description string name The name of the scene to be loaded. Loop() Main game loop. Handles updates and rendering. Declaration public void Loop() Start() Starts the main game loop. Declaration public void Start() Stop() Stops the main game loop. Declaration public void Stop() Events AfterRender Event triggered after rendering. Declaration public event GameEventHandler AfterRender Event Type Type Description GameEventHandler AfterUpdate Event triggered after the game update. Declaration public event GameEventHandler AfterUpdate Event Type Type Description GameEventHandler BeforeRender Event triggered before rendering. Declaration public event GameEventHandler BeforeRender Event Type Type Description GameEventHandler BeforeUpdate Event triggered before the game update. Declaration public event GameEventHandler BeforeUpdate Event Type Type Description GameEventHandler OnDispose Event triggered when the game is disposed. Declaration public event GameEventHandler OnDispose Event Type Type Description GameEventHandler OnInit Event triggered when the game initializes. Declaration public event GameEventHandler OnInit Event Type Type Description GameEventHandler OnRenderBeginn Event triggered at the beginning of rendering. Declaration public event GameEventHandler OnRenderBeginn Event Type Type Description GameEventHandler OnRenderEnd Event triggered at the end of rendering. Declaration public event GameEventHandler OnRenderEnd Event Type Type Description GameEventHandler OnUpdate Event triggered during the game update. Declaration public event GameEventHandler OnUpdate Event Type Type Description GameEventHandler"
  },
  "obj/api/Genesis.Core.GameElement.html": {
    "href": "obj/api/Genesis.Core.GameElement.html",
    "title": "Class GameElement | GFX",
    "keywords": "Class GameElement Represents a base class for game elements in the Genesis framework. Inheritance object GameElement BufferedSprite CameraElement Element3D Empty Qube RectElement Sprite Terrain2D Terrain3D Light Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public abstract class GameElement Constructors GameElement() Creates a new instance of the GameElement class. Declaration public GameElement() Properties Behaviors Gets or sets the list of behaviors associated with the game element. Declaration public List<IGameBehavior> Behaviors { get; set; } Property Value Type Description List<IGameBehavior> Children Gets or sets the list of child game elements. Declaration public List<GameElement> Children { get; set; } Property Value Type Description List<GameElement> Enabled Gets or sets a value indicating whether the game element is enabled. Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Gets or sets the 3D coordinates of the game element. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Gets or sets the name of the game element. Declaration public string Name { get; set; } Property Value Type Description string Parent Gets or sets the parent game element. Declaration public GameElement Parent { get; set; } Property Value Type Description GameElement Propertys Gets or sets the properties associated with the game element. Declaration public Dictionary<string, object> Propertys { get; set; } Property Value Type Description Dictionary<string, object> Rotation Gets or sets the 3D rotation of the game element. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Scene Gets or sets the scene to which the game element belongs. Declaration public Scene Scene { get; set; } Property Value Type Description Scene Size Gets or sets the 3D size of the game element. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Tag Gets or sets the tag associated with the game element. Declaration public string Tag { get; set; } Property Value Type Description string UUID Gets or sets the unique identifier for the game element. Declaration public string UUID { get; set; } Property Value Type Description string Methods AddBehavior(IGameBehavior) Adds a behavior to the game element. Declaration public void AddBehavior(IGameBehavior behavior) Parameters Type Name Description IGameBehavior behavior The behavior to be added. AddBehavior<T>(T) Adds a behavior of type T to the game element and returns it. Declaration public T AddBehavior<T>(T behavior) where T : IGameBehavior Parameters Type Name Description T behavior The behavior to be added. Returns Type Description T The added behavior of type T. Type Parameters Name Description T The type of the behavior. AddChild(GameElement) Adds a child game element to the current game element. Declaration public void AddChild(GameElement element) Parameters Type Name Description GameElement element The child game element to be added. GetBehavior<T>() Gets the first game behavior of type T. Declaration public IGameBehavior GetBehavior<T>() Returns Type Description IGameBehavior The first game behavior of type T, or null if not found. Type Parameters Name Description T The type of the behavior. GetBehaviors<T>() Returns all behaviors of type T. Declaration public List<IGameBehavior> GetBehaviors<T>() Returns Type Description List<IGameBehavior> A list of all behaviors of type T. Type Parameters Name Description T The type of the behavior. GetInstance(GameElement) Copies the properties from another game element instance to the current one. Declaration public virtual void GetInstance(GameElement element) Parameters Type Name Description GameElement element The game element from which to copy properties. Init(Game, IRenderDevice) Called when the game is initialized. Declaration public virtual void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnDestroy(Game) Called when the game element is disposed. Declaration public virtual void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. OnRender(Game, IRenderDevice) Called when the game is rendered. Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnUpdate(Game, IRenderDevice) Called when the game is updated. Declaration public virtual void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device."
  },
  "obj/api/Genesis.Core.GameElements.BufferedSprite.html": {
    "href": "obj/api/Genesis.Core.GameElements.BufferedSprite.html",
    "title": "Class BufferedSprite | GFX",
    "keywords": "Class BufferedSprite Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates. Inheritance object GameElement BufferedSprite Inherited Members GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class BufferedSprite : GameElement Constructors BufferedSprite(string, Vec3, Texture) Creates a new buffered sprite with the specified name, location, and texture. Declaration public BufferedSprite(string name, Vec3 location, Texture texture) Parameters Type Name Description string name The name of the game element. Vec3 location The location of the game element. Texture texture The texture applied to the sprite. Properties Colors Gets or sets the list of colors for the sprite. Declaration public List<float> Colors { get; set; } Property Value Type Description List<float> TexCoords Gets or sets the list of texture coordinates for the sprite. Declaration public List<float> TexCoords { get; set; } Property Value Type Description List<float> Texture Gets or sets the texture applied to the sprite. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Verticies Gets or sets the list of vertices for the sprite. Declaration public List<float> Verticies { get; set; } Property Value Type Description List<float> Methods AddShape(Vec3, Vec3) Adds a new rectangular shape at the given location and with the given size to the sprite. Declaration public void AddShape(Vec3 location, Vec3 size) Parameters Type Name Description Vec3 location The location for the sprite. Vec3 size The size for the sprite. Init(Game, IRenderDevice) Initializes the game element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnRender(Game, IRenderDevice) Renders the game element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Updates the game element. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnUpdate(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.CameraElement.html": {
    "href": "obj/api/Genesis.Core.GameElements.CameraElement.html",
    "title": "Class CameraElement | GFX",
    "keywords": "Class CameraElement Represents a game element that serves as a camera within the game world. Inheritance object GameElement CameraElement Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class CameraElement : GameElement Constructors CameraElement(string, Camera) Initializes a new instance of the CameraElement class with an existing camera. Declaration public CameraElement(string name, Camera camera) Parameters Type Name Description string name The name of the camera element. Camera camera The camera object to associate with this element. CameraElement(string, Vec3, Vec3, float, float, CameraType) Initializes a new instance of the CameraElement class with specified parameters. Declaration public CameraElement(string name, Vec3 location, Vec3 cameraSize, float near, float far, CameraType type) Parameters Type Name Description string name The name of the camera element. Vec3 location The initial location of the camera. Vec3 cameraSize The size of the camera. float near The near clipping plane distance of the camera. float far The far clipping plane distance of the camera. CameraType type The type of the camera (perspective or orthographic). Properties Camera Gets or sets the camera associated with this element. Declaration public Camera Camera { get; set; } Property Value Type Description Camera Location Gets or sets the location of the camera within the game world. Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Rotation Gets or sets the rotation of the camera. Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Size Gets or sets the size of the camera. Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3"
  },
  "obj/api/Genesis.Core.GameElements.Element3D.html": {
    "href": "obj/api/Genesis.Core.GameElements.Element3D.html",
    "title": "Class Element3D | GFX",
    "keywords": "Class Element3D Represents a 3D element in the game world, such as a 3D model with shaders. Inheritance object GameElement Element3D Skybox Inherited Members GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Element3D : GameElement Constructors Element3D(string, string, Vec3, Vec3, Vec3) Initializes a new instance of the Element3D class with specified parameters. Declaration public Element3D(string name, string path, Vec3 location, Vec3 rotation, Vec3 scale) Parameters Type Name Description string name The name of the 3D element. string path The file path to the 3D model. Vec3 location The initial location of the 3D element. Vec3 rotation The initial rotation of the 3D element. Vec3 scale The initial scale of the 3D element. Properties Materials Gets or sets the materials from the model Declaration public List<Material> Materials { get; set; } Property Value Type Description List<Material> Meshes Gets or sets the meshes from the model Declaration public List<Mesh> Meshes { get; set; } Property Value Type Description List<Mesh> Shader Gets or sets the shader program associated with this 3D element. Declaration public ShaderProgram Shader { get; set; } Property Value Type Description ShaderProgram Methods GetMaterialBuffers(int) Gets the material buffers for a specific material index. Declaration public MaterialBuffer GetMaterialBuffers(int material) Parameters Type Name Description int material The material index. Returns Type Description MaterialBuffer A MaterialBuffer containing vertex, normal, and texture coordinate data. GetShape() Gets the shape data of the 3D element. Declaration public float[] GetShape() Returns Type Description float[] An array representing the shape data. Init(Game, IRenderDevice) Called when the game is being initialized. Override to provide custom initialization logic. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Called when the game element is being destroyed. Override to provide custom cleanup logic. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Called when the game is being rendered. Override to provide custom rendering logic. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Called when the game is being updated. Override to provide custom update logic. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnUpdate(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.Empty.html": {
    "href": "obj/api/Genesis.Core.GameElements.Empty.html",
    "title": "Class Empty | GFX",
    "keywords": "Class Empty Represents an empty game element. Inheritance object GameElement Empty Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Empty : GameElement Constructors Empty() Initializes a new instance of the Empty class. Declaration public Empty()"
  },
  "obj/api/Genesis.Core.GameElements.Qube.html": {
    "href": "obj/api/Genesis.Core.GameElements.Qube.html",
    "title": "Class Qube | GFX",
    "keywords": "Class Qube Represents a cube-shaped game element with customizable appearance. Inheritance object GameElement Qube Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Qube : GameElement Constructors Qube(string, Vec3) Initializes a new instance of the Qube class with default settings. Declaration public Qube(string name, Vec3 location) Parameters Type Name Description string name The name of the cube. Vec3 location The initial location of the cube. Qube(string, Vec3, Vec3) Initializes a new instance of the Qube class with specified size. Declaration public Qube(string Name, Vec3 location, Vec3 size) Parameters Type Name Description string Name Vec3 location The initial location of the cube. Vec3 size The size of the cube. Qube(string, Vec3, Vec3, Vec3) Initializes a new instance of the Qube class with specified size and rotation. Declaration public Qube(string name, Vec3 location, Vec3 size, Vec3 rotation) Parameters Type Name Description string name The name of the cube. Vec3 location The initial location of the cube. Vec3 size The size of the cube. Vec3 rotation The initial rotation of the cube. Properties Color Gets or sets the color of the cube. Declaration public Color Color { get; set; } Property Value Type Description Color Shader Gets or sets the shader program associated with this cube. Declaration public ShaderProgram Shader { get; set; } Property Value Type Description ShaderProgram Shape Gets or sets the cube shape definition. Declaration public QubeShape Shape { get; set; } Property Value Type Description QubeShape Methods GetColors(Color) Gets an array of color values based on the specified color. Declaration public static float[] GetColors(Color color) Parameters Type Name Description Color color The color for the cube faces. Returns Type Description float[] An array of color values for the cube faces. Init(Game, IRenderDevice) Initializes the game element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnRender(Game, IRenderDevice) Renders the game element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.RectElement.html": {
    "href": "obj/api/Genesis.Core.GameElements.RectElement.html",
    "title": "Class RectElement | GFX",
    "keywords": "Class RectElement Simple rectangle element Inheritance object GameElement RectElement Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class RectElement : GameElement Constructors RectElement(string, Vec3, Vec3) Creates a new rectangle Declaration public RectElement(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name The name of the rectangle. Vec3 location The location of the rectangle. Vec3 size The size of the rectangle. Properties BorderColor Gets or sets the color of the rectangle border. Declaration public Color BorderColor { get; set; } Property Value Type Description Color BorderWidth Gets or sets the width of the rectangle border. Declaration public float BorderWidth { get; set; } Property Value Type Description float Fill Gets or sets the fill color of the rectangle. Declaration public Color Fill { get; set; } Property Value Type Description Color HasBorder Gets or sets a value indicating whether the rectangle has a border. Declaration public bool HasBorder { get; set; } Property Value Type Description bool HasFill Gets or sets a value indicating whether the rectangle has fill color. Declaration public bool HasFill { get; set; } Property Value Type Description bool Methods OnRender(Game, IRenderDevice) Renders the rectangle Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.Skybox.html": {
    "href": "obj/api/Genesis.Core.GameElements.Skybox.html",
    "title": "Class Skybox | GFX",
    "keywords": "Class Skybox Represents a skybox element in a 3D environment. Inheritance object GameElement Element3D Skybox Inherited Members Element3D.Init(Game, IRenderDevice) Element3D.OnRender(Game, IRenderDevice) Element3D.OnDestroy(Game) Element3D.GetShape() Element3D.GetMaterialBuffers(int) Element3D.Shader Element3D.Meshes Element3D.Materials GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Skybox : Element3D Constructors Skybox(string, string, Vec3, Vec3, Vec3) Initializes a new instance of the Skybox class with specified name, texture path, location, rotation, and scale. Declaration public Skybox(string name, string path, Vec3 location, Vec3 rotation, Vec3 scale) Parameters Type Name Description string name The name of the skybox. string path The path to the texture for the skybox. Vec3 location The initial location of the skybox. Vec3 rotation The initial rotation of the skybox. Vec3 scale The initial scale of the skybox. Methods OnUpdate(Game, IRenderDevice) Updates the skybox position based on the selected scene's camera location. Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides Element3D.OnUpdate(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.Sprite.html": {
    "href": "obj/api/Genesis.Core.GameElements.Sprite.html",
    "title": "Class Sprite | GFX",
    "keywords": "Class Sprite Represents a sprite element in a 2D or 3D environment. Inheritance object GameElement Sprite Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Sprite : GameElement Constructors Sprite(string, Vec3, Vec3, Texture) Initializes a new instance of the Sprite class with specified name, location, size, and texture. Declaration public Sprite(string name, Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description string name The name of the sprite. Vec3 location The initial location of the sprite. Vec3 size The size of the sprite. Texture texture The texture for the sprite. Properties Color Gets or sets the color of the sprite. Declaration public Color Color { get; set; } Property Value Type Description Color OcclusionCulling Gets or sets a value indicating whether occlusion culling is enabled for the sprite. Declaration public bool OcclusionCulling { get; set; } Property Value Type Description bool TexCoords Gets or sets the texture coordinates of the sprite. Declaration public TexCoords TexCoords { get; set; } Property Value Type Description TexCoords Texture Gets or sets the texture of the sprite. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods CalculateVerticies() Calculates the vertex coordinates of the sprite. Declaration public float[] CalculateVerticies() Returns Type Description float[] An array containing the vertex coordinates of the sprite. GetBounds2D() Gets the 2D bounds of the sprite. Declaration public Rect GetBounds2D() Returns Type Description Rect A rectangular region representing the 2D bounds of the sprite. GetCenterLocation() Gets the center location of the sprite. Declaration public Vec3 GetCenterLocation() Returns Type Description Vec3 The center location of the sprite. Init(Game, IRenderDevice) Initializes the sprite element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Handles cleanup and resource disposal when the sprite is destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the sprite element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.Terrain2D.html": {
    "href": "obj/api/Genesis.Core.GameElements.Terrain2D.html",
    "title": "Class Terrain2D | GFX",
    "keywords": "Class Terrain2D Represents a 2D terrain element. Inheritance object GameElement Terrain2D Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Terrain2D : GameElement Constructors Terrain2D(string, Vec3, float, float, float, Texture) Initializes a new instance of the Terrain2D class with specified name, location, cell counts, cell size, and texture. Declaration public Terrain2D(string name, Vec3 location, float cellsX, float cellsY, float cellSize, Texture texture) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. float cellsX The number of cells in the X direction. float cellsY The number of cells in the Y direction. float cellSize The size of each cell. Texture texture The texture for the terrain. Properties CellSize Gets or sets the size of each cell. Declaration public float CellSize { get; set; } Property Value Type Description float CellsX Gets or sets the number of cells in the X direction. Declaration public float CellsX { get; set; } Property Value Type Description float CellsY Gets or sets the number of cells in the Y direction. Declaration public float CellsY { get; set; } Property Value Type Description float Texture Gets or sets the texture of the terrain. Declaration public Texture Texture { get; set; } Property Value Type Description Texture Methods GetBounds() Gets the 2D bounds of the terrain. Declaration public Rect GetBounds() Returns Type Description Rect A rectangular region representing the 2D bounds of the terrain. Init(Game, IRenderDevice) Initializes the terrain element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.Init(Game, IRenderDevice) OnDestroy(Game) Handles cleanup and resource disposal when the terrain is destroyed. Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. Overrides GameElement.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the terrain element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The render device used for rendering. Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.Terrain3D.html": {
    "href": "obj/api/Genesis.Core.GameElements.Terrain3D.html",
    "title": "Class Terrain3D | GFX",
    "keywords": "Class Terrain3D Represents a 3D terrain element. Inheritance object GameElement Terrain3D Inherited Members GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public class Terrain3D : GameElement Constructors Terrain3D(string, Vec3) Initializes a new instance of the Terrain3D class with default values. Declaration public Terrain3D(string name, Vec3 location) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. Terrain3D(string, Vec3, int, int, int, int) Initializes a new instance of the Terrain3D class with specified name, location, cell counts, and cell dimensions. Declaration public Terrain3D(string name, Vec3 location, int cellsX, int cellsZ, int cellWidth, int cellHeight) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. int cellsX The number of cells in the X direction. int cellsZ The number of cells in the Z direction. int cellWidth The width of each cell. int cellHeight The height of each cell. Terrain3D(string, Vec3, float, Bitmap) Initializes a new instance of the Terrain3D class with specified name, location, height value, and heightmap. Declaration public Terrain3D(string name, Vec3 location, float heightValue, Bitmap heightmap) Parameters Type Name Description string name The name of the terrain. Vec3 location The initial location of the terrain. float heightValue The height value of the terrain. Bitmap heightmap The heightmap for generating the terrain. Properties AltColor Gets or sets the alternate color of the terrain. Declaration public Color AltColor { get; set; } Property Value Type Description Color Color Gets or sets the color of the terrain. Declaration public Color Color { get; set; } Property Value Type Description Color TerrainData Gets or sets the terrain data. Declaration public TerrainData TerrainData { get; set; } Property Value Type Description TerrainData Methods CreateTerrainTileColor(Color) Creates color data for a terrain tile. Declaration public static float[] CreateTerrainTileColor(Color color) Parameters Type Name Description Color color Returns Type Description float[] GenerateTerrain(Bitmap, float, float) Generates terrain data from a heightmap. Declaration public static TerrainData GenerateTerrain(Bitmap heightmap, float heightScale, float cellSize) Parameters Type Name Description Bitmap heightmap float heightScale float cellSize Returns Type Description TerrainData GenerateTerrainData(int, int, int, int, Color, Color) Generates terrain data based on specified parameters. Declaration public static TerrainData GenerateTerrainData(int cellsX, int cellsZ, int cellWidth, int cellHeight, Color colorA, Color colorB) Parameters Type Name Description int cellsX int cellsZ int cellWidth int cellHeight Color colorA Color colorB Returns Type Description TerrainData GenerateTerrainTile(float, float, int, int) Generates a tile for the terrain grid. Declaration public static float[] GenerateTerrainTile(float x, float z, int cellWidth, int cellHeight) Parameters Type Name Description float x float z int cellWidth int cellHeight Returns Type Description float[] Init(Game, IRenderDevice) Initializes the terrain element. Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.Init(Game, IRenderDevice) OnRender(Game, IRenderDevice) Renders the terrain element. Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides GameElement.OnRender(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.GameElements.TerrainData.html": {
    "href": "obj/api/Genesis.Core.GameElements.TerrainData.html",
    "title": "Struct TerrainData | GFX",
    "keywords": "Struct TerrainData Represents a 3D terrain element. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Core.GameElements Assembly: Genesis.dll Syntax public struct TerrainData Fields cellHeight Declaration public int cellHeight Field Value Type Description int cellWidth Declaration public int cellWidth Field Value Type Description int cellsX Declaration public int cellsX Field Value Type Description int cellsZ Declaration public int cellsZ Field Value Type Description int colors Declaration public float[] colors Field Value Type Description float[] tris Declaration public int tris Field Value Type Description int verticies Declaration public float[] verticies Field Value Type Description float[]"
  },
  "obj/api/Genesis.Core.GameElements.html": {
    "href": "obj/api/Genesis.Core.GameElements.html",
    "title": "Namespace Genesis.Core.GameElements | GFX",
    "keywords": "Namespace Genesis.Core.GameElements Classes BufferedSprite Represents a game element that creates a buffered sprite with vertices, colors, and texture coordinates. CameraElement Represents a game element that serves as a camera within the game world. Element3D Represents a 3D element in the game world, such as a 3D model with shaders. Empty Represents an empty game element. Qube Represents a cube-shaped game element with customizable appearance. RectElement Simple rectangle element Skybox Represents a skybox element in a 3D environment. Sprite Represents a sprite element in a 2D or 3D environment. Terrain2D Represents a 2D terrain element. Terrain3D Represents a 3D terrain element. Structs TerrainData Represents a 3D terrain element."
  },
  "obj/api/Genesis.Core.GameEventHandler.html": {
    "href": "obj/api/Genesis.Core.GameEventHandler.html",
    "title": "Delegate GameEventHandler | GFX",
    "keywords": "Delegate GameEventHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void GameEventHandler(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Constructors GameEventHandler(object, IntPtr) Declaration public GameEventHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, IRenderDevice, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, IRenderDevice renderDevice, AsyncCallback callback, object @object) Parameters Type Name Description Game game IRenderDevice renderDevice AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, IRenderDevice) Declaration public virtual void Invoke(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice"
  },
  "obj/api/Genesis.Core.GenesisWindow.html": {
    "href": "obj/api/Genesis.Core.GenesisWindow.html",
    "title": "Class GenesisWindow | GFX",
    "keywords": "Class GenesisWindow Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GenesisWindow Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.Dispose(bool) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.Menu Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiParent Form.MergedMenu Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class GenesisWindow : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Constructors GenesisWindow() Declaration public GenesisWindow() Properties Game Declaration public Game Game { get; set; } Property Value Type Description Game Methods Init(Game) Declaration public virtual void Init(Game game) Parameters Type Name Description Game game OnResize(EventArgs) Declaration protected override void OnResize(EventArgs e) Parameters Type Name Description EventArgs e Overrides Form.OnResize(EventArgs) Start(Game) Declaration public virtual void Start(Game game) Parameters Type Name Description Game game Update(Game) Declaration public virtual void Update(Game game) Parameters Type Name Description Game game Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "obj/api/Genesis.Core.IGameBehavior.html": {
    "href": "obj/api/Genesis.Core.IGameBehavior.html",
    "title": "Class IGameBehavior | GFX",
    "keywords": "Class IGameBehavior Represents the base class for game behaviors in the Genesis framework. Inheritance object IGameBehavior AnimationBehavior SpriteMovementController PhysicsBehavior Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public abstract class IGameBehavior Constructors IGameBehavior() Declaration protected IGameBehavior() Properties Parent Gets or sets the parent game element to which this behavior is attached. Declaration public GameElement Parent { get; set; } Property Value Type Description GameElement Methods OnDestroy(Game, GameElement) Called when the game behavior is being destroyed. Declaration public abstract void OnDestroy(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnInit(Game, GameElement) Called when the game behavior is initialized. Declaration public abstract void OnInit(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnRender(Game, GameElement) Called when the game behavior is rendered. Declaration public abstract void OnRender(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element. OnUpdate(Game, GameElement) Called when the game behavior is updated. Declaration public abstract void OnUpdate(Game game, GameElement parent) Parameters Type Name Description Game game The game instance. GameElement parent The parent game element."
  },
  "obj/api/Genesis.Core.Input.html": {
    "href": "obj/api/Genesis.Core.Input.html",
    "title": "Class Input | GFX",
    "keywords": "Class Input Provides utility methods for handling user input in the Genesis framework. Inheritance object Input Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Input Constructors Input() Declaration public Input() Methods GetAsyncKeyState(int) Gets the state of the specified key. Declaration public static extern short GetAsyncKeyState(int vKey) Parameters Type Name Description int vKey The virtual key code to check. Returns Type Description short True if the key is down; otherwise, false. GetAsyncKeyState(Keys) Gets the state of the specified key. Declaration public static extern short GetAsyncKeyState(Keys vKey) Parameters Type Name Description Keys vKey The virtual key code to check. Returns Type Description short True if the key is down; otherwise, false. GetMousePos() Gets the current mouse position. Declaration public static Vec3 GetMousePos() Returns Type Description Vec3 A Vec3 representing the current mouse position. GetRefMousePos(Game) Gets the mouse position relative to the control associated with the specified game instance. Declaration public static Vec3 GetRefMousePos(Game game) Parameters Type Name Description Game game The game instance. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. GetRefMousePos(IntPtr) Gets the mouse position relative to the control associated with the specified handle. Declaration public static Vec3 GetRefMousePos(IntPtr handle) Parameters Type Name Description IntPtr handle The handle of the control. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. GetRefMousePos(Control) Gets the mouse position relative to the specified control. Declaration public static Vec3 GetRefMousePos(Control control) Parameters Type Name Description Control control The control relative to which the mouse position is obtained. Returns Type Description Vec3 A Vec3 representing the mouse position relative to the control. IsKeyDown(Keys) Checks if the specified key is currently pressed. Declaration public static bool IsKeyDown(Keys vKey) Parameters Type Name Description Keys vKey The virtual key to check. Returns Type Description bool True if the key is down; otherwise, false."
  },
  "obj/api/Genesis.Core.Layer.html": {
    "href": "obj/api/Genesis.Core.Layer.html",
    "title": "Class Layer | GFX",
    "keywords": "Class Layer Represents a layer containing game elements in the Genesis framework. Inheritance object Layer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Layer Constructors Layer() Creates a new instance of the Layer class. Declaration public Layer() Layer(string) Creates a new instance of the Layer class with the specified name. Declaration public Layer(string name) Parameters Type Name Description string name The name of the layer. Layer(string, bool) Creates a new instance of the Layer class with the specified name and updateElements flag. Declaration public Layer(string name, bool updateElements) Parameters Type Name Description string name The name of the layer. bool updateElements Flag indicating whether the elements within the layer should be updated. Properties Elements Gets or sets the list of game elements within the layer. Declaration public List<GameElement> Elements { get; set; } Property Value Type Description List<GameElement> Name Gets or sets the name of the layer. Declaration public string Name { get; set; } Property Value Type Description string UpdateElements Gets or sets a value indicating whether the elements within the layer should be updated. Declaration public bool UpdateElements { get; set; } Property Value Type Description bool Methods Init(Game, IRenderDevice) Initializes all game elements within the layer. Declaration public void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnDestroy(Game) Destroys all game elements within the layer. Declaration public void OnDestroy(Game game) Parameters Type Name Description Game game The game instance. OnRender(Game, IRenderDevice) Renders all game elements within the layer. Declaration public void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device. OnUpdate(Game, IRenderDevice) Updates all game elements within the layer if the UpdateElements flag is true. Declaration public void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game The game instance. IRenderDevice renderDevice The rendering device."
  },
  "obj/api/Genesis.Core.Light.html": {
    "href": "obj/api/Genesis.Core.Light.html",
    "title": "Class Light | GFX",
    "keywords": "Class Light Represents a light source in the Genesis framework. Inheritance object GameElement Light Inherited Members GameElement.Init(Game, IRenderDevice) GameElement.OnRender(Game, IRenderDevice) GameElement.OnUpdate(Game, IRenderDevice) GameElement.OnDestroy(Game) GameElement.AddBehavior<T>(T) GameElement.AddBehavior(IGameBehavior) GameElement.GetBehavior<T>() GameElement.GetBehaviors<T>() GameElement.AddChild(GameElement) GameElement.GetInstance(GameElement) GameElement.Name GameElement.Tag GameElement.Location GameElement.Rotation GameElement.Size GameElement.Behaviors GameElement.Scene GameElement.Enabled GameElement.Propertys GameElement.Children GameElement.Parent GameElement.UUID object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Light : GameElement Constructors Light(string, Vec3) Creates a new instance of the Light class with the specified name and location. Declaration public Light(string name, Vec3 location) Parameters Type Name Description string name The name of the light. Vec3 location The 3D location of the light. Properties Intensity Gets or sets the intensity of the light. Declaration public float Intensity { get; set; } Property Value Type Description float LightColor Gets or sets the color of the light. Declaration public Color LightColor { get; set; } Property Value Type Description Color Methods GetLightColor() Returns the light color in RGB values normalized between 0 and 1. Declaration public Vec3 GetLightColor() Returns Type Description Vec3 A Vec3 representing the normalized RGB values of the light color. GetLightDirection(Camera) Returns the direction vector from the light to the camera. Declaration public Vec3 GetLightDirection(Camera camera) Parameters Type Name Description Camera camera The camera to which the direction is calculated. Returns Type Description Vec3 The normalized vector representing the light direction."
  },
  "obj/api/Genesis.Core.Scene.html": {
    "href": "obj/api/Genesis.Core.Scene.html",
    "title": "Class Scene | GFX",
    "keywords": "Class Scene Represents a game scene in the Genesis framework. Inheritance object Scene Scene3D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Scene Constructors Scene() Creates a new game scene. Declaration public Scene() Scene(string) Creates a new game scene with the specified name. Declaration public Scene(string name) Parameters Type Name Description string name Properties AfterCanvasRender Event handler triggered after UI canvas rendering. Declaration public SceneEventHandler AfterCanvasRender { get; set; } Property Value Type Description SceneEventHandler AfterSceneRender Event handler triggered after scene rendering. Declaration public SceneEventHandler AfterSceneRender { get; set; } Property Value Type Description SceneEventHandler BeforeCanvasPreperation Event handler triggered before UI canvas preparation. Declaration public SceneEventHandler BeforeCanvasPreperation { get; set; } Property Value Type Description SceneEventHandler BeforeCanvasRender Event handler triggered before UI canvas rendering. Declaration public SceneEventHandler BeforeCanvasRender { get; set; } Property Value Type Description SceneEventHandler BeforeScenePreperation Event handler triggered before scene preparation. Declaration public SceneEventHandler BeforeScenePreperation { get; set; } Property Value Type Description SceneEventHandler BeforeSceneRender Event handler triggered before scene rendering. Declaration public SceneEventHandler BeforeSceneRender { get; set; } Property Value Type Description SceneEventHandler Camera Gets or sets the camera used for rendering the scene. Declaration public Camera Camera { get; set; } Property Value Type Description Camera Canvas Gets or sets the list of UI canvases within the scene. Declaration public List<Canvas> Canvas { get; set; } Property Value Type Description List<Canvas> Layer Gets or sets the list of layers within the scene. Declaration public List<Layer> Layer { get; set; } Property Value Type Description List<Layer> Name Gets or sets the name of the scene. Declaration public string Name { get; set; } Property Value Type Description string OnSceneResize Event handler triggered when the scene is resized. Declaration public SceneSizeEvenHandler OnSceneResize { get; set; } Property Value Type Description SceneSizeEvenHandler PhysicHandler Gets or sets the physics handler for the scene. Declaration public PhysicHandler PhysicHandler { get; set; } Property Value Type Description PhysicHandler Methods AddCanvas(Canvas) Adds a new ui canvas to the scene Declaration public Canvas AddCanvas(Canvas canvas) Parameters Type Name Description Canvas canvas Returns Type Description Canvas AddGameElement(string, GameElement) Adds a GameElement in the scene. It will be placed in the given layer Declaration public void AddGameElement(string layerName, GameElement gameElement) Parameters Type Name Description string layerName GameElement gameElement AddGameElements(string, List<GameElement>) Adds GameElements into the scene. The elements will be placed in the given layer Declaration public void AddGameElements(string layer, List<GameElement> gameElements) Parameters Type Name Description string layer List<GameElement> gameElements AddLayer(Layer) Adds a layer to the scene Declaration public void AddLayer(Layer layer) Parameters Type Name Description Layer layer AddLayer(string) Adds a layer to the scene Declaration public void AddLayer(string layerName) Parameters Type Name Description string layerName GetCanvas(string) Gets the canvas with the given name Declaration public Canvas GetCanvas(string name) Parameters Type Name Description string name Returns Type Description Canvas GetElement(string) Gets the element with the given name. This function searchs in every layer until it finds a element with an equal name. Declaration public GameElement GetElement(string name) Parameters Type Name Description string name Returns Type Description GameElement GetElement(string, string) Gets the element with the given name out of the given layer. Declaration public GameElement GetElement(string layerName, string name) Parameters Type Name Description string layerName string name Returns Type Description GameElement GetElements(string) Gets the elements from the given layer Declaration public List<GameElement> GetElements(string layername) Parameters Type Name Description string layername Returns Type Description List<GameElement> GetElements(string[]) Gets the elements from the given layers Declaration public List<GameElement> GetElements(string[] layer) Parameters Type Name Description string[] layer Returns Type Description List<GameElement> GetLayer(string) Gets the layer with the given name Declaration public Layer GetLayer(string layername) Parameters Type Name Description string layername Returns Type Description Layer GetWidget(string, string) Gets a entity with the given name from the canvas Declaration public Widget GetWidget(string canvasName, string entityName) Parameters Type Name Description string canvasName string entityName Returns Type Description Widget Init(Game, IRenderDevice) Initial the scene Declaration public virtual void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice OnDestroy(Game) Destroys the scene data Declaration public virtual void OnDestroy(Game game) Parameters Type Name Description Game game OnRender(Game, IRenderDevice) Renders the scene Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice OnUpdate(Game, IRenderDevice) Update the scene and the elements. Called every frame Declaration public virtual void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice RemoveCanvas(Canvas) Removes the ui canvas from the scene Declaration public void RemoveCanvas(Canvas canvas) Parameters Type Name Description Canvas canvas RemoveCanvas(string) Removes the ui canvas with the given name from the scene Declaration public void RemoveCanvas(string canvasName) Parameters Type Name Description string canvasName RemoveElement(GameElement) Removes a element from the scene. This function will look in all layer for the element. Declaration public void RemoveElement(GameElement element) Parameters Type Name Description GameElement element RemoveElement(string, GameElement) Removes a element from the given layer Declaration public void RemoveElement(string layerName, GameElement element) Parameters Type Name Description string layerName GameElement element RemoveLayer(Layer) Removes a layer from the scene Declaration public void RemoveLayer(Layer layer) Parameters Type Name Description Layer layer ResizeScene(Viewport) Resizes the scene by invoking the event handler for scene resize. Declaration public virtual void ResizeScene(Viewport viewport) Parameters Type Name Description Viewport viewport The viewport containing information about the new dimensions."
  },
  "obj/api/Genesis.Core.Scene3D.html": {
    "href": "obj/api/Genesis.Core.Scene3D.html",
    "title": "Class Scene3D | GFX",
    "keywords": "Class Scene3D Creates a scene for 3D rendering. This scene contains lightning and a optional skybox. Inheritance object Scene Scene3D Inherited Members Scene.AddLayer(Layer) Scene.AddLayer(string) Scene.AddCanvas(Canvas) Scene.RemoveLayer(Layer) Scene.GetLayer(string) Scene.AddGameElement(string, GameElement) Scene.AddGameElements(string, List<GameElement>) Scene.GetElements(string) Scene.GetElements(string[]) Scene.GetElement(string) Scene.GetElement(string, string) Scene.GetCanvas(string) Scene.GetWidget(string, string) Scene.RemoveElement(GameElement) Scene.RemoveElement(string, GameElement) Scene.RemoveCanvas(Canvas) Scene.RemoveCanvas(string) Scene.ResizeScene(Viewport) Scene.Name Scene.Layer Scene.Camera Scene.Canvas Scene.PhysicHandler Scene.BeforeScenePreperation Scene.BeforeSceneRender Scene.AfterSceneRender Scene.BeforeCanvasPreperation Scene.BeforeCanvasRender Scene.AfterCanvasRender Scene.OnSceneResize object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Scene3D : Scene Constructors Scene3D(string, Light) Declaration public Scene3D(string name, Light sun) Parameters Type Name Description string name Light sun Properties Skybox Declaration public Skybox Skybox { get; set; } Property Value Type Description Skybox Sun Declaration public Light Sun { get; set; } Property Value Type Description Light Methods Init(Game, IRenderDevice) Initial the scene Declaration public override void Init(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides Scene.Init(Game, IRenderDevice) OnDestroy(Game) Destroys the scene data Declaration public override void OnDestroy(Game game) Parameters Type Name Description Game game Overrides Scene.OnDestroy(Game) OnRender(Game, IRenderDevice) Renders the scene Declaration public override void OnRender(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides Scene.OnRender(Game, IRenderDevice) OnUpdate(Game, IRenderDevice) Update the scene and the elements. Called every frame Declaration public override void OnUpdate(Game game, IRenderDevice renderDevice) Parameters Type Name Description Game game IRenderDevice renderDevice Overrides Scene.OnUpdate(Game, IRenderDevice)"
  },
  "obj/api/Genesis.Core.SceneEventHandler.html": {
    "href": "obj/api/Genesis.Core.SceneEventHandler.html",
    "title": "Delegate SceneEventHandler | GFX",
    "keywords": "Delegate SceneEventHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void SceneEventHandler(Scene scene, Game game, IRenderDevice renderDevice) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice Constructors SceneEventHandler(object, IntPtr) Declaration public SceneEventHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, IRenderDevice, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, IRenderDevice renderDevice, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, IRenderDevice) Declaration public virtual void Invoke(Scene scene, Game game, IRenderDevice renderDevice) Parameters Type Name Description Scene scene Game game IRenderDevice renderDevice"
  },
  "obj/api/Genesis.Core.SceneSizeEvenHandler.html": {
    "href": "obj/api/Genesis.Core.SceneSizeEvenHandler.html",
    "title": "Delegate SceneSizeEvenHandler | GFX",
    "keywords": "Delegate SceneSizeEvenHandler Namespace: Genesis.Core Assembly: Genesis.dll Syntax public delegate void SceneSizeEvenHandler(Scene scene, Viewport viewport) Parameters Type Name Description Scene scene Viewport viewport Constructors SceneSizeEvenHandler(object, IntPtr) Declaration public SceneSizeEvenHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Viewport, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Viewport viewport, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Viewport viewport AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Viewport) Declaration public virtual void Invoke(Scene scene, Viewport viewport) Parameters Type Name Description Scene scene Viewport viewport"
  },
  "obj/api/Genesis.Core.Storage.html": {
    "href": "obj/api/Genesis.Core.Storage.html",
    "title": "Class Storage | GFX",
    "keywords": "Class Storage Class for dynamic clearing not used elements. Inheritance object Storage Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Storage Constructors Storage() Create a new Storage instance Declaration public Storage() Properties ManagedElements Declaration public List<GameElement> ManagedElements { get; set; } Property Value Type Description List<GameElement> Methods ManageElement(GameElement) Add an element which get managed Declaration public void ManageElement(GameElement element) Parameters Type Name Description GameElement element Process(Game, Scene) Removes disabled elements from the game and the garbage collector Declaration public void Process(Game game, Scene scene) Parameters Type Name Description Game game Scene scene"
  },
  "obj/api/Genesis.Core.Utils.html": {
    "href": "obj/api/Genesis.Core.Utils.html",
    "title": "Class Utils | GFX",
    "keywords": "Class Utils Inheritance object Utils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Core Assembly: Genesis.dll Syntax public class Utils Constructors Utils() Declaration public Utils() Methods CalculateCameraFront(Camera) Declaration public static Vec3 CalculateCameraFront(Camera camera) Parameters Type Name Description Camera camera Returns Type Description Vec3 CalculateCameraFront2(Camera) Declaration public static Vec3 CalculateCameraFront2(Camera camera) Parameters Type Name Description Camera camera Returns Type Description Vec3 CalculateDirectionVector(Vec3, Vec3) Declaration public static Vec3 CalculateDirectionVector(Vec3 pointA, Vec3 pointB) Parameters Type Name Description Vec3 pointA Vec3 pointB Returns Type Description Vec3 CalculateFrontVec3(Vec3, Vec3, float) Declaration public static Vec3 CalculateFrontVec3(Vec3 location, Vec3 rotation, float dist) Parameters Type Name Description Vec3 location Vec3 rotation float dist Returns Type Description Vec3 CalculatePitch(Vec3, Vec3) Calculate the pitch Declaration public static float CalculatePitch(Vec3 point1, Vec3 point2) Parameters Type Name Description Vec3 point1 Vec3 point2 Returns Type Description float CalculateYaw(Vec3, Vec3) Calculates the yaw Declaration public static float CalculateYaw(Vec3 point1, Vec3 point2) Parameters Type Name Description Vec3 point1 Vec3 point2 Returns Type Description float ConvertBase64ToBitmap(string) Declaration public static Bitmap ConvertBase64ToBitmap(string base64) Parameters Type Name Description string base64 Returns Type Description Bitmap ConvertBitmapToBase64(Bitmap) Declaration public static string ConvertBitmapToBase64(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Returns Type Description string ConvertColor(Color) Convert an System.Drawing.Color into an float array Declaration public static float[] ConvertColor(Color color) Parameters Type Name Description Color color Returns Type Description float[] ConvertDrawingColor(float, float, float, float) Declaration public static Color ConvertDrawingColor(float a, float r, float g, float b) Parameters Type Name Description float a float r float g float b Returns Type Description Color CreateEmptyNormalMap(int, int) Creates an empty normal map Declaration public static Bitmap CreateEmptyNormalMap(int width, int height) Parameters Type Name Description int width int height Returns Type Description Bitmap CreateEmptyTexture(int, int) Creates an empty texture Declaration public static Bitmap CreateEmptyTexture(int width, int height) Parameters Type Name Description int width int height Returns Type Description Bitmap EulerToQuaternion(Vec3) Converts an euler to an quaternion Declaration public static quat EulerToQuaternion(Vec3 euler) Parameters Type Name Description Vec3 euler Returns Type Description quat ForwardVector(Vec3, Vec3, float) Declaration public static Vec3 ForwardVector(Vec3 v, Vec3 rotaion, float dist) Parameters Type Name Description Vec3 v Vec3 rotaion float dist Returns Type Description Vec3 GetCurrentTimeMillis() Declaration public static long GetCurrentTimeMillis() Returns Type Description long GetElementWorldLocation(GameElement) Returns the world location for the Element Declaration public static Vec3 GetElementWorldLocation(GameElement element) Parameters Type Name Description GameElement element Returns Type Description Vec3 GetElementWorldRotation(GameElement) Returns the World rotation for the element Declaration public static Vec3 GetElementWorldRotation(GameElement element) Parameters Type Name Description GameElement element Returns Type Description Vec3 GetElementWorldScale(GameElement) Returns the world scale for the element Declaration public static Vec3 GetElementWorldScale(GameElement element) Parameters Type Name Description GameElement element Returns Type Description Vec3 GetModelRotation(GameElement) Returns the model rotation matrix relativ to the world rotation Declaration public static mat4 GetModelRotation(GameElement element) Parameters Type Name Description GameElement element Returns Type Description mat4 GetModelScale(GameElement) Returns the model scale matrix relativ to the world scale Declaration public static mat4 GetModelScale(GameElement element) Parameters Type Name Description GameElement element Returns Type Description mat4 GetModelSpaceLocation(GameElement, Vec3) Converts world transform to model space transform Declaration public static Vec3 GetModelSpaceLocation(GameElement element, Vec3 worldPosition) Parameters Type Name Description GameElement element Vec3 worldPosition Returns Type Description Vec3 GetModelSpaceRotation(GameElement, Vec3) Converts the world rotation to the model space rotation Declaration public static Vec3 GetModelSpaceRotation(GameElement element, Vec3 worldRotation) Parameters Type Name Description GameElement element Vec3 worldRotation Returns Type Description Vec3 GetModelSpaceScale(GameElement, Vec3) Converts the world scale to the model space scale Declaration public static Vec3 GetModelSpaceScale(GameElement element, Vec3 worldScale) Parameters Type Name Description GameElement element Vec3 worldScale Returns Type Description Vec3 GetModelTransformation(GameElement) Returns the model transform matrix relative to the world location Declaration public static mat4 GetModelTransformation(GameElement element) Parameters Type Name Description GameElement element Returns Type Description mat4 GetParentModelView(GameElement) Declaration public static mat4 GetParentModelView(GameElement element) Parameters Type Name Description GameElement element Returns Type Description mat4 GetStringBounds(Vec3, string, float, float) Declaration public static Rect GetStringBounds(Vec3 location, string text, float fontSize, float spacing) Parameters Type Name Description Vec3 location string text float fontSize float spacing Returns Type Description Rect GetStringHeight(string, float, float) Declaration public static float GetStringHeight(string text, float fontSize, float spacing) Parameters Type Name Description string text float fontSize float spacing Returns Type Description float GetStringWidth(string, float, float) Declaration public static float GetStringWidth(string text, float fontSize, float spacing) Parameters Type Name Description string text float fontSize float spacing Returns Type Description float GetVMirroredPosition(Vec3, Camera) Declaration public static Vec3 GetVMirroredPosition(Vec3 vref, Camera camera) Parameters Type Name Description Vec3 vref Camera camera Returns Type Description Vec3 GetVMirroredPosition(float, float, float, Camera) Declaration public static Vec3 GetVMirroredPosition(float x, float y, float z, Camera camera) Parameters Type Name Description float x float y float z Camera camera Returns Type Description Vec3 LookAt(Camera, Vec3) Let the camera look at an position Declaration public static void LookAt(Camera camera, Vec3 targetPosition) Parameters Type Name Description Camera camera Vec3 targetPosition RayDirection(Camera, Viewport, float, float) Declaration public static Vec3 RayDirection(Camera camera, Viewport viewport, float x, float y) Parameters Type Name Description Camera camera Viewport viewport float x float y Returns Type Description Vec3 ToDegrees(float) Declaration public static float ToDegrees(float radians) Parameters Type Name Description float radians Returns Type Description float ToRadians(float) Declaration public static float ToRadians(float degrees) Parameters Type Name Description float degrees Returns Type Description float TransformToWorldCords(Game, float, float) Declaration public static Vec3 TransformToWorldCords(Game game, float x, float y) Parameters Type Name Description Game game float x float y Returns Type Description Vec3 TransformToWorldCords(Camera, Viewport, float, float) Declaration public static Vec3 TransformToWorldCords(Camera camera, Viewport viewport, float x, float y) Parameters Type Name Description Camera camera Viewport viewport float x float y Returns Type Description Vec3"
  },
  "obj/api/Genesis.Core.html": {
    "href": "obj/api/Genesis.Core.html",
    "title": "Namespace Genesis.Core | GFX",
    "keywords": "Namespace Genesis.Core Classes AssetManager Manages game assets such as textures and fonts. Game Represents the main game class responsible for managing game loops, scenes, rendering, and updates. GameElement Represents a base class for game elements in the Genesis framework. GenesisWindow IGameBehavior Represents the base class for game behaviors in the Genesis framework. Input Provides utility methods for handling user input in the Genesis framework. Layer Represents a layer containing game elements in the Genesis framework. Light Represents a light source in the Genesis framework. Scene Represents a game scene in the Genesis framework. Scene3D Represents a 3D scene for rendering, including lighting and an optional skybox. Storage Class for dynamic clearing not used elements. Utils Contains utility functions for various tasks within the Genesis.Core namespace. Delegates GameEventHandler SceneEventHandler SceneSizeEvenHandler"
  },
  "obj/api/Genesis.Graphics.Animation.html": {
    "href": "obj/api/Genesis.Graphics.Animation.html",
    "title": "Class Animation | GFX",
    "keywords": "Class Animation Represents an animation definition with details such as name, starting cell, row, and number of frames. Inheritance object Animation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Animation Constructors Animation() Initializes a new instance of the Animation class. Declaration public Animation() Animation(string, int, int, int) Initializes a new instance of the Animation class with specified parameters. Declaration public Animation(string name, int cell, int row, int frames) Parameters Type Name Description string name The name of the animation. int cell The starting cell index of the animation. int row The row index in the animation sheet. int frames The number of frames in the animation. Properties Cell Gets or sets the starting cell index of the animation. Declaration public int Cell { get; set; } Property Value Type Description int Frames Gets or sets the number of frames in the animation. Declaration public int Frames { get; set; } Property Value Type Description int Name Gets or sets the name of the animation. Declaration public string Name { get; set; } Property Value Type Description string Row Gets or sets the row index in the animation sheet. Declaration public int Row { get; set; } Property Value Type Description int"
  },
  "obj/api/Genesis.Graphics.Animation3D.html": {
    "href": "obj/api/Genesis.Graphics.Animation3D.html",
    "title": "Class Animation3D | GFX",
    "keywords": "Class Animation3D Inheritance object Animation3D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Animation3D Constructors Animation3D(string) Declaration public Animation3D(string name) Parameters Type Name Description string name Animation3D(string, string) Declaration public Animation3D(string name, string directory) Parameters Type Name Description string name string directory Properties Frames Declaration public List<Model> Frames { get; set; } Property Value Type Description List<Model> Name Declaration public string Name { get; set; } Property Value Type Description string Methods CopyTextures(Model) Declaration public void CopyTextures(Model model) Parameters Type Name Description Model model InitAnimation(IRenderDevice) Declaration public void InitAnimation(IRenderDevice renderer) Parameters Type Name Description IRenderDevice renderer LoadFramesFromDirectory(string) Declaration public void LoadFramesFromDirectory(string directory) Parameters Type Name Description string directory"
  },
  "obj/api/Genesis.Graphics.Camera.html": {
    "href": "obj/api/Genesis.Graphics.Camera.html",
    "title": "Class Camera | GFX",
    "keywords": "Class Camera Inheritance object Camera PerspectiveCamera Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Camera Constructors Camera(Vec3, Vec3, float, float) Declaration public Camera(Vec3 location, Vec3 size, float near, float far) Parameters Type Name Description Vec3 location Vec3 size float near float far Properties Far Declaration public float Far { get; set; } Property Value Type Description float Location Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Near Declaration public float Near { get; set; } Property Value Type Description float Rotation Declaration public Vec3 Rotation { get; set; } Property Value Type Description Vec3 Size Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Type Declaration public CameraType Type { get; set; } Property Value Type Description CameraType Methods GetRect() Declaration public Rect GetRect() Returns Type Description Rect LookAt(GameElement) Declaration public void LookAt(GameElement element) Parameters Type Name Description GameElement element LookAt(GameElement, bool) Declaration public void LookAt(GameElement element, bool centerOffset) Parameters Type Name Description GameElement element bool centerOffset"
  },
  "obj/api/Genesis.Graphics.CameraType.html": {
    "href": "obj/api/Genesis.Graphics.CameraType.html",
    "title": "Enum CameraType | GFX",
    "keywords": "Enum CameraType Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public enum CameraType Fields Name Description Ortho Perspective"
  },
  "obj/api/Genesis.Graphics.Face.html": {
    "href": "obj/api/Genesis.Graphics.Face.html",
    "title": "Class Face | GFX",
    "keywords": "Class Face Inheritance object Face Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Face Constructors Face() Declaration public Face() Face(Texture) Declaration public Face(Texture texture) Parameters Type Name Description Texture texture Face(Vec3[]) Declaration public Face(Vec3[] vecs) Parameters Type Name Description Vec3[] vecs Face(Vec3[], Vec3[], Texture) Declaration public Face(Vec3[] vecs, Vec3[] texCords, Texture texture) Parameters Type Name Description Vec3[] vecs Vec3[] texCords Texture texture Properties Propertys Declaration public Dictionary<string, object> Propertys { get; set; } Property Value Type Description Dictionary<string, object> TexCords Declaration public List<Vec3> TexCords { get; set; } Property Value Type Description List<Vec3> Texture Declaration public Texture Texture { get; set; } Property Value Type Description Texture Vertices Declaration public List<Vec3> Vertices { get; set; } Property Value Type Description List<Vec3> Methods InitFace(IRenderDevice) Declaration public void InitFace(IRenderDevice renderer) Parameters Type Name Description IRenderDevice renderer"
  },
  "obj/api/Genesis.Graphics.Font.html": {
    "href": "obj/api/Genesis.Graphics.Font.html",
    "title": "Class Font | GFX",
    "keywords": "Class Font Inheritance object Font Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Font Constructors Font() Declaration public Font() Properties Column Declaration public int Column { get; set; } Property Value Type Description int FontAtlas Declaration public Bitmap FontAtlas { get; set; } Property Value Type Description Bitmap GlyphSize Declaration public float GlyphSize { get; set; } Property Value Type Description float Glyphes Declaration public List<Glyphe> Glyphes { get; set; } Property Value Type Description List<Glyphe> Name Declaration public string Name { get; set; } Property Value Type Description string RenderID Declaration public int RenderID { get; set; } Property Value Type Description int Rows Declaration public int Rows { get; set; } Property Value Type Description int Spacing Declaration public float Spacing { get; set; } Property Value Type Description float Methods Base64ToImage(string) Declaration public Bitmap Base64ToImage(string base64) Parameters Type Name Description string base64 Returns Type Description Bitmap FromFile(string) Declaration public void FromFile(string file) Parameters Type Name Description string file GetGlyphe(char) Declaration public Glyphe GetGlyphe(char character) Parameters Type Name Description char character Returns Type Description Glyphe LoadSystemFont(string) Declaration public static Font LoadSystemFont(string fontName) Parameters Type Name Description string fontName Returns Type Description Font"
  },
  "obj/api/Genesis.Graphics.Framebuffer.html": {
    "href": "obj/api/Genesis.Graphics.Framebuffer.html",
    "title": "Class Framebuffer | GFX",
    "keywords": "Class Framebuffer Inheritance object Framebuffer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Framebuffer Constructors Framebuffer() Declaration public Framebuffer() Properties FramebufferID Declaration public int FramebufferID { get; set; } Property Value Type Description int RenderBuffer Declaration public int RenderBuffer { get; set; } Property Value Type Description int Texture Declaration public int Texture { get; set; } Property Value Type Description int Methods ToTexture() Declaration public Texture ToTexture() Returns Type Description Texture"
  },
  "obj/api/Genesis.Graphics.Glyphe.html": {
    "href": "obj/api/Genesis.Graphics.Glyphe.html",
    "title": "Class Glyphe | GFX",
    "keywords": "Class Glyphe Inheritance object Glyphe Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Glyphe Constructors Glyphe(char, int, int) Declaration public Glyphe(char character, int row, int column) Parameters Type Name Description char character int row int column Properties Character Declaration public char Character { get; set; } Property Value Type Description char Column Declaration public int Column { get; set; } Property Value Type Description int Row Declaration public int Row { get; set; } Property Value Type Description int"
  },
  "obj/api/Genesis.Graphics.IRenderDevice.html": {
    "href": "obj/api/Genesis.Graphics.IRenderDevice.html",
    "title": "Interface IRenderDevice | GFX",
    "keywords": "Interface IRenderDevice Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public interface IRenderDevice Methods Begin() Declaration void Begin() BuildFramebuffer(int, int) Declaration Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width int height Returns Type Description Framebuffer BuildFramebuffer(int, int, Texture) Declaration Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width int height Texture texture Returns Type Description Framebuffer BuildFramebuffer(int, int, int) Declaration Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width int height int texture Returns Type Description Framebuffer CreateDynamicVertexBuffer(float[]) Declaration int CreateDynamicVertexBuffer(float[] floats) Parameters Type Name Description float[] floats Returns Type Description int CreateStaticVertexBuffer(float[]) Declaration int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies Returns Type Description int Dispose() Declaration void Dispose() DisposeElement3D(Element3D) Declaration void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element DisposeFont(Font) Declaration void DisposeFont(Font font) Parameters Type Name Description Font font DisposeTexture(Texture) Declaration void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture DrawBufferedSprite(BufferedSprite) Declaration void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite DrawElement3D(Element3D) Declaration void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element DrawGameElement(GameElement) Declaration void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element DrawLine(Vec3, Vec3, Color) Declaration void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from Vec3 to Color color DrawMesh(Mesh, Color) Declaration void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh Color color DrawRect(Rect, Color) Declaration void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color DrawRect(Rect, Color, float) Declaration void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect Color color float borderWidth DrawSkyBox(Skybox) Declaration void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox DrawSprite(Sprite) Declaration void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite DrawSprite(Vec3, Vec3, Texture) Declaration void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Texture texture DrawSprite(Vec3, Vec3, Texture, TexCoords) Declaration void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Texture texture TexCoords texCoords DrawSprite(Vec3, Vec3, Color, Texture) Declaration void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Declaration void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture TexCoords texCoords DrawString(string, Vec3, float, Font, Color) Declaration void DrawString(string text, Vec3 location, float fontsize, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontsize Font font Color color DrawString(string, Vec3, float, float, Font, Color) Declaration void DrawString(string text, Vec3 location, float fontsize, float spacing, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontsize float spacing Font font Color color DrawTexture(Vec3, Vec3, float, float, Texture) Declaration void DrawTexture(Vec3 location, Vec3 size, float repeatX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location Vec3 size float repeatX float repeatY Texture texture DrawVectors(Vec3[], Color) Declaration void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs Color color End() Declaration void End() FillRect(Rect, Color) Declaration void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color FinishCanvasRendering(Scene, Canvas) Declaration void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas FinishSceneRendering(Scene) Declaration void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene GetError() Declaration int GetError() Returns Type Description int GetHandle() Declaration IntPtr GetHandle() Returns Type Description IntPtr Init() Declaration void Init() InitElement3D(Element3D) Declaration void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitGameElement(GameElement) Declaration void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Declaration void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Declaration void LoadFont(Font font) Parameters Type Name Description Font font LoadTexture(Texture) Declaration void LoadTexture(Texture texture) Parameters Type Name Description Texture texture ModelViewMatrix() Declaration void ModelViewMatrix() PopMatrix() Declaration void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Declaration void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas PrepareSceneRendering(Scene) Declaration void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene ProjectionMatrix() Declaration void ProjectionMatrix() PushMatrix() Declaration void PushMatrix() Rotate(float, Vec3) Declaration void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle Vec3 vector SetCamera(Camera) Declaration void SetCamera(Camera camera) Parameters Type Name Description Camera camera SetFramebuffer(Framebuffer) Declaration void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer SetFramebuffer(int) Declaration void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer SetLightSource(Light) Declaration void SetLightSource(Light light) Parameters Type Name Description Light light TextureClampS() Declaration void TextureClampS() TextureClampT() Declaration void TextureClampT() TextureRepeatS() Declaration void TextureRepeatS() TextureRepeatT() Declaration void TextureRepeatT() Translate(Vec3) Declaration void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector Translate(float, float, float) Declaration void Translate(float x, float y, float z) Parameters Type Name Description float x float y float z UpdateFramebufferSize(Framebuffer, int, int) Declaration void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer int width int height Viewport(float, float, float, float) Declaration void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height"
  },
  "obj/api/Genesis.Graphics.Material.html": {
    "href": "obj/api/Genesis.Graphics.Material.html",
    "title": "Class Material | GFX",
    "keywords": "Class Material Inheritance object Material Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Material Constructors Material() Declaration public Material() Properties DiffuseColor Declaration public Color DiffuseColor { get; set; } Property Value Type Description Color DiffuseTexture Declaration public string DiffuseTexture { get; set; } Property Value Type Description string NormalTexture Declaration public string NormalTexture { get; set; } Property Value Type Description string Propeterys Declaration public Dictionary<string, object> Propeterys { get; set; } Property Value Type Description Dictionary<string, object>"
  },
  "obj/api/Genesis.Graphics.MaterialBuffer.html": {
    "href": "obj/api/Genesis.Graphics.MaterialBuffer.html",
    "title": "Struct MaterialBuffer | GFX",
    "keywords": "Struct MaterialBuffer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public struct MaterialBuffer Fields HasData Declaration public bool HasData Field Value Type Description bool Normals Declaration public float[] Normals Field Value Type Description float[] Texcords Declaration public float[] Texcords Field Value Type Description float[] Verticies Declaration public float[] Verticies Field Value Type Description float[]"
  },
  "obj/api/Genesis.Graphics.Mesh.html": {
    "href": "obj/api/Genesis.Graphics.Mesh.html",
    "title": "Class Mesh | GFX",
    "keywords": "Class Mesh Inheritance object Mesh Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Mesh Constructors Mesh() Declaration public Mesh() Properties Faces Declaration public List<float> Faces { get; set; } Property Value Type Description List<float> Indicies Declaration public List<int> Indicies { get; set; } Property Value Type Description List<int> MaterialIndex Declaration public int MaterialIndex { get; set; } Property Value Type Description int Normals Declaration public List<float> Normals { get; set; } Property Value Type Description List<float> Propeterys Declaration public Dictionary<string, object> Propeterys { get; set; } Property Value Type Description Dictionary<string, object> TextureCords Declaration public List<float> TextureCords { get; set; } Property Value Type Description List<float> Vericies Declaration public List<float> Vericies { get; set; } Property Value Type Description List<float>"
  },
  "obj/api/Genesis.Graphics.PerspectiveCamera.html": {
    "href": "obj/api/Genesis.Graphics.PerspectiveCamera.html",
    "title": "Class PerspectiveCamera | GFX",
    "keywords": "Class PerspectiveCamera Inheritance object Camera PerspectiveCamera Inherited Members Camera.LookAt(GameElement) Camera.LookAt(GameElement, bool) Camera.GetRect() Camera.Location Camera.Size Camera.Rotation Camera.Near Camera.Far Camera.Type object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class PerspectiveCamera : Camera Constructors PerspectiveCamera(Vec3, Vec3, float, float) Declaration public PerspectiveCamera(Vec3 location, Vec3 size, float near, float far) Parameters Type Name Description Vec3 location Vec3 size float near float far Methods CameraFront() Declaration public Vec3 CameraFront() Returns Type Description Vec3 Forward(float) Declaration public Vec3 Forward(float distance) Parameters Type Name Description float distance Returns Type Description Vec3 MoveBackward(float) Declaration public void MoveBackward(float value) Parameters Type Name Description float value MoveDown(float) Declaration public void MoveDown(float value) Parameters Type Name Description float value MoveForward(float) Declaration public void MoveForward(float value) Parameters Type Name Description float value MoveLeft(float) Declaration public void MoveLeft(float value) Parameters Type Name Description float value MoveRight(float) Declaration public void MoveRight(float value) Parameters Type Name Description float value MoveUp(float) Declaration public void MoveUp(float value) Parameters Type Name Description float value RenderToTexture(Game, IRenderDevice, Texture, Vec3) Declaration public void RenderToTexture(Game game, IRenderDevice renderer, Texture renderTarget, Vec3 resolution) Parameters Type Name Description Game game IRenderDevice renderer Texture renderTarget Vec3 resolution RenderToTexture(Game, IRenderDevice, int, Vec3) Declaration public void RenderToTexture(Game game, IRenderDevice renderer, int renderTarget, Vec3 resolution) Parameters Type Name Description Game game IRenderDevice renderer int renderTarget Vec3 resolution"
  },
  "obj/api/Genesis.Graphics.Physics.BulletDebugRenderer.html": {
    "href": "obj/api/Genesis.Graphics.Physics.BulletDebugRenderer.html",
    "title": "Class BulletDebugRenderer | GFX",
    "keywords": "Class BulletDebugRenderer Inheritance object DebugDraw BulletDebugRenderer Implements IDisposable Inherited Members DebugDraw.DrawLine(Vector3, Vector3, Vector3) DebugDraw.DrawLine(ref Vector3, ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawAabb(ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawArc(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, ref Vector3, bool, float) DebugDraw.DrawBox(ref Vector3, ref Vector3, ref Vector3) DebugDraw.DrawBox(ref Vector3, ref Vector3, ref Matrix, ref Vector3) DebugDraw.DrawCapsule(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawCone(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawContactPoint(ref Vector3, ref Vector3, float, int, ref Vector3) DebugDraw.DrawCylinder(float, float, int, ref Matrix, ref Vector3) DebugDraw.DrawPlane(ref Vector3, float, ref Matrix, ref Vector3) DebugDraw.DrawSphere(float, ref Matrix, ref Vector3) DebugDraw.DrawSphere(ref Vector3, float, ref Vector3) DebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3) DebugDraw.DrawSpherePatch(ref Vector3, ref Vector3, ref Vector3, float, float, float, float, float, ref Vector3, float) DebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) DebugDraw.DrawTriangle(ref Vector3, ref Vector3, ref Vector3, ref Vector3, float) DebugDraw.DrawTransform(ref Matrix, float) DebugDraw.PlaneSpace1(ref Vector3, out Vector3, out Vector3) DebugDraw.Dispose() DebugDraw.Dispose(bool) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Physics Assembly: Genesis.dll Syntax public class BulletDebugRenderer : DebugDraw, IDisposable Constructors BulletDebugRenderer(IRenderDevice) Declaration public BulletDebugRenderer(IRenderDevice RenderDevice) Parameters Type Name Description IRenderDevice RenderDevice Properties DebugMode Declaration public override DebugDrawModes DebugMode { get; set; } Property Value Type Description DebugDrawModes Overrides BulletSharp.DebugDraw.DebugMode Methods Draw3DText(ref Vector3, string) Declaration public override void Draw3DText(ref Vector3 location, string textString) Parameters Type Name Description Vector3 location string textString Overrides DebugDraw.Draw3DText(ref Vector3, string) DrawLine(ref Vector3, ref Vector3, ref Vector3) Declaration public override void DrawLine(ref Vector3 from, ref Vector3 to, ref Vector3 color) Parameters Type Name Description Vector3 from Vector3 to Vector3 color Overrides BulletSharp.DebugDraw.DrawLine(ref BulletSharp.Math.Vector3, ref BulletSharp.Math.Vector3, ref BulletSharp.Math.Vector3) ReportErrorWarning(string) Declaration public override void ReportErrorWarning(string warningString) Parameters Type Name Description string warningString Overrides DebugDraw.ReportErrorWarning(string) Implements IDisposable"
  },
  "obj/api/Genesis.Graphics.Physics.html": {
    "href": "obj/api/Genesis.Graphics.Physics.html",
    "title": "Namespace Genesis.Graphics.Physics | GFX",
    "keywords": "Namespace Genesis.Graphics.Physics Classes BulletDebugRenderer"
  },
  "obj/api/Genesis.Graphics.RenderDevice.ClassicGL.html": {
    "href": "obj/api/Genesis.Graphics.RenderDevice.ClassicGL.html",
    "title": "Class ClassicGL | GFX",
    "keywords": "Class ClassicGL Inheritance object ClassicGL Implements IRenderDevice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.RenderDevice Assembly: Genesis.dll Syntax public class ClassicGL : IRenderDevice Constructors ClassicGL(IntPtr) Declaration public ClassicGL(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd Methods Begin() Declaration public void Begin() BuildFramebuffer(int, int) Declaration public Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width int height Returns Type Description Framebuffer BuildFramebuffer(int, int, Texture) Declaration public Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width int height Texture texture Returns Type Description Framebuffer BuildFramebuffer(int, int, int) Declaration public Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width int height int texture Returns Type Description Framebuffer CreateDynamicVertexBuffer(float[]) Declaration public int CreateDynamicVertexBuffer(float[] floats) Parameters Type Name Description float[] floats Returns Type Description int CreateStaticVertexBuffer(float[]) Declaration public int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies Returns Type Description int Dispose() Declaration public void Dispose() DisposeElement3D(Element3D) Declaration public void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element DisposeFont(Font) Declaration public void DisposeFont(Font font) Parameters Type Name Description Font font DisposeTexture(Texture) Declaration public void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture DrawBufferedSprite(BufferedSprite) Declaration public void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite DrawElement3D(Element3D) Declaration public void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element DrawGameElement(GameElement) Declaration public void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element DrawLine(Vec3, Vec3, Color) Declaration public void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from Vec3 to Color color DrawMesh(Mesh, Color) Declaration public void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh Color color DrawRect(Rect, Color) Declaration public void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color DrawRect(Rect, Color, float) Declaration public void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect Color color float borderWidth DrawSkyBox(Skybox) Declaration public void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox DrawSprite(Sprite) Declaration public void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite DrawSprite(Vec3, Vec3, Texture) Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Texture texture DrawSprite(Vec3, Vec3, Texture, TexCoords) Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Texture texture TexCoords texCoords DrawSprite(Vec3, Vec3, Color, Texture) Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture TexCoords texCoords DrawString(string, Vec3, float, Font, Color) Declaration public void DrawString(string text, Vec3 location, float fontSize, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize Font font Color color DrawString(string, Vec3, float, float, Font, Color) Declaration public void DrawString(string text, Vec3 location, float fontSize, float spacing, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize float spacing Font font Color color DrawTexture(Vec3, Vec3, float, float, Texture) Declaration public void DrawTexture(Vec3 location, Vec3 size, float repeateX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location Vec3 size float repeateX float repeatY Texture texture DrawVectors(Vec3[], Color) Declaration public void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs Color color End() Declaration public void End() FillRect(Rect, Color) Declaration public void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color FinishCanvasRendering(Scene, Canvas) Declaration public void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas FinishSceneRendering(Scene) Declaration public void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene GenerateTexture(OpenGL, Texture) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Texture texture) Parameters Type Name Description OpenGL gl Texture texture Returns Type Description int GenerateTexture(OpenGL, Bitmap) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Bitmap texture) Parameters Type Name Description OpenGL gl Bitmap texture Returns Type Description int GetError() Declaration public int GetError() Returns Type Description int GetHandle() Declaration public IntPtr GetHandle() Returns Type Description IntPtr Init() Declaration public void Init() InitElement3D(Element3D) Declaration public void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitGameElement(GameElement) Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Declaration public void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Declaration public void LoadFont(Font font) Parameters Type Name Description Font font LoadTexture(Texture) Declaration public void LoadTexture(Texture texture) Parameters Type Name Description Texture texture ModelViewMatrix() Declaration public void ModelViewMatrix() PopMatrix() Declaration public void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Declaration public void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas PrepareSceneRendering(Scene) Declaration public void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene ProjectionMatrix() Declaration public void ProjectionMatrix() PushMatrix() Declaration public void PushMatrix() Rotate(float, Vec3) Declaration public void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle Vec3 vector SetCamera(Camera) Declaration public void SetCamera(Camera camera) Parameters Type Name Description Camera camera SetFramebuffer(Framebuffer) Declaration public void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer SetFramebuffer(int) Declaration public void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer SetLightSource(Light) Declaration public void SetLightSource(Light light) Parameters Type Name Description Light light TextureClampS() Declaration public void TextureClampS() TextureClampT() Declaration public void TextureClampT() TextureRepeatS() Declaration public void TextureRepeatS() TextureRepeatT() Declaration public void TextureRepeatT() Translate(Vec3) Declaration public void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector Translate(float, float, float) Declaration public void Translate(float x, float y, float z) Parameters Type Name Description float x float y float z UpdateFramebufferSize(Framebuffer, int, int) Declaration public void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer int width int height Viewport(float, float, float, float) Declaration public void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Implements IRenderDevice"
  },
  "obj/api/Genesis.Graphics.RenderDevice.GLRenderer.html": {
    "href": "obj/api/Genesis.Graphics.RenderDevice.GLRenderer.html",
    "title": "Class GLRenderer | GFX",
    "keywords": "Class GLRenderer Inheritance object GLRenderer Implements IRenderDevice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.RenderDevice Assembly: Genesis.dll Syntax public class GLRenderer : IRenderDevice Constructors GLRenderer(IntPtr) Declaration public GLRenderer(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd Fields sceneBuffer Declaration public Framebuffer sceneBuffer Field Value Type Description Framebuffer Methods Begin() Beginn to draw Declaration public void Begin() BuildFramebuffer(int, int) Creates a new framebuffer Declaration public Framebuffer BuildFramebuffer(int width, int height) Parameters Type Name Description int width int height Returns Type Description Framebuffer BuildFramebuffer(int, int, Texture) Declaration public Framebuffer BuildFramebuffer(int width, int height, Texture texture) Parameters Type Name Description int width int height Texture texture Returns Type Description Framebuffer BuildFramebuffer(int, int, int) Declaration public Framebuffer BuildFramebuffer(int width, int height, int texture) Parameters Type Name Description int width int height int texture Returns Type Description Framebuffer BuildShape(Shape) Creates an buffer for the shape Declaration public void BuildShape(Shape shape) Parameters Type Name Description Shape shape CreateDynamicVertexBuffer(float[]) Creates a dynamic vertex buffer in OpenGL and initializes it with the specified vertices. Dynamic buffers are suitable for frequently changing data, like dynamic vertex updates. Declaration public int CreateDynamicVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The array of vertices to be stored in the buffer. Returns Type Description int The OpenGL handle (ID) of the created dynamic vertex buffer. CreateStaticVertexBuffer(float[]) Creates a static vertex buffer in OpenGL and initializes it with the specified vertices. Static buffers are suitable for infrequently changing data, like static geometry. Declaration public int CreateStaticVertexBuffer(float[] verticies) Parameters Type Name Description float[] verticies The array of vertices to be stored in the buffer. Returns Type Description int The OpenGL handle (ID) of the created static vertex buffer. DisoseShader(ShaderProgram) Deletes the shader program Declaration public void DisoseShader(ShaderProgram program) Parameters Type Name Description ShaderProgram program Dispose() Disposes the render device Declaration public void Dispose() DisposeElement3D(Element3D) Dispose the 3D element Declaration public void DisposeElement3D(Element3D element) Parameters Type Name Description Element3D element DisposeFont(Font) Disposes the font Declaration public void DisposeFont(Font font) Parameters Type Name Description Font font DisposeTexture(Texture) Disposes the texture Declaration public void DisposeTexture(Texture texture) Parameters Type Name Description Texture texture DrawBufferedSprite(BufferedSprite) Declaration public void DrawBufferedSprite(BufferedSprite bufferedSprite) Parameters Type Name Description BufferedSprite bufferedSprite DrawElement3D(Element3D) Draws an 3D element within the scene Declaration public void DrawElement3D(Element3D element) Parameters Type Name Description Element3D element DrawGameElement(GameElement) Renders the GameElement Declaration public void DrawGameElement(GameElement element) Parameters Type Name Description GameElement element DrawLine(Vec3, Vec3, Color) Draws a line Declaration public void DrawLine(Vec3 from, Vec3 to, Color color) Parameters Type Name Description Vec3 from Vec3 to Color color DrawMesh(Mesh, Color) Draws a mesh Declaration public void DrawMesh(Mesh mesh, Color color) Parameters Type Name Description Mesh mesh Color color DrawRect(Rect, Color) Draws a rect with no fill Declaration public void DrawRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color DrawRect(Rect, Color, float) Draws a rect with no fill Declaration public void DrawRect(Rect rect, Color color, float borderWidth) Parameters Type Name Description Rect rect Color color float borderWidth DrawSkyBox(Skybox) Declaration public void DrawSkyBox(Skybox skybox) Parameters Type Name Description Skybox skybox DrawSprite(Sprite) Renders a sprite with modern gl Declaration public void DrawSprite(Sprite sprite) Parameters Type Name Description Sprite sprite DrawSprite(Vec3, Vec3, Texture) Draws a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Texture texture DrawSprite(Vec3, Vec3, Texture, TexCoords) Draws a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Texture texture TexCoords texCoords DrawSprite(Vec3, Vec3, Color, Texture) Renders a sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture DrawSprite(Vec3, Vec3, Color, Texture, TexCoords) Draws a Sprite Declaration public void DrawSprite(Vec3 location, Vec3 size, Color color, Texture texture, TexCoords texCoords) Parameters Type Name Description Vec3 location Vec3 size Color color Texture texture TexCoords texCoords DrawString(string, Vec3, float, Font, Color) Renders a String Declaration public void DrawString(string text, Vec3 location, float fontSize, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize Font font Color color DrawString(string, Vec3, float, float, Font, Color) Renders a string Declaration public void DrawString(string text, Vec3 location, float fontSize, float spacing, Font font, Color color) Parameters Type Name Description string text Vec3 location float fontSize float spacing Font font Color color DrawTexture(Vec3, Vec3, float, float, Texture) Draws a texture Declaration public void DrawTexture(Vec3 location, Vec3 size, float repeateX, float repeatY, Texture texture) Parameters Type Name Description Vec3 location Vec3 size float repeateX float repeatY Texture texture DrawVectors(Vec3[], Color) Draws the vector array Declaration public void DrawVectors(Vec3[] vecs, Color color) Parameters Type Name Description Vec3[] vecs Color color End() Ends the rendering Declaration public void End() FillRect(Rect, Color) Fills a rectangle with the given color. LegacyGL Declaration public void FillRect(Rect rect, Color color) Parameters Type Name Description Rect rect Color color FinishCanvasRendering(Scene, Canvas) Declaration public void FinishCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas FinishSceneRendering(Scene) Declaration public void FinishSceneRendering(Scene scene) Parameters Type Name Description Scene scene GenerateTexture(OpenGL, Texture) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Texture texture) Parameters Type Name Description OpenGL gl Texture texture Returns Type Description int GenerateTexture(OpenGL, Bitmap) Generates a texture Declaration public int GenerateTexture(OpenGL gl, Bitmap texture) Parameters Type Name Description OpenGL gl Bitmap texture Returns Type Description int GetError() Returns an error code from the render device Declaration public int GetError() Returns Type Description int GetHandle() Returns the handle of the render target Declaration public IntPtr GetHandle() Returns Type Description IntPtr GetRenderer() Declaration public OpenGL GetRenderer() Returns Type Description OpenGL GetShaderProgram(ShaderProgram) Returns the shader programm with the typeof the refProgram. Returns null is no program found Declaration public ShaderProgram GetShaderProgram(ShaderProgram refProgram) Parameters Type Name Description ShaderProgram refProgram Returns Type Description ShaderProgram Init() Initial the moderngl render device Declaration public void Init() InitElement3D(Element3D) Inital an 3D element Declaration public void InitElement3D(Element3D element) Parameters Type Name Description Element3D element InitElement3DNormalMap(string) Inital the normal map for an 3D element if the normal map file isnt existing an empty 1x1 normal map get created Declaration public int InitElement3DNormalMap(string path) Parameters Type Name Description string path Returns Type Description int InitElement3DTexture(string) Initial the diffuse texture for the 3D model If the texture file isnt existing an empty 1x1 texture get created Declaration public int InitElement3DTexture(string path) Parameters Type Name Description string path Returns Type Description int InitGameElement(GameElement) Inits the game element Declaration public void InitGameElement(GameElement element) Parameters Type Name Description GameElement element InitSprite(Sprite) Initial the sprite Declaration public void InitSprite(Sprite sprite) Parameters Type Name Description Sprite sprite LoadFont(Font) Loads the the font Declaration public void LoadFont(Font font) Parameters Type Name Description Font font LoadShader(string, ShaderProgram) Loads a shader program Declaration public void LoadShader(string name, ShaderProgram program) Parameters Type Name Description string name ShaderProgram program LoadTexture(Texture) Loads a texture into the vram Declaration public void LoadTexture(Texture texture) Parameters Type Name Description Texture texture ModelViewMatrix() This function will not be used within this render device Declaration public void ModelViewMatrix() PopMatrix() This function will not be used within this render device Declaration public void PopMatrix() PrepareCanvasRendering(Scene, Canvas) Declaration public void PrepareCanvasRendering(Scene scene, Canvas canvas) Parameters Type Name Description Scene scene Canvas canvas PrepareSceneRendering(Scene) Declaration public void PrepareSceneRendering(Scene scene) Parameters Type Name Description Scene scene ProjectionMatrix() This function will not be used within this render device Declaration public void ProjectionMatrix() PushMatrix() This function will not be used within this render device Declaration public void PushMatrix() Rotate(float, Vec3) This function will not be used within this render device Declaration public void Rotate(float angle, Vec3 vector) Parameters Type Name Description float angle Vec3 vector SetCamera(Camera) Set the Projection and view matrices Declaration public void SetCamera(Camera camera) Parameters Type Name Description Camera camera SetFramebuffer(Framebuffer) Declaration public void SetFramebuffer(Framebuffer framebuffer) Parameters Type Name Description Framebuffer framebuffer SetFramebuffer(int) Declaration public void SetFramebuffer(int framebuffer) Parameters Type Name Description int framebuffer SetLightSource(Light) Declaration public void SetLightSource(Light light) Parameters Type Name Description Light light TextureClampS() Sets the texture clampS Declaration public void TextureClampS() TextureClampT() Sets the texture clampT Declaration public void TextureClampT() TextureRepeatS() Sets the texture repeatS Declaration public void TextureRepeatS() TextureRepeatT() Sets the texture repeatT Declaration public void TextureRepeatT() Translate(Vec3) This function will not be used within this render device Declaration public void Translate(Vec3 vector) Parameters Type Name Description Vec3 vector Translate(float, float, float) This function will not be used within this render device Declaration public void Translate(float x, float y, float z) Parameters Type Name Description float x float y float z UpdateFramebufferSize(Framebuffer, int, int) Declaration public void UpdateFramebufferSize(Framebuffer framebuffer, int width, int height) Parameters Type Name Description Framebuffer framebuffer int width int height Viewport(float, float, float, float) Sets the viewport for the rendering Declaration public void Viewport(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Implements IRenderDevice"
  },
  "obj/api/Genesis.Graphics.RenderDevice.html": {
    "href": "obj/api/Genesis.Graphics.RenderDevice.html",
    "title": "Namespace Genesis.Graphics.RenderDevice | GFX",
    "keywords": "Namespace Genesis.Graphics.RenderDevice Classes ClassicGL GLRenderer"
  },
  "obj/api/Genesis.Graphics.Shader.html": {
    "href": "obj/api/Genesis.Graphics.Shader.html",
    "title": "Class Shader | GFX",
    "keywords": "Class Shader Inheritance object Shader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Shader Constructors Shader() Declaration public Shader() Shader(string) Declaration public Shader(string source) Parameters Type Name Description string source Properties ShaderID Declaration public int ShaderID { get; set; } Property Value Type Description int Source Declaration public string Source { get; set; } Property Value Type Description string Methods FromFile(string) Declaration public static Shader FromFile(string filename) Parameters Type Name Description string filename Returns Type Description Shader"
  },
  "obj/api/Genesis.Graphics.ShaderProgram.html": {
    "href": "obj/api/Genesis.Graphics.ShaderProgram.html",
    "title": "Class ShaderProgram | GFX",
    "keywords": "Class ShaderProgram Inheritance object ShaderProgram BasicShader DiffuseLightning DiffuseNormalLightning DiffuseNormalShader DiffuseShader DiffuseSolidShader MVPRectShader MVPShader MVPSolidShader ScreenShader SkyboxShader SpriteShader TerrainShader WireframeShader Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class ShaderProgram Constructors ShaderProgram() Declaration public ShaderProgram() Properties FragmentShader Declaration public Shader FragmentShader { get; set; } Property Value Type Description Shader ProgramID Declaration public int ProgramID { get; set; } Property Value Type Description int VertexShader Declaration public Shader VertexShader { get; set; } Property Value Type Description Shader"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.BasicShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.BasicShader.html",
    "title": "Class BasicShader | GFX",
    "keywords": "Class BasicShader Inheritance object ShaderProgram BasicShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class BasicShader : ShaderProgram Constructors BasicShader() Declaration public BasicShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseLightning.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseLightning.html",
    "title": "Class DiffuseLightning | GFX",
    "keywords": "Class DiffuseLightning Inheritance object ShaderProgram DiffuseLightning Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseLightning : ShaderProgram Constructors DiffuseLightning() Declaration public DiffuseLightning()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalLightning.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalLightning.html",
    "title": "Class DiffuseNormalLightning | GFX",
    "keywords": "Class DiffuseNormalLightning Inheritance object ShaderProgram DiffuseNormalLightning Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseNormalLightning : ShaderProgram Constructors DiffuseNormalLightning() Declaration public DiffuseNormalLightning()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseNormalShader.html",
    "title": "Class DiffuseNormalShader | GFX",
    "keywords": "Class DiffuseNormalShader Inheritance object ShaderProgram DiffuseNormalShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseNormalShader : ShaderProgram Constructors DiffuseNormalShader() Declaration public DiffuseNormalShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseShader.html",
    "title": "Class DiffuseShader | GFX",
    "keywords": "Class DiffuseShader Inheritance object ShaderProgram DiffuseShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseShader : ShaderProgram Constructors DiffuseShader() Declaration public DiffuseShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseSolidShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.DiffuseSolidShader.html",
    "title": "Class DiffuseSolidShader | GFX",
    "keywords": "Class DiffuseSolidShader Inheritance object ShaderProgram DiffuseSolidShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class DiffuseSolidShader : ShaderProgram Constructors DiffuseSolidShader() Declaration public DiffuseSolidShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPRectShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPRectShader.html",
    "title": "Class MVPRectShader | GFX",
    "keywords": "Class MVPRectShader Inheritance object ShaderProgram MVPRectShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPRectShader : ShaderProgram Constructors MVPRectShader() Declaration public MVPRectShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPShader.html",
    "title": "Class MVPShader | GFX",
    "keywords": "Class MVPShader Inheritance object ShaderProgram MVPShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPShader : ShaderProgram Constructors MVPShader() Declaration public MVPShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPSolidShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.MVPSolidShader.html",
    "title": "Class MVPSolidShader | GFX",
    "keywords": "Class MVPSolidShader Inheritance object ShaderProgram MVPSolidShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class MVPSolidShader : ShaderProgram Constructors MVPSolidShader() Declaration public MVPSolidShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.ScreenShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.ScreenShader.html",
    "title": "Class ScreenShader | GFX",
    "keywords": "Class ScreenShader Inheritance object ShaderProgram ScreenShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class ScreenShader : ShaderProgram Constructors ScreenShader() Declaration public ScreenShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.SkyboxShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.SkyboxShader.html",
    "title": "Class SkyboxShader | GFX",
    "keywords": "Class SkyboxShader Inheritance object ShaderProgram SkyboxShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class SkyboxShader : ShaderProgram Constructors SkyboxShader() Declaration public SkyboxShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.SpriteShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.SpriteShader.html",
    "title": "Class SpriteShader | GFX",
    "keywords": "Class SpriteShader Inheritance object ShaderProgram SpriteShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class SpriteShader : ShaderProgram Constructors SpriteShader() Declaration public SpriteShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.TerrainShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.TerrainShader.html",
    "title": "Class TerrainShader | GFX",
    "keywords": "Class TerrainShader Inheritance object ShaderProgram TerrainShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class TerrainShader : ShaderProgram Constructors TerrainShader() Declaration public TerrainShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.WireframeShader.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.WireframeShader.html",
    "title": "Class WireframeShader | GFX",
    "keywords": "Class WireframeShader Inheritance object ShaderProgram WireframeShader Inherited Members ShaderProgram.ProgramID ShaderProgram.VertexShader ShaderProgram.FragmentShader object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shaders.OpenGL Assembly: Genesis.dll Syntax public class WireframeShader : ShaderProgram Constructors WireframeShader() Declaration public WireframeShader()"
  },
  "obj/api/Genesis.Graphics.Shaders.OpenGL.html": {
    "href": "obj/api/Genesis.Graphics.Shaders.OpenGL.html",
    "title": "Namespace Genesis.Graphics.Shaders.OpenGL | GFX",
    "keywords": "Namespace Genesis.Graphics.Shaders.OpenGL Classes BasicShader DiffuseLightning DiffuseNormalLightning DiffuseNormalShader DiffuseShader DiffuseSolidShader MVPRectShader MVPShader MVPSolidShader ScreenShader SkyboxShader SpriteShader TerrainShader WireframeShader"
  },
  "obj/api/Genesis.Graphics.Shapes.BufferedSpriteShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.BufferedSpriteShape.html",
    "title": "Class BufferedSpriteShape | GFX",
    "keywords": "Class BufferedSpriteShape Inheritance object Shape BufferedSpriteShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class BufferedSpriteShape : Shape Constructors BufferedSpriteShape() Declaration public BufferedSpriteShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.FrameShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.FrameShape.html",
    "title": "Class FrameShape | GFX",
    "keywords": "Class FrameShape Inheritance object Shape FrameShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class FrameShape : Shape Constructors FrameShape() Declaration public FrameShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.GlypheShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.GlypheShape.html",
    "title": "Class GlypheShape | GFX",
    "keywords": "Class GlypheShape Inheritance object Shape GlypheShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class GlypheShape : Shape Constructors GlypheShape() Declaration public GlypheShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.LineShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.LineShape.html",
    "title": "Class LineShape | GFX",
    "keywords": "Class LineShape Inheritance object Shape LineShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class LineShape : Shape Constructors LineShape() Declaration public LineShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.PlaneShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.PlaneShape.html",
    "title": "Class PlaneShape | GFX",
    "keywords": "Class PlaneShape Inheritance object Shape PlaneShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class PlaneShape : Shape Constructors PlaneShape() Declaration public PlaneShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.QubeShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.QubeShape.html",
    "title": "Class QubeShape | GFX",
    "keywords": "Class QubeShape Inheritance object Shape QubeShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class QubeShape : Shape Constructors QubeShape() Declaration public QubeShape() Methods GetNormals() Declaration public float[] GetNormals() Returns Type Description float[] GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.RectShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.RectShape.html",
    "title": "Class RectShape | GFX",
    "keywords": "Class RectShape Inheritance object Shape RectShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class RectShape : Shape Constructors RectShape() Declaration public RectShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.Shape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.Shape.html",
    "title": "Class Shape | GFX",
    "keywords": "Class Shape Inheritance object Shape BufferedSpriteShape FrameShape GlypheShape LineShape PlaneShape QubeShape RectShape SpriteShape Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public abstract class Shape Constructors Shape() Declaration protected Shape() Properties vbo Declaration public int vbo { get; set; } Property Value Type Description int Methods GetShape() Declaration public abstract float[] GetShape() Returns Type Description float[]"
  },
  "obj/api/Genesis.Graphics.Shapes.SpriteShape.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.SpriteShape.html",
    "title": "Class SpriteShape | GFX",
    "keywords": "Class SpriteShape Inheritance object Shape SpriteShape Inherited Members Shape.vbo object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics.Shapes Assembly: Genesis.dll Syntax public class SpriteShape : Shape Constructors SpriteShape() Declaration public SpriteShape() Methods GetShape() Declaration public override float[] GetShape() Returns Type Description float[] Overrides Shape.GetShape()"
  },
  "obj/api/Genesis.Graphics.Shapes.html": {
    "href": "obj/api/Genesis.Graphics.Shapes.html",
    "title": "Namespace Genesis.Graphics.Shapes | GFX",
    "keywords": "Namespace Genesis.Graphics.Shapes Classes BufferedSpriteShape Represents a shape for a buffered sprite in a graphics context. FrameShape Represents a shape that defines a frame or rectangle. GlypheShape Represents a shape that defines a glyphe (glyph or character). LineShape Represents a shape that defines a line segment. PlaneShape Represents a shape that defines a plane in three-dimensional space. QubeShape Represents a shape that defines a cube in three-dimensional space. RectShape Represents a shape that defines a rectangle in two-dimensional space. Shape Represents an abstract base class for defining shapes in a graphics context. SpriteShape Represents a shape that can be rendered as a sprite."
  },
  "obj/api/Genesis.Graphics.TexCoords.html": {
    "href": "obj/api/Genesis.Graphics.TexCoords.html",
    "title": "Class TexCoords | GFX",
    "keywords": "Class TexCoords Values for texture coords Inheritance object TexCoords Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class TexCoords Constructors TexCoords() Declaration public TexCoords() TexCoords(Vec3, Vec3, Vec3, Vec3) Declaration public TexCoords(Vec3 topLeft, Vec3 topRight, Vec3 bottomRight, Vec3 bottomLeft) Parameters Type Name Description Vec3 topLeft Vec3 topRight Vec3 bottomRight Vec3 bottomLeft Properties BottomLeft Declaration public Vec3 BottomLeft { get; set; } Property Value Type Description Vec3 BottomRight Declaration public Vec3 BottomRight { get; set; } Property Value Type Description Vec3 TopLeft Declaration public Vec3 TopLeft { get; set; } Property Value Type Description Vec3 TopRight Declaration public Vec3 TopRight { get; set; } Property Value Type Description Vec3 Methods GetFloats() Declaration public float[] GetFloats() Returns Type Description float[]"
  },
  "obj/api/Genesis.Graphics.Texture.html": {
    "href": "obj/api/Genesis.Graphics.Texture.html",
    "title": "Class Texture | GFX",
    "keywords": "Class Texture Inheritance object Texture Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Texture Constructors Texture(Bitmap) Declaration public Texture(Bitmap bitmap) Parameters Type Name Description Bitmap bitmap Texture(int) Declaration public Texture(int RenderID) Parameters Type Name Description int RenderID Texture(string, Bitmap) Declaration public Texture(string name, Bitmap bitnmap) Parameters Type Name Description string name Bitmap bitnmap Properties Bitnmap Declaration public Bitmap Bitnmap { get; set; } Property Value Type Description Bitmap Name Declaration public string Name { get; set; } Property Value Type Description string RenderID Declaration public int RenderID { get; set; } Property Value Type Description int"
  },
  "obj/api/Genesis.Graphics.Viewport.html": {
    "href": "obj/api/Genesis.Graphics.Viewport.html",
    "title": "Class Viewport | GFX",
    "keywords": "Class Viewport Inheritance object Viewport Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Graphics Assembly: Genesis.dll Syntax public class Viewport Constructors Viewport() Declaration public Viewport() Viewport(float, float) Declaration public Viewport(float width, float height) Parameters Type Name Description float width float height Viewport(float, float, float, float) Declaration public Viewport(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Properties Height Declaration public float Height { get; set; } Property Value Type Description float Width Declaration public float Width { get; set; } Property Value Type Description float X Declaration public float X { get; set; } Property Value Type Description float Y Declaration public float Y { get; set; } Property Value Type Description float Methods GetSize() Declaration public Size GetSize() Returns Type Description Size GetSizeF() Declaration public SizeF GetSizeF() Returns Type Description SizeF SetNewViewport(float, float) Declaration public void SetNewViewport(float width, float height) Parameters Type Name Description float width float height"
  },
  "obj/api/Genesis.Graphics.html": {
    "href": "obj/api/Genesis.Graphics.html",
    "title": "Namespace Genesis.Graphics | GFX",
    "keywords": "Namespace Genesis.Graphics Namespaces Genesis.Graphics.Animation3D Classes Animation Represents an animation definition with details such as name, starting cell, row, and number of frames. Camera Represents a camera in a graphics context for rendering 2D scenes. Face Represents a face in a 3D model with vertices, texture coordinates, and optional properties. Font Represents a font with information about glyph size, spacing, and glyph atlas. Framebuffer Represents a framebuffer object in graphics rendering. Glyphe Represents a glyph in a font texture atlas. Material Class representing a 3D material and managing its properties. Mesh Class representing a 3D mesh, including its geometry and material information. PerspectiveCamera Represents a perspective camera derived from the Camera class. Shader Represents a shader used in graphics rendering. ShaderProgram Represents a shader program consisting of a vertex shader and a fragment shader. TexCoords Represents values for texture coordinates defining a rectangle. Texture Represents a texture used in graphics rendering. Viewport Represents a viewport used in graphics rendering. Structs MaterialBuffer Struktur zur Darstellung von Materialdaten, die in einem Material-Buffer gespeichert werden. Interfaces IRenderDevice Interface for a rendering device that handles graphics rendering operations. Enums CameraType"
  },
  "obj/api/Genesis.Math.Matrix4x4.html": {
    "href": "obj/api/Genesis.Math.Matrix4x4.html",
    "title": "Class Matrix4x4 | GFX",
    "keywords": "Class Matrix4x4 Inheritance object Matrix4x4 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Matrix4x4 Constructors Matrix4x4() Declaration public Matrix4x4() Properties this[int, int] Declaration public float this[int row, int col] { get; set; } Parameters Type Name Description int row int col Property Value Type Description float Methods Identity() Declaration public static Matrix4x4 Identity() Returns Type Description Matrix4x4 LookAt(Vec3, Vec3, Vec3) Declaration public static Matrix4x4 LookAt(Vec3 eye, Vec3 target, Vec3 up) Parameters Type Name Description Vec3 eye Vec3 target Vec3 up Returns Type Description Matrix4x4 Multiply(Matrix4x4) Declaration public Matrix4x4 Multiply(Matrix4x4 right) Parameters Type Name Description Matrix4x4 right Returns Type Description Matrix4x4 Multiply(Vec3) Declaration public Vec3 Multiply(Vec3 vector) Parameters Type Name Description Vec3 vector Returns Type Description Vec3 Normalize() Declaration public void Normalize() Ortho(float, float, float, float, float, float) Declaration public static Matrix4x4 Ortho(float left, float right, float bottom, float top, float near, float far) Parameters Type Name Description float left float right float bottom float top float near float far Returns Type Description Matrix4x4 RotateX(float) Declaration public static Matrix4x4 RotateX(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 RotateY(float) Declaration public static Matrix4x4 RotateY(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 RotateZ(float) Declaration public static Matrix4x4 RotateZ(float angleInRadians) Parameters Type Name Description float angleInRadians Returns Type Description Matrix4x4 Scale(Vec3) Declaration public static Matrix4x4 Scale(Vec3 scale) Parameters Type Name Description Vec3 scale Returns Type Description Matrix4x4 ToArray() Declaration public float[] ToArray() Returns Type Description float[] Translate(Vec3) Declaration public static Matrix4x4 Translate(Vec3 translation) Parameters Type Name Description Vec3 translation Returns Type Description Matrix4x4 Operators operator *(Matrix4x4, Matrix4x4) Declaration public static Matrix4x4 operator *(Matrix4x4 left, Matrix4x4 right) Parameters Type Name Description Matrix4x4 left Matrix4x4 right Returns Type Description Matrix4x4"
  },
  "obj/api/Genesis.Math.NoisePoint.html": {
    "href": "obj/api/Genesis.Math.NoisePoint.html",
    "title": "Struct NoisePoint | GFX",
    "keywords": "Struct NoisePoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public struct NoisePoint Constructors NoisePoint(float, float, float) Declaration public NoisePoint(float x, float y, float value) Parameters Type Name Description float x float y float value Fields value Declaration public float value Field Value Type Description float x Declaration public float x Field Value Type Description float y Declaration public float y Field Value Type Description float"
  },
  "obj/api/Genesis.Math.PerlinNoise.html": {
    "href": "obj/api/Genesis.Math.PerlinNoise.html",
    "title": "Class PerlinNoise | GFX",
    "keywords": "Class PerlinNoise Inheritance object PerlinNoise Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class PerlinNoise Constructors PerlinNoise() Declaration public PerlinNoise() Methods GenerateNoise(float, float, float, int, int) Declaration public static float GenerateNoise(float x, float y, float persistence, int octaves, int seed) Parameters Type Name Description float x float y float persistence int octaves int seed Returns Type Description float GenerateNoiseMap(int, int, int) Declaration public List<NoisePoint> GenerateNoiseMap(int width, int height, int seed) Parameters Type Name Description int width int height int seed Returns Type Description List<NoisePoint>"
  },
  "obj/api/Genesis.Math.Rect.html": {
    "href": "obj/api/Genesis.Math.Rect.html",
    "title": "Class Rect | GFX",
    "keywords": "Class Rect Inheritance object Rect Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Rect Constructors Rect() Declaration public Rect() Rect(float, float, float, float) Declaration public Rect(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Properties Height Declaration public float Height { get; set; } Property Value Type Description float Width Declaration public float Width { get; set; } Property Value Type Description float X Declaration public float X { get; set; } Property Value Type Description float Y Declaration public float Y { get; set; } Property Value Type Description float Methods Contains(float, float) Declaration public bool Contains(float x, float y) Parameters Type Name Description float x float y Returns Type Description bool Intersects(Rect) Declaration public bool Intersects(Rect rect) Parameters Type Name Description Rect rect Returns Type Description bool ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "obj/api/Genesis.Math.Vec3.html": {
    "href": "obj/api/Genesis.Math.Vec3.html",
    "title": "Class Vec3 | GFX",
    "keywords": "Class Vec3 Vector for coordinates Inheritance object Vec3 Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Math Assembly: Genesis.dll Syntax public class Vec3 Constructors Vec3(vec3) Declaration public Vec3(vec3 vec3) Parameters Type Name Description vec3 vec3 Vec3(Point) Declaration public Vec3(Point point) Parameters Type Name Description Point point Vec3(PointF) Declaration public Vec3(PointF point) Parameters Type Name Description PointF point Vec3(Size) Declaration public Vec3(Size size) Parameters Type Name Description Size size Vec3(SizeF) Declaration public Vec3(SizeF size) Parameters Type Name Description SizeF size Vec3(float) Creates a new Vector Declaration public Vec3(float value) Parameters Type Name Description float value Vec3(float, float) Creates a new Vector Declaration public Vec3(float x, float y) Parameters Type Name Description float x float y Vec3(float, float, float) Creates a new Vector Declaration public Vec3(float x, float y, float z) Parameters Type Name Description float x float y float z Properties X Declaration public float X { get; set; } Property Value Type Description float Y Declaration public float Y { get; set; } Property Value Type Description float Z Declaration public float Z { get; set; } Property Value Type Description float Methods Add(Vec3) Adds the value from a vector Declaration public void Add(Vec3 vec) Parameters Type Name Description Vec3 vec Add(float, float) Adds the values to the vector Declaration public void Add(float x, float y) Parameters Type Name Description float x float y Add(float, float, float) Adds the values to the vector Declaration public void Add(float x, float y, float z) Parameters Type Name Description float x float y float z AddX(float) Add the value to the X param Declaration public void AddX(float x) Parameters Type Name Description float x AddY(float) Add the value to the y param Declaration public void AddY(float y) Parameters Type Name Description float y AddZ(float) Add the value to the z param Declaration public void AddZ(float z) Parameters Type Name Description float z Cross(Vec3, Vec3) Declaration public static Vec3 Cross(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description Vec3 Degres(Vec3) Returns the offset angle to the vector Declaration public float Degres(Vec3 vec3) Parameters Type Name Description Vec3 vec3 Returns Type Description float Degres(float, float) Returns the offset angle to the vector Declaration public float Degres(float x, float y) Parameters Type Name Description float x float y Returns Type Description float Distance(Vec3) Returns the distance between two vectors Declaration public float Distance(Vec3 vec3) Parameters Type Name Description Vec3 vec3 Returns Type Description float Dot(Vec3, Vec3) Declaration public static float Dot(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description float Forward(Vec3, float) Returns the forward vector Declaration public Vec3 Forward(Vec3 rotation, float dist) Parameters Type Name Description Vec3 rotation float dist Returns Type Description Vec3 Normalize() Declaration public Vec3 Normalize() Returns Type Description Vec3 Normalized(Vec3) Declaration public static Vec3 Normalized(Vec3 vec) Parameters Type Name Description Vec3 vec Returns Type Description Vec3 Set(Vec3) Sets the value for the vector Declaration public void Set(Vec3 vec) Parameters Type Name Description Vec3 vec Set(float, float, float) Sets the value for the vector Declaration public void Set(float x, float y, float z) Parameters Type Name Description float x float y float z Sub(Vec3) Subtract the vector Declaration public void Sub(Vec3 v) Parameters Type Name Description Vec3 v ToBulletVec3() Declaration public Vector3 ToBulletVec3() Returns Type Description Vector3 ToGlmVec3() Declaration public vec3 ToGlmVec3() Returns Type Description vec3 ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Towards(float, float) Returns a new vector with the offset cordinates towards the given vector. Declaration public Vec3 Towards(float degrees, float dist) Parameters Type Name Description float degrees float dist Returns Type Description Vec3 Towards2D(float, Vec3, float) Returns a new vector towards the given direction. Declaration public static Vec3 Towards2D(float degrees, Vec3 start, float dist) Parameters Type Name Description float degrees Vec3 start float dist Returns Type Description Vec3 Towards3D(Vec3, Vec3, float) Calculates the Vector towards in 3D Declaration public static Vec3 Towards3D(Vec3 rotation, Vec3 start, float dist) Parameters Type Name Description Vec3 rotation Vec3 start float dist Returns Type Description Vec3 Towards3D(float, float, float, Vec3, float) Calculates the towards vector Declaration public static Vec3 Towards3D(float rotX, float rotY, float rotZ, Vec3 start, float dist) Parameters Type Name Description float rotX float rotY float rotZ Vec3 start float dist Returns Type Description Vec3 Zero() Create a new vector with X = 0, Y = 0, Z = 0 Declaration public static Vec3 Zero() Returns Type Description Vec3 Operators operator +(Vec3, Vec3) Add operator Declaration public static Vec3 operator +(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description Vec3 operator /(Vec3, Vec3) Declaration public static Vec3 operator /(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description Vec3 operator *(Vec3, Vec3) Declaration public static Vec3 operator *(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description Vec3 operator *(Vec3, float) Multiply with float Declaration public static Vec3 operator *(Vec3 vec, float value) Parameters Type Name Description Vec3 vec float value Returns Type Description Vec3 operator -(Vec3, Vec3) Sub operator Declaration public static Vec3 operator -(Vec3 vec1, Vec3 vec2) Parameters Type Name Description Vec3 vec1 Vec3 vec2 Returns Type Description Vec3"
  },
  "obj/api/Genesis.Math.html": {
    "href": "obj/api/Genesis.Math.html",
    "title": "Namespace Genesis.Math | GFX",
    "keywords": "Namespace Genesis.Math Classes Matrix4x4 PerlinNoise Class for generating Perlin noise. Rect Represents a rectangle with position and dimensions. Vec3 Represents a 3D vector for coordinates. Structs NoisePoint Represents a point in a noise map with coordinates and a noise value."
  },
  "obj/api/Genesis.Physics.Aabb.html": {
    "href": "obj/api/Genesis.Physics.Aabb.html",
    "title": "Class Aabb | GFX",
    "keywords": "Class Aabb Inheritance object Aabb Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class Aabb Constructors Aabb() Creates a new Aabb Declaration public Aabb() Aabb(Vector3, Vector3) Creates a new Aabb Declaration public Aabb(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min Vector3 max Properties Max Declaration public Vec3 Max { get; set; } Property Value Type Description Vec3 Min Declaration public Vec3 Min { get; set; } Property Value Type Description Vec3 Methods Contains(Vec3) Checks if the aabb contains a point Declaration public bool Contains(Vec3 v) Parameters Type Name Description Vec3 v Returns Type Description bool FromBulletRigidBody(RigidBody) Returns the aabb from a bullet rigidbody Declaration public static Aabb FromBulletRigidBody(RigidBody rigidBody) Parameters Type Name Description RigidBody rigidBody Returns Type Description Aabb IntersectRay(Vec3, Vec3, Vec3, Vec3) Declaration public static bool IntersectRay(Vec3 rayOrigin, Vec3 rayDirection, Vec3 aabbMin, Vec3 aabbMax) Parameters Type Name Description Vec3 rayOrigin Vec3 rayDirection Vec3 aabbMin Vec3 aabbMax Returns Type Description bool"
  },
  "obj/api/Genesis.Physics.HitResult.html": {
    "href": "obj/api/Genesis.Physics.HitResult.html",
    "title": "Struct HitResult | GFX",
    "keywords": "Struct HitResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct HitResult Fields hitLocation Declaration public Vec3 hitLocation Field Value Type Description Vec3 rayEnd Declaration public Vec3 rayEnd Field Value Type Description Vec3 rayStart Declaration public Vec3 rayStart Field Value Type Description Vec3 rigidBody Declaration public RigidBody rigidBody Field Value Type Description RigidBody"
  },
  "obj/api/Genesis.Physics.MatrixSet.html": {
    "href": "obj/api/Genesis.Physics.MatrixSet.html",
    "title": "Struct MatrixSet | GFX",
    "keywords": "Struct MatrixSet Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct MatrixSet Fields projectionMatrix Declaration public mat4 projectionMatrix Field Value Type Description mat4 viewMatrix Declaration public mat4 viewMatrix Field Value Type Description mat4"
  },
  "obj/api/Genesis.Physics.MouseRay2.html": {
    "href": "obj/api/Genesis.Physics.MouseRay2.html",
    "title": "Class MouseRay2 | GFX",
    "keywords": "Class MouseRay2 Inheritance object MouseRay2 Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class MouseRay2 Constructors MouseRay2() Declaration public MouseRay2() Methods GetRayTo(Point, PerspectiveCamera, Viewport) Declaration public Vector3 GetRayTo(Point point, PerspectiveCamera camera, Viewport viewport) Parameters Type Name Description Point point PerspectiveCamera camera Viewport viewport Returns Type Description Vector3"
  },
  "obj/api/Genesis.Physics.PhysicHandler.html": {
    "href": "obj/api/Genesis.Physics.PhysicHandler.html",
    "title": "Class PhysicHandler | GFX",
    "keywords": "Class PhysicHandler Inheritance object PhysicHandler PhysicsHandler2D PhysicsHandler3D Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public abstract class PhysicHandler Constructors PhysicHandler() Declaration public PhysicHandler() Properties Callbacks Declaration public Dictionary<object, PhysicHandlerEvent> Callbacks { get; set; } Property Value Type Description Dictionary<object, PhysicHandlerEvent> Methods ManageElement(PhysicsBehavior) Declaration public virtual void ManageElement(PhysicsBehavior physicsBehavior) Parameters Type Name Description PhysicsBehavior physicsBehavior Process(Scene, Game) Declaration public abstract void Process(Scene scene, Game game) Parameters Type Name Description Scene scene Game game"
  },
  "obj/api/Genesis.Physics.PhysicHandlerEvent.html": {
    "href": "obj/api/Genesis.Physics.PhysicHandlerEvent.html",
    "title": "Delegate PhysicHandlerEvent | GFX",
    "keywords": "Delegate PhysicHandlerEvent Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public delegate void PhysicHandlerEvent(Scene scene, Game game, object element) Parameters Type Name Description Scene scene Game game object element Constructors PhysicHandlerEvent(object, IntPtr) Declaration public PhysicHandlerEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, object, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, object element, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game object element AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, object) Declaration public virtual void Invoke(Scene scene, Game game, object element) Parameters Type Name Description Scene scene Game game object element"
  },
  "obj/api/Genesis.Physics.PhysicPropeterys.html": {
    "href": "obj/api/Genesis.Physics.PhysicPropeterys.html",
    "title": "Struct PhysicPropeterys | GFX",
    "keywords": "Struct PhysicPropeterys Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public struct PhysicPropeterys Fields gravityX Declaration public float gravityX Field Value Type Description float gravityY Declaration public float gravityY Field Value Type Description float gravityZ Declaration public float gravityZ Field Value Type Description float"
  },
  "obj/api/Genesis.Physics.PhysicsBehavior.html": {
    "href": "obj/api/Genesis.Physics.PhysicsBehavior.html",
    "title": "Class PhysicsBehavior | GFX",
    "keywords": "Class PhysicsBehavior Inheritance object IGameBehavior PhysicsBehavior Rigidbody2D ConvexHullBehavior QubeConvexHull StaticMeshBehavior Inherited Members IGameBehavior.OnInit(Game, GameElement) IGameBehavior.OnUpdate(Game, GameElement) IGameBehavior.OnRender(Game, GameElement) IGameBehavior.OnDestroy(Game, GameElement) IGameBehavior.Parent object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public abstract class PhysicsBehavior : IGameBehavior Constructors PhysicsBehavior() Declaration protected PhysicsBehavior() Fields OnCollide Declaration public PhysicsBehaviorEvent OnCollide Field Value Type Description PhysicsBehaviorEvent Methods Collide(Scene, Game, RigidBody) Declaration public virtual void Collide(Scene scene, Game game, RigidBody collisionObject) Parameters Type Name Description Scene scene Game game RigidBody collisionObject GetPhysicsObject() Declaration public abstract object GetPhysicsObject() Returns Type Description object GetPhysicsObject<T>() Declaration public abstract T GetPhysicsObject<T>() Returns Type Description T Type Parameters Name Description T"
  },
  "obj/api/Genesis.Physics.PhysicsBehaviorEvent.html": {
    "href": "obj/api/Genesis.Physics.PhysicsBehaviorEvent.html",
    "title": "Delegate PhysicsBehaviorEvent | GFX",
    "keywords": "Delegate PhysicsBehaviorEvent Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public delegate void PhysicsBehaviorEvent(Scene scene, Game game, object collision) Parameters Type Name Description Scene scene Game game object collision Constructors PhysicsBehaviorEvent(object, IntPtr) Declaration public PhysicsBehaviorEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Scene, Game, object, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Scene scene, Game game, object collision, AsyncCallback callback, object @object) Parameters Type Name Description Scene scene Game game object collision AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Scene, Game, object) Declaration public virtual void Invoke(Scene scene, Game game, object collision) Parameters Type Name Description Scene scene Game game object collision"
  },
  "obj/api/Genesis.Physics.PhysicsHandler2D.html": {
    "href": "obj/api/Genesis.Physics.PhysicsHandler2D.html",
    "title": "Class PhysicsHandler2D | GFX",
    "keywords": "Class PhysicsHandler2D Represents a 2D physics handler responsible for managing physics simulation in a game. Inheritance object PhysicHandler PhysicsHandler2D Inherited Members PhysicHandler.Callbacks object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class PhysicsHandler2D : PhysicHandler Constructors PhysicsHandler2D(float, float) Initializes a new instance of the PhysicsHandler2D class with specified gravity values. Declaration public PhysicsHandler2D(float gravityX, float gravityY) Parameters Type Name Description float gravityX The X component of gravity. float gravityY The Y component of gravity. Properties PhysicsWorld Gets or sets the 2D physics world used for simulation. Declaration public DiscreteDynamicsWorld PhysicsWorld { get; set; } Property Value Type Description DiscreteDynamicsWorld ProcessPhysics Gets or sets a flag indicating whether physics simulation should be processed. Declaration public bool ProcessPhysics { get; set; } Property Value Type Description bool Substepps Gets ore sets the substepps for physic simulation Declaration public int Substepps { get; set; } Property Value Type Description int TickRate Gets or sets the tick rate for physics simulation. Declaration public float TickRate { get; set; } Property Value Type Description float Methods ManageElement(PhysicsBehavior) Manages a physics behavior element by adding its RigidBody to the physics world. Declaration public override void ManageElement(PhysicsBehavior rigidBody) Parameters Type Name Description PhysicsBehavior rigidBody The PhysicsBehavior representing the rigid body element. Overrides PhysicHandler.ManageElement(PhysicsBehavior) Process(Scene, Game) Processes the physics simulation for the given scene and game. Declaration public override void Process(Scene scene, Game game) Parameters Type Name Description Scene scene The current game scene. Game game The current game instance. Overrides PhysicHandler.Process(Scene, Game)"
  },
  "obj/api/Genesis.Physics.PhysicsHandler3D.html": {
    "href": "obj/api/Genesis.Physics.PhysicsHandler3D.html",
    "title": "Class PhysicsHandler3D | GFX",
    "keywords": "Class PhysicsHandler3D Represents a 3D physics handler responsible for managing physics simulation in a game. Inheritance object PhysicHandler PhysicsHandler3D Inherited Members PhysicHandler.Callbacks object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class PhysicsHandler3D : PhysicHandler Constructors PhysicsHandler3D(PhysicPropeterys) Initializes a new instance of the PhysicsHandler3D class with specified PhysicPropeterys. Declaration public PhysicsHandler3D(PhysicPropeterys propeterys) Parameters Type Name Description PhysicPropeterys propeterys The physics properties containing gravity values. PhysicsHandler3D(float, float, float) Initializes a new instance of the PhysicsHandler3D class with specified gravity values. Declaration public PhysicsHandler3D(float gravityX, float gravityY, float gravityZ) Parameters Type Name Description float gravityX The X component of gravity. float gravityY The Y component of gravity. float gravityZ The Z component of gravity. Properties PhysicsWorld Gets or sets the 3D physics world used for simulation. Declaration public DiscreteDynamicsWorld PhysicsWorld { get; set; } Property Value Type Description DiscreteDynamicsWorld ProcessPhysics Gets or sets a flag indicating whether physics simulation should be processed. Declaration public bool ProcessPhysics { get; set; } Property Value Type Description bool Methods ManageElement(PhysicsBehavior) Manages a physics behavior element by adding its RigidBody to the physics world. Declaration public override void ManageElement(PhysicsBehavior rigidBody) Parameters Type Name Description PhysicsBehavior rigidBody The PhysicsBehavior representing the rigid body element. Overrides PhysicHandler.ManageElement(PhysicsBehavior) Process(Scene, Game) Processes the physics simulation for the given scene and game. Declaration public override void Process(Scene scene, Game game) Parameters Type Name Description Scene scene The current game scene. Game game The current game instance. Overrides PhysicHandler.Process(Scene, Game)"
  },
  "obj/api/Genesis.Physics.Raycast.html": {
    "href": "obj/api/Genesis.Physics.Raycast.html",
    "title": "Class Raycast | GFX",
    "keywords": "Class Raycast Inheritance object Raycast Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.Physics Assembly: Genesis.dll Syntax public class Raycast Constructors Raycast(Camera, Viewport) Declaration public Raycast(Camera camera, Viewport viewport) Parameters Type Name Description Camera camera Viewport viewport Properties Camera Declaration public Camera Camera { get; set; } Property Value Type Description Camera Viewport Declaration public Viewport Viewport { get; set; } Property Value Type Description Viewport Methods GetEndVec(Camera, Viewport, int, int) Declaration public static vec4 GetEndVec(Camera camera, Viewport vp, int posX, int posY) Parameters Type Name Description Camera camera Viewport vp int posX int posY Returns Type Description vec4 GetMouseWorldPosition(Camera, Viewport, int, int) Declaration public static Vec3 GetMouseWorldPosition(Camera camera, Viewport viewport, int mouseX, int mouseY) Parameters Type Name Description Camera camera Viewport viewport int mouseX int mouseY Returns Type Description Vec3 GetMouseWorldPosition(int, int) Declaration public Vec3 GetMouseWorldPosition(int mouseX, int mouseY) Parameters Type Name Description int mouseX int mouseY Returns Type Description Vec3 GetRayDir(vec4, vec4) Declaration public static vec3 GetRayDir(vec4 start, vec4 end) Parameters Type Name Description vec4 start vec4 end Returns Type Description vec3 GetStartVec(Camera, Viewport, int, int) Declaration public static vec4 GetStartVec(Camera camera, Viewport vp, int posX, int posY) Parameters Type Name Description Camera camera Viewport vp int posX int posY Returns Type Description vec4 GetViewProjectionMatrix(Camera) Declaration public static MatrixSet GetViewProjectionMatrix(Camera camera) Parameters Type Name Description Camera camera Returns Type Description MatrixSet PerformCast(Camera, Viewport, PhysicHandler, int, int) Declaration public static HitResult PerformCast(Camera camera, Viewport viewport, PhysicHandler physicHandler, int posX, int posY) Parameters Type Name Description Camera camera Viewport viewport PhysicHandler physicHandler int posX int posY Returns Type Description HitResult PerformCast(PhysicHandler, int, int) Declaration public HitResult PerformCast(PhysicHandler physicHandler, int posX, int posY) Parameters Type Name Description PhysicHandler physicHandler int posX int posY Returns Type Description HitResult"
  },
  "obj/api/Genesis.Physics.html": {
    "href": "obj/api/Genesis.Physics.html",
    "title": "Namespace Genesis.Physics | GFX",
    "keywords": "Namespace Genesis.Physics Classes Aabb Represents an Axis-Aligned Bounding Box (AABB) in 3D space. MouseRay2 Represents a class for calculating a ray based on mouse input. PhysicHandler Represents an abstract class for handling physics interactions. PhysicsBehavior Represents an abstract class for defining physics behavior in the game. PhysicsHandler2D Represents a 2D physics handler responsible for managing physics simulation in a game. PhysicsHandler3D Represents a 3D physics handler responsible for managing physics simulation in a game. Raycast Represents a class for performing raycasting in 3D space. Structs HitResult Represents the result of a raycasting hit. MatrixSet Represents a set of matrices used in raycasting. PhysicPropeterys Represents the properties related to physics. Delegates PhysicHandlerEvent Represents a delegate for handling physics events. PhysicsBehaviorEvent Represents a delegate for handling physics behavior events."
  },
  "obj/api/Genesis.UI.Canvas.html": {
    "href": "obj/api/Genesis.UI.Canvas.html",
    "title": "Class Canvas | GFX",
    "keywords": "Class Canvas Inheritance object Canvas Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Canvas Constructors Canvas(string, Vec3, Vec3) Creates a new canvas instance Declaration public Canvas(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name Vec3 location Vec3 size Properties Enabled Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Declaration public string Name { get; set; } Property Value Type Description string Size Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Widgets Declaration public List<Widget> Widgets { get; set; } Property Value Type Description List<Widget> Methods AddWidget(Widget) Adds a entity to the canvas Declaration public void AddWidget(Widget entity) Parameters Type Name Description Widget entity CenterWidget(Canvas, Widget) Centers the widget in the middle of the canvas Declaration public static void CenterWidget(Canvas canvas, Widget widget) Parameters Type Name Description Canvas canvas Widget widget GetBounds() Returns the bounds from the canvas Declaration public Rect GetBounds() Returns Type Description Rect GetScreenBounds() Returns the screen bounds from the canvas Declaration public Rect GetScreenBounds() Returns Type Description Rect GetWidget(string) Return a widget with the specified name, searching within entities and their children. Declaration public Widget GetWidget(string name) Parameters Type Name Description string name The name to search for. Returns Type Description Widget The widget with the specified name, or null if not found. LoadCanvas(string, AssetManager, UIParser) Loads a canvas from a specified JSON file using a UI parser and asset manager. Declaration public static Canvas LoadCanvas(string File, AssetManager assets, UIParser parser) Parameters Type Name Description string File Path to the JSON file containing canvas configuration. AssetManager assets Asset manager for managing resources such as images, fonts, etc. UIParser parser UI parser that contains the logic for parsing the JSON data. Returns Type Description Canvas The created canvas based on the JSON configuration. LoadWidget(JObject, AssetManager, UIParser) Loads a widget from provided JSON data using a UI parser and asset manager. Declaration public static Widget LoadWidget(JObject data, AssetManager assets, UIParser parser) Parameters Type Name Description JObject data JSON data containing the configuration of the widget to be created. AssetManager assets Asset manager for managing resources such as images, fonts, etc. UIParser parser UI parser that contains the logic for parsing the JSON data. Returns Type Description Widget The created widget based on the JSON data. OnDispose(Game, Scene) Dispose the canvas Declaration public void OnDispose(Game game, Scene scene) Parameters Type Name Description Game game Scene scene OnInit(Game, Scene) Initial the canvas Declaration public void OnInit(Game game, Scene scene) Parameters Type Name Description Game game Scene scene OnRender(Game, IRenderDevice, Scene) Renders the canvas Declaration public void OnRender(Game game, IRenderDevice renderDevice, Scene scene) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene OnUpdate(Game, Scene) Update the canvas Declaration public void OnUpdate(Game game, Scene scene) Parameters Type Name Description Game game Scene scene"
  },
  "obj/api/Genesis.UI.ImageButton.html": {
    "href": "obj/api/Genesis.UI.ImageButton.html",
    "title": "Class ImageButton | GFX",
    "keywords": "Class ImageButton Inheritance object Widget ImageButton Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ImageButton : Widget Constructors ImageButton(string, Vec3, Vec3, Texture, Texture) Declaration public ImageButton(string name, Vec3 location, Vec3 size, Texture normalTexture, Texture hoverTexture) Parameters Type Name Description string name Vec3 location Vec3 size Texture normalTexture Texture hoverTexture Properties HoverTexture Declaration public Texture HoverTexture { get; set; } Property Value Type Description Texture NormalTexture Declaration public Texture NormalTexture { get; set; } Property Value Type Description Texture Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the entity Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "obj/api/Genesis.UI.Label.html": {
    "href": "obj/api/Genesis.UI.Label.html",
    "title": "Class Label | GFX",
    "keywords": "Class Label Inheritance object Widget Label Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Label : Widget Constructors Label(string, Vec3, string, Font, Color) Create a new instance of the label Declaration public Label(string name, Vec3 location, string text, Font font, Color color) Parameters Type Name Description string name Vec3 location string text Font font Color color Properties Font Declaration public Font Font { get; set; } Property Value Type Description Font FontSize Declaration public float FontSize { get; set; } Property Value Type Description float Text Declaration public string Text { get; set; } Property Value Type Description string TextColor Declaration public Color TextColor { get; set; } Property Value Type Description Color Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the label Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "obj/api/Genesis.UI.ListItem.html": {
    "href": "obj/api/Genesis.UI.ListItem.html",
    "title": "Class ListItem | GFX",
    "keywords": "Class ListItem Inheritance object ListItem Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ListItem Constructors ListItem(string, string, ListItemBehavior) Declaration public ListItem(string name, string text, ListItemBehavior func) Parameters Type Name Description string name string text ListItemBehavior func Properties Name Declaration public string Name { get; set; } Property Value Type Description string OnSelect Declaration public ListItemBehavior OnSelect { get; set; } Property Value Type Description ListItemBehavior Text Declaration public string Text { get; set; } Property Value Type Description string"
  },
  "obj/api/Genesis.UI.ListItemBehavior.html": {
    "href": "obj/api/Genesis.UI.ListItemBehavior.html",
    "title": "Delegate ListItemBehavior | GFX",
    "keywords": "Delegate ListItemBehavior Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void ListItemBehavior(Game game, Scene scene, ListItem item) Parameters Type Name Description Game game Scene scene ListItem item Constructors ListItemBehavior(object, IntPtr) Declaration public ListItemBehavior(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, Scene, ListItem, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, Scene scene, ListItem item, AsyncCallback callback, object @object) Parameters Type Name Description Game game Scene scene ListItem item AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, Scene, ListItem) Declaration public virtual void Invoke(Game game, Scene scene, ListItem item) Parameters Type Name Description Game game Scene scene ListItem item"
  },
  "obj/api/Genesis.UI.ListSelector.html": {
    "href": "obj/api/Genesis.UI.ListSelector.html",
    "title": "Class ListSelector | GFX",
    "keywords": "Class ListSelector Inheritance object Widget ListSelector Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ListSelector : Widget Constructors ListSelector(string, Vec3, Font) Declaration public ListSelector(string name, Vec3 location, Font font) Parameters Type Name Description string name Vec3 location Font font Properties CenterText Declaration public bool CenterText { get; set; } Property Value Type Description bool Font Declaration public Font Font { get; set; } Property Value Type Description Font FontSize Declaration public float FontSize { get; set; } Property Value Type Description float FontSpacing Declaration public float FontSpacing { get; set; } Property Value Type Description float IndexChangedBehavior Declaration public ListSelectorBehavior IndexChangedBehavior { get; set; } Property Value Type Description ListSelectorBehavior Items Declaration public List<ListItem> Items { get; set; } Property Value Type Description List<ListItem> LineHeight Declaration public float LineHeight { get; set; } Property Value Type Description float SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Type Description int Methods AddItem(ListItem) Declaration public void AddItem(ListItem item) Parameters Type Name Description ListItem item OnRender(Game, IRenderDevice, Scene, Canvas) Renders the entity Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas) OnUpdate(Game, Scene, Canvas) Update the entity Declaration public override void OnUpdate(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game Scene scene Canvas canvas Overrides Widget.OnUpdate(Game, Scene, Canvas)"
  },
  "obj/api/Genesis.UI.ListSelectorBehavior.html": {
    "href": "obj/api/Genesis.UI.ListSelectorBehavior.html",
    "title": "Delegate ListSelectorBehavior | GFX",
    "keywords": "Delegate ListSelectorBehavior Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void ListSelectorBehavior(Game game, Scene scene, ListSelector selector) Parameters Type Name Description Game game Scene scene ListSelector selector Constructors ListSelectorBehavior(object, IntPtr) Declaration public ListSelectorBehavior(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Game, Scene, ListSelector, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Game game, Scene scene, ListSelector selector, AsyncCallback callback, object @object) Parameters Type Name Description Game game Scene scene ListSelector selector AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Game, Scene, ListSelector) Declaration public virtual void Invoke(Game game, Scene scene, ListSelector selector) Parameters Type Name Description Game game Scene scene ListSelector selector"
  },
  "obj/api/Genesis.UI.Panel.html": {
    "href": "obj/api/Genesis.UI.Panel.html",
    "title": "Class Panel | GFX",
    "keywords": "Class Panel Inheritance object Widget Panel Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Panel : Widget Constructors Panel(string, Vec3, Vec3) Declaration public Panel(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name Vec3 location Vec3 size Properties BackgroundColor Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BackgroundImage Declaration public Texture BackgroundImage { get; set; } Property Value Type Description Texture HasBackgroundColor Declaration public bool HasBackgroundColor { get; set; } Property Value Type Description bool Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the entity Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "obj/api/Genesis.UI.ProgressBar.html": {
    "href": "obj/api/Genesis.UI.ProgressBar.html",
    "title": "Class ProgressBar | GFX",
    "keywords": "Class ProgressBar ProgressBar Class Inheritance object Widget ProgressBar Inherited Members Widget.AddChildren(Widget) Widget.OnInit(Game, Scene, Canvas) Widget.OnUpdate(Game, Scene, Canvas) Widget.OnDispose(Game, Scene, Canvas) Widget.GetRelativePos(Canvas) Widget.GetChildren(string) Widget.GetRelativeBounds2D(Canvas) Widget.IsHover(Game, Scene, Canvas) Widget.FindChildren(string) Widget.Name Widget.Location Widget.Size Widget.Parent Widget.Children Widget.Enabled Widget.Debug Widget.MouseEnter Widget.MouseLeave Widget.Click object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class ProgressBar : Widget Constructors ProgressBar(string, Vec3, Vec3) Creates a new progress bar Declaration public ProgressBar(string name, Vec3 location, Vec3 size) Parameters Type Name Description string name Vec3 location Vec3 size Properties BackgroundColor Declaration public Color BackgroundColor { get; set; } Property Value Type Description Color BarColor Declaration public Color BarColor { get; set; } Property Value Type Description Color BorderColor Declaration public Color BorderColor { get; set; } Property Value Type Description Color MaxValue Declaration public float MaxValue { get; set; } Property Value Type Description float Value Declaration public float Value { get; set; } Property Value Type Description float Methods OnRender(Game, IRenderDevice, Scene, Canvas) Renders the progress bar Declaration public override void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas Overrides Widget.OnRender(Game, IRenderDevice, Scene, Canvas)"
  },
  "obj/api/Genesis.UI.UIEvent.html": {
    "href": "obj/api/Genesis.UI.UIEvent.html",
    "title": "Delegate UIEvent | GFX",
    "keywords": "Delegate UIEvent Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate void UIEvent(Widget entity, Game game, Scene scene, Canvas canvas) Parameters Type Name Description Widget entity Game game Scene scene Canvas canvas Constructors UIEvent(object, IntPtr) Declaration public UIEvent(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(Widget, Game, Scene, Canvas, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(Widget entity, Game game, Scene scene, Canvas canvas, AsyncCallback callback, object @object) Parameters Type Name Description Widget entity Game game Scene scene Canvas canvas AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(Widget, Game, Scene, Canvas) Declaration public virtual void Invoke(Widget entity, Game game, Scene scene, Canvas canvas) Parameters Type Name Description Widget entity Game game Scene scene Canvas canvas"
  },
  "obj/api/Genesis.UI.UIParseHandler.html": {
    "href": "obj/api/Genesis.UI.UIParseHandler.html",
    "title": "Delegate UIParseHandler | GFX",
    "keywords": "Delegate UIParseHandler Namespace: Genesis.UI Assembly: Genesis.dll Syntax public delegate Widget UIParseHandler(JObject data, AssetManager assets) Parameters Type Name Description JObject data AssetManager assets Returns Type Description Widget Constructors UIParseHandler(object, IntPtr) Declaration public UIParseHandler(object @object, IntPtr method) Parameters Type Name Description object object IntPtr method Methods BeginInvoke(JObject, AssetManager, AsyncCallback, object) Declaration public virtual IAsyncResult BeginInvoke(JObject data, AssetManager assets, AsyncCallback callback, object @object) Parameters Type Name Description JObject data AssetManager assets AsyncCallback callback object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual Widget EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Widget Invoke(JObject, AssetManager) Declaration public virtual Widget Invoke(JObject data, AssetManager assets) Parameters Type Name Description JObject data AssetManager assets Returns Type Description Widget"
  },
  "obj/api/Genesis.UI.UIParser.html": {
    "href": "obj/api/Genesis.UI.UIParser.html",
    "title": "Class UIParser | GFX",
    "keywords": "Class UIParser This class provides funtions to parse an json object as an widget. Inheritance object UIParser Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class UIParser Constructors UIParser() Declaration public UIParser() Properties UIHandler Declaration public Dictionary<string, UIParseHandler> UIHandler { get; set; } Property Value Type Description Dictionary<string, UIParseHandler>"
  },
  "obj/api/Genesis.UI.Widget.html": {
    "href": "obj/api/Genesis.UI.Widget.html",
    "title": "Class Widget | GFX",
    "keywords": "Class Widget Inheritance object Widget ImageButton Label ListSelector Panel ProgressBar Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Genesis.UI Assembly: Genesis.dll Syntax public class Widget Constructors Widget() Creates a new instance for a entitiy Declaration public Widget() Properties Children Declaration public List<Widget> Children { get; set; } Property Value Type Description List<Widget> Debug Declaration public bool Debug { get; set; } Property Value Type Description bool Enabled Declaration public bool Enabled { get; set; } Property Value Type Description bool Location Declaration public Vec3 Location { get; set; } Property Value Type Description Vec3 Name Declaration public string Name { get; set; } Property Value Type Description string Parent Declaration public Widget Parent { get; set; } Property Value Type Description Widget Size Declaration public Vec3 Size { get; set; } Property Value Type Description Vec3 Methods AddChildren(Widget) Adds a children to the entity. Also sets the perent of the child entity Declaration public void AddChildren(Widget entity) Parameters Type Name Description Widget entity FindChildren(string) Recursively find a child widget with the given name. Declaration public Widget FindChildren(string name) Parameters Type Name Description string name The name to search for. Returns Type Description Widget The widget with the specified name, or null if not found. GetChildren(string) Returns the children with the name name Declaration public Widget GetChildren(string name) Parameters Type Name Description string name Returns Type Description Widget GetRelativeBounds2D(Canvas) Get the bounds relative to the canvas Declaration public Rect GetRelativeBounds2D(Canvas canvas) Parameters Type Name Description Canvas canvas Returns Type Description Rect GetRelativePos(Canvas) Get the relative postion to the screen. Declaration public Vec3 GetRelativePos(Canvas canvas) Parameters Type Name Description Canvas canvas Returns Type Description Vec3 IsHover(Game, Scene, Canvas) Rework!!! Checks if the mouse hovers over the entity Declaration public bool IsHover(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game Scene scene Canvas canvas Returns Type Description bool OnDispose(Game, Scene, Canvas) Dispose the entity Declaration public virtual void OnDispose(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game Scene scene Canvas canvas OnInit(Game, Scene, Canvas) Initial the entity Declaration public virtual void OnInit(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game Scene scene Canvas canvas OnRender(Game, IRenderDevice, Scene, Canvas) Renders the entity Declaration public virtual void OnRender(Game game, IRenderDevice renderDevice, Scene scene, Canvas canvas) Parameters Type Name Description Game game IRenderDevice renderDevice Scene scene Canvas canvas OnUpdate(Game, Scene, Canvas) Update the entity Declaration public virtual void OnUpdate(Game game, Scene scene, Canvas canvas) Parameters Type Name Description Game game Scene scene Canvas canvas Events Click Declaration public event UIEvent Click Event Type Type Description UIEvent MouseEnter Declaration public event UIEvent MouseEnter Event Type Type Description UIEvent MouseLeave Declaration public event UIEvent MouseLeave Event Type Type Description UIEvent"
  },
  "obj/api/Genesis.UI.html": {
    "href": "obj/api/Genesis.UI.html",
    "title": "Namespace Genesis.UI | GFX",
    "keywords": "Namespace Genesis.UI Classes Canvas Represents a canvas for organizing and rendering UI widgets. ImageButton Represents an image button widget in the UI. Label Represents a label widget in the UI. ListItem Represents a list item with a name, text, and a callback function for selection. ListSelector Represents a list selector widget in the UI, allowing the user to navigate and select items. Panel Represents a UI panel that can have a background image, background color, or both. ProgressBar Represents a progress bar UI element. UIParser This class provides functions to parse a JSON object as a widget. Widget Base class for UI widgets. Delegates ListItemBehavior ListSelectorBehavior UIEvent Delegate for handling UI events. UIParseHandler Delegate for handling the parsing of JSON data into a widget."
  },
  "obj/api/Genesis.html": {
    "href": "obj/api/Genesis.html",
    "title": "Namespace Genesis | GFX",
    "keywords": "Namespace Genesis Classes Class1"
  },
  "packages/Newtonsoft.Json.13.0.3/LICENSE.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/LICENSE.html",
    "title": "| GFX",
    "keywords": "The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "packages/Newtonsoft.Json.13.0.3/README.html": {
    "href": "packages/Newtonsoft.Json.13.0.3/README.html",
    "title": "Json.NET | GFX",
    "keywords": "Json.NET Json.NET is a popular high-performance JSON framework for .NET Serialize JSON Product product = new Product(); product.Name = \"Apple\"; product.Expiry = new DateTime(2008, 12, 28); product.Sizes = new string[] { \"Small\" }; string json = JsonConvert.SerializeObject(product); // { // \"Name\": \"Apple\", // \"Expiry\": \"2008-12-28T00:00:00\", // \"Sizes\": [ // \"Small\" // ] // } Deserialize JSON string json = @\"{ 'Name': 'Bad Boys', 'ReleaseDate': '1995-4-7T00:00:00', 'Genres': [ 'Action', 'Comedy' ] }\"; Movie m = JsonConvert.DeserializeObject<Movie>(json); string name = m.Name; // Bad Boys LINQ to JSON JArray array = new JArray(); array.Add(\"Manual text\"); array.Add(new DateTime(2000, 5, 23)); JObject o = new JObject(); o[\"MyArray\"] = array; string json = o.ToString(); // { // \"MyArray\": [ // \"Manual text\", // \"2000-05-23T00:00:00\" // ] // } Links Homepage Documentation NuGet Package Release Notes Contributing Guidelines License Stack Overflow"
  }
}