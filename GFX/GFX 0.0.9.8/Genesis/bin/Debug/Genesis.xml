<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genesis</name>
    </assembly>
    <members>
        <member name="M:Genesis.Core.AssetManager.LoadTextures">
            <summary>
            Loads Textures from the ressource folder
            </summary>
        </member>
        <member name="M:Genesis.Core.AssetManager.PackAssets(System.String)">
            <summary>
            Packs the assets as an asset libary
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Genesis.Core.AssetManager.ImportAssetLibary(System.String)">
            <summary>
            Import assets from a libary
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.CreateRigidBody(Genesis.Physics.PhysicHandler,System.Single)">
            <summary>
            Create the rigidbody for this behavior
            </summary>
            <param name="handler"></param>
            <param name="mass"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.Collide(Genesis.Core.Scene,Genesis.Core.Game,BulletSharp.RigidBody)">
            <summary>
            Gets called when the element collides with another
            </summary>
            <param name="scene"></param>
            <param name="game"></param>
            <param name="collisionObject"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.UpdateRigidBody">
            <summary>
            Sets the scaling for the RigidBody
            </summary>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnDestroy(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Destroys the behavior
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnInit(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Check on init if the parent type is a Element3D
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnRender(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Renderer callback
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.OnUpdate(Genesis.Core.Game,Genesis.Core.GameElement)">
            <summary>
            Update callback
            </summary>
            <param name="game"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Genesis.Core.Behaviors.Physics3D.StaticMeshBehavior.GetPhysicsObject">
            <summary>
            Returns the physic object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genesis.Core.Behaviors.Physics3D.ConvexHullBehavior">
            <summary>
            A ConvexHull Rigidbody for Element3D.
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.#ctor(Genesis.Graphics.IRenderDevice,Genesis.Graphics.Viewport)">
            <summary>
            Creates a new instance of a the Game class
            </summary>
            <param name="renderDevice"></param>
            <param name="viewport"></param>
        </member>
        <member name="M:Genesis.Core.Game.Start">
            <summary>
            Starts the main loop
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Loop">
            <summary>
            Main Loop. Handles the updates and the rendering
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.Stop">
            <summary>
            Stopt the main loop
            </summary>
        </member>
        <member name="M:Genesis.Core.Game.GetElementScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Get the screen cords of the given element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Game.GetElementCenterScreenLocation2D(Genesis.Core.GameElement)">
            <summary>
            Returns the screen location from the given element with a center anchor.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Game.GetSceneCord(Genesis.Math.Vec3)">
            <summary>
            Transforms a display vector to a vector inside the scene.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.GameElement.#ctor">
            <summary>
            Creates a new game element
            </summary>
        </member>
        <member name="M:Genesis.Core.GameElement.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game get initalized
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game get renders
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Called when the game gets updated
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.OnDestroy(Genesis.Core.Game)">
            <summary>
            Called when the game gets disposed
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior``1(``0)">
            <summary>
            Adds behavior of type t and returns them
            </summary>
            <typeparam name="T"></typeparam>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddBehavior(Genesis.Core.IGameBehavior)">
            <summary>
            Adds a behavior
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehavior``1">
            <summary>
            Gets the first game behavior of type t
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.GameElement.GetBehaviors``1">
            <summary>
            Returns all behaviors of the type t
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.GameElement.AddChild(Genesis.Core.GameElement)">
            <summary>
            Adds an children to the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.GameElement.GetInstance(Genesis.Core.GameElement)">
            <summary>
            Gets the propeterys from the element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Light.GetLightDirection(Genesis.Graphics.Camera)">
            <summary>
            Returns the sun position relative to the camera
            </summary>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Light.GetLightColor">
            <summary>
            Returns the light color in rgb
            </summary>
            <returns></returns>
        </member>
        <member name="T:Genesis.Core.Prefabs.BufferedSprite">
            <summary>
            Creates an Sprite Buffer
            </summary>
        </member>
        <member name="M:Genesis.Core.Prefabs.BufferedSprite.#ctor(System.String,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Creates a new sprite buffer
            </summary>
            <param name="name">Name of the game element</param>
            <param name="location">Location of the game element</param>
            <param name="texture">Texture for the sprites</param>
        </member>
        <member name="M:Genesis.Core.Prefabs.BufferedSprite.AddShape(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Adds a new shape at the given location and with the given size
            </summary>
            <param name="location">The location for the sprite</param>
            <param name="size">The size for the sprite</param>
        </member>
        <member name="M:Genesis.Core.Prefabs.BufferedSprite.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Init the game element
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Prefabs.BufferedSprite.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the game element
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Prefabs.BufferedSprite.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Updates the game element
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Prefabs.Terrain3D.GenerateTerrainData(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Generates the terrain data
            </summary>
            <param name="cellsX"></param>
            <param name="cellsZ"></param>
            <param name="cellWidth"></param>
            <param name="cellHeight"></param>
            <param name="colorA"></param>
            <param name="colorB"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Prefabs.Terrain3D.GenerateTerrainTile(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Generates a tile for the terrain grid
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <param name="cellWidth"></param>
            <param name="cellHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Prefabs.Terrain3D.CreateTerrainTileColor(System.Drawing.Color)">
            <summary>
            Gets the float values for a terrain tile
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:Genesis.Core.Prefabs.RectElement">
            <summary>
            Simple rectangle element
            </summary>
        </member>
        <member name="M:Genesis.Core.Prefabs.RectElement.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new rectangle
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Genesis.Core.Prefabs.RectElement.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the rectangle
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="T:Genesis.Core.Scene3D">
            <summary>
            Creates a scene for 3D rendering. This scene contains
            lightning and a optional skybox.
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor">
            <summary>
            Creates a new game scene
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.#ctor(System.String)">
            <summary>
            Creates a new game scene
            </summary>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(Genesis.Core.Layer)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddLayer(System.String)">
            <summary>
            Adds a layer to the scene
            </summary>
            <param name="layerName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddCanvas(Genesis.UI.Canvas)">
            <summary>
            Adds a new ui canvas to the scene
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveLayer(Genesis.Core.Layer)">
            <summary>
            Removes a layer from the scene
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetLayer(System.String)">
            <summary>
            Gets the layer with the given name
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Adds a GameElement in the scene. It will be placed in the given layer
            </summary>
            <param name="layerName"></param>
            <param name="gameElement"></param>
        </member>
        <member name="M:Genesis.Core.Scene.AddGameElements(System.String,System.Collections.Generic.List{Genesis.Core.GameElement})">
            <summary>
            Adds GameElements into the scene. The elements will be placed in the given layer
            </summary>
            <param name="layer"></param>
            <param name="gameElements"></param>
        </member>
        <member name="M:Genesis.Core.Scene.Init(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Initial the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnUpdate(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Update the scene and the elements. Called every frame
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice)">
            <summary>
            Renders the scene
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
        </member>
        <member name="M:Genesis.Core.Scene.OnDestroy(Genesis.Core.Game)">
            <summary>
            Destroys the scene data
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String)">
            <summary>
            Gets the elements from the given layer
            </summary>
            <param name="layername"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElements(System.String[])">
            <summary>
            Gets the elements from the given layers
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String)">
            <summary>
            Gets the element with the given name. This function searchs
            in every layer until it finds a element with an equal name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetElement(System.String,System.String)">
            <summary>
            Gets the element with the given name out of the given layer.
            </summary>
            <param name="layerName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetCanvas(System.String)">
            <summary>
            Gets the canvas with the given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.GetWidget(System.String,System.String)">
            <summary>
            Gets a entity with the given name from the canvas
            </summary>
            <param name="canvasName"></param>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(Genesis.Core.GameElement)">
            <summary>
            Removes a element from the scene. This function will look in all 
            layer for the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveElement(System.String,Genesis.Core.GameElement)">
            <summary>
            Removes a element from the given layer
            </summary>
            <param name="layerName"></param>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(Genesis.UI.Canvas)">
            <summary>
            Removes the ui canvas from the scene
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.Core.Scene.RemoveCanvas(System.String)">
            <summary>
            Removes the ui canvas with the given name from the scene
            </summary>
            <param name="canvasName"></param>
        </member>
        <member name="M:Genesis.Core.Scene.ResizeScene(Genesis.Graphics.Viewport)">
            <summary>
            Resizes the scene by invoking the event handler for scene resize.
            </summary>
            <param name="viewport">The viewport containing information about the new dimensions.</param>
        </member>
        <member name="T:Genesis.Core.Storage">
            <summary>
            Class for dynamic clearing not used elements.
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.#ctor">
            <summary>
            Create a new Storage instance
            </summary>
        </member>
        <member name="M:Genesis.Core.Storage.ManageElement(Genesis.Core.GameElement)">
            <summary>
            Add an element which get managed
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Core.Storage.Process(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Removes disabled elements from the game and the garbage collector
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyNormalMap(System.Int32,System.Int32)">
            <summary>
            Creates an empty normal map
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.CreateEmptyTexture(System.Int32,System.Int32)">
            <summary>
            Creates an empty texture
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldLocation(Genesis.Core.GameElement)">
            <summary>
            Returns the world location for the Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the World rotation for the element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetElementWorldScale(Genesis.Core.GameElement)">
            <summary>
            Returns the world scale for the element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceLocation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts world transform to model space transform
            </summary>
            <param name="element"></param>
            <param name="worldPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceScale(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world scale to the model space scale
            </summary>
            <param name="element"></param>
            <param name="worldScale"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelSpaceRotation(Genesis.Core.GameElement,Genesis.Math.Vec3)">
            <summary>
            Converts the world rotation to the model space rotation
            </summary>
            <param name="element"></param>
            <param name="worldRotation"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelTransformation(Genesis.Core.GameElement)">
            <summary>
            Returns the model transform matrix relative to the world location
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelRotation(Genesis.Core.GameElement)">
            <summary>
            Returns the model rotation matrix relativ to the world rotation
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.GetModelScale(Genesis.Core.GameElement)">
            <summary>
            Returns the model scale matrix relativ to the world scale
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.EulerToQuaternion(Genesis.Math.Vec3)">
            <summary>
            Converts an euler to an quaternion
            </summary>
            <param name="euler"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.LookAt(Genesis.Graphics.Camera,Genesis.Math.Vec3)">
            <summary>
            Let the camera look at an position
            </summary>
            <param name="camera"></param>
            <param name="targetPosition"></param>
        </member>
        <member name="M:Genesis.Core.Utils.CalculateYaw(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculates the yaw
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.CalculatePitch(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Calculate the pitch
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Core.Utils.ConvertColor(System.Drawing.Color)">
            <summary>
            Convert an System.Drawing.Color into an float array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.ClassicGL.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.GLRenderer.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteColor(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteTexCords(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DrawElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer.DisposeElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.Experimental2.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteColor(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteTexCords(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DrawElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.Experimental2.DisposeElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="F:Genesis.Graphics.RenderDevice.GLRenderer2.rot">
            <summary>
            Struct for the viewport
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Init">
            <summary>
            Initial the moderngl render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.BuildShape(Genesis.Graphics.Shapes.Shape)">
            <summary>
            Creates an buffer for the shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.BuildFramebuffer(System.Int32,System.Int32)">
            <summary>
            Creates a new framebuffer
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Dispose">
            <summary>
            Disposes the render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadShader(System.String,Genesis.Graphics.ShaderProgram)">
            <summary>
            Loads a shader program
            </summary>
            <param name="name"></param>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisoseShader(Genesis.Graphics.ShaderProgram)">
            <summary>
            Deletes the shader program
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Initial the sprite
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitGameElement(Genesis.Core.GameElement)">
            <summary>
            Inits the game element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Inital an 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3DTexture(System.String)">
            <summary>
            Initial the diffuse texture for the 3D model
            If the texture file isnt existing an empty 1x1 texture get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.InitElement3DNormalMap(System.String)">
            <summary>
            Inital the normal map for an 3D element
            if the normal map file isnt existing an empty 1x1 normal map get created
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Begin">
            <summary>
            Beginn to draw
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeTexture(Genesis.Graphics.Texture)">
            <summary>
            Disposes the texture
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeFont(Genesis.Graphics.Font)">
            <summary>
            Disposes the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawRect(Genesis.Math.Rect,System.Drawing.Color,System.Single)">
            <summary>
            Draws a rect with no fill
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawLine(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color)">
            <summary>
            Draws a line
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawGameElement(Genesis.Core.GameElement)">
            <summary>
            Renders the GameElement
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture)">
            <summary>
            Renders a sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Renders a sprite with modern gl
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawSprite(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Drawing.Color,Genesis.Graphics.Texture,Genesis.Graphics.TexCoords)">
            <summary>
            Draws a Sprite
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="texture"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawVectors(Genesis.Math.Vec3[],System.Drawing.Color)">
            <summary>
            Draws the vector array
            </summary>
            <param name="vecs"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.End">
            <summary>
            Ends the rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.FillRect(Genesis.Math.Rect,System.Drawing.Color)">
            <summary>
            Fills a rectangle with the given color. 
            LegacyGL
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadTexture(Genesis.Graphics.Texture)">
            <summary>
            Loads a texture into the vram
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.LoadFont(Genesis.Graphics.Font)">
            <summary>
            Loads the the font
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.ModelViewMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.PopMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.ProjectionMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.PushMatrix">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Rotate(System.Single,Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Viewport(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the viewport for the rendering
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.SetCamera(Genesis.Graphics.Camera)">
            <summary>
            Set the Projection and view matrices
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.SetUIMatrices">
            <summary>
            Sets the mvp matrix for ui rendering
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Translate(Genesis.Math.Vec3)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.Translate(System.Single,System.Single,System.Single)">
            <summary>
            This function will not be used within this render device
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureRepeatT">
            <summary>
            Sets the texture repeatT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureRepeatS">
            <summary>
            Sets the texture repeatS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureClampT">
            <summary>
            Sets the texture clampT
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.TextureClampS">
            <summary>
            Sets the texture clampS
            </summary>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawTexture(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Texture)">
            <summary>
            Draws a texture
            </summary>
            <param name="location"></param>
            <param name="size"></param>
            <param name="repeateX"></param>
            <param name="repeatY"></param>
            <param name="texture"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawString(System.String,Genesis.Math.Vec3,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a String
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawString(System.String,Genesis.Math.Vec3,System.Single,System.Single,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Renders a string
            </summary>
            <param name="text"></param>
            <param name="location"></param>
            <param name="fontSize"></param>
            <param name="spacing"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.RenderGlyphe(Genesis.Math.Vec3,Genesis.Graphics.Font,System.Single,System.Char,System.Drawing.Color)">
            <summary>
            Renders a glyphe from a string
            </summary>
            <param name="location"></param>
            <param name="font"></param>
            <param name="size"></param>
            <param name="character"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawMesh(Genesis.Math.Mesh,System.Drawing.Color)">
            <summary>
            Draws a mesh
            </summary>
            <param name="mesh"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetError">
            <summary>
            Returns an error code from the render device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetHandle">
            <summary>
            Returns the handle of the render target
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GenerateTexture(NetGL.OpenGL,Genesis.Graphics.Texture)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GenerateTexture(NetGL.OpenGL,System.Drawing.Bitmap)">
            <summary>
            Generates a texture
            </summary>
            <param name="gl"></param>
            <param name="texture"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetColorArray(System.Drawing.Color)">
            <summary>
            Returns an color array
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteColor(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns an array with the color data for a sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteTexCords(Genesis.Core.Prefabs.Sprite)">
            <summary>
            Returns the texture coords from the given sprite
            </summary>
            <param name="sprite"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetTexCords(Genesis.Graphics.TexCoords)">
            <summary>
            Gets an array with the texture coords
            </summary>
            <param name="cords"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetSpriteBaseTexCoords">
            <summary>
            Returns the basic shape tex coords for a sprite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DrawElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Draws an 3D element within the scene
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.GetShaderProgram(Genesis.Graphics.ShaderProgram)">
            <summary>
            Returns the shader programm with the typeof the refProgram. 
            Returns null is no program found
            </summary>
            <param name="refProgram"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Graphics.RenderDevice.GLRenderer2.DisposeElement3D(Genesis.Core.Prefabs.Element3D)">
            <summary>
            Dispose the 3D element
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:Genesis.Graphics.TexCoords">
            <summary>
            Values for texture coords
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor">
            <summary>
            Creates a new Aabb
            </summary>
        </member>
        <member name="M:Genesis.Physics.Aabb.#ctor(BulletSharp.Math.Vector3,BulletSharp.Math.Vector3)">
            <summary>
            Creates a new Aabb
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Genesis.Physics.Aabb.FromBulletRigidBody(BulletSharp.RigidBody)">
            <summary>
            Returns the aabb from a bullet rigidbody
            </summary>
            <param name="rigidBody"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Physics.Aabb.Contains(Genesis.Math.Vec3)">
            <summary>
            Checks if the aabb contains a point
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:Genesis.Math.Vec3">
            <summary>
            Vector for coordinates
            </summary>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.#ctor(System.Single)">
            <summary>
            Creates a new Vector
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Zero">
            <summary>
            Create a new vector with X = 0, Y = 0, Z = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(System.Single,System.Single)">
            <summary>
            Returns the offset angle to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Degres(Genesis.Math.Vec3)">
            <summary>
            Returns the offset angle to the vector
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards(System.Single,System.Single)">
            <summary>
            Returns a new vector with the offset cordinates towards the given vector.
            </summary>
            <param name="degrees"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards2D(System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns a new vector towards the given direction.
            </summary>
            <param name="degrees"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(Genesis.Math.Vec3,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the Vector towards in 3D
            </summary>
            <param name="rotation"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Towards3D(System.Single,System.Single,System.Single,Genesis.Math.Vec3,System.Single)">
            <summary>
            Calculates the towards vector
            </summary>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="rotZ"></param>
            <param name="start"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Distance(Genesis.Math.Vec3)">
            <summary>
            Returns the distance between two vectors
            </summary>
            <param name="vec3"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(Genesis.Math.Vec3)">
            <summary>
            Adds the value from a vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds the values to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddX(System.Single)">
            <summary>
            Add the value to the X param
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddY(System.Single)">
            <summary>
            Add the value to the y param
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.AddZ(System.Single)">
            <summary>
            Add the value to the z param
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Sub(Genesis.Math.Vec3)">
            <summary>
            Subtract the vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Set(Genesis.Math.Vec3)">
            <summary>
            Sets the value for the vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Genesis.Math.Vec3.Forward(Genesis.Math.Vec3,System.Single)">
            <summary>
            Returns the forward vector
            </summary>
            <param name="rotation"></param>
            <param name="dist"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Addition(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Add operator
            </summary>
            <param name="vec1"></param>
            <param name="vec2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Multiply(Genesis.Math.Vec3,System.Single)">
            <summary>
            Multiply with float
            </summary>
            <param name="vec"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.Math.Vec3.op_Subtraction(Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Sub operator
            </summary>
            <param name="vec1"></param>
            <param name="vec2"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new canvas instance
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.AddWidget(Genesis.UI.Widget)">
            <summary>
            Adds a entity to the canvas
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnInit(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Initial the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Update the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene)">
            <summary>
            Renders the canvas
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.OnDispose(Genesis.Core.Game,Genesis.Core.Scene)">
            <summary>
            Dispose the canvas
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.GetWidget(System.String)">
            <summary>
            Return a widget with the specified name, searching within entities and their children.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetBounds">
            <summary>
            Returns the bounds from the canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.GetScreenBounds">
            <summary>
            Returns the screen bounds from the canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Canvas.CenterWidget(Genesis.UI.Canvas,Genesis.UI.Widget)">
            <summary>
            Centers the widget in the middle of the canvas
            </summary>
            <param name="canvas"></param>
            <param name="widget"></param>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadCanvas(System.String,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a canvas from a specified JSON file using a UI parser and asset manager.
            </summary>
            <param name="File">Path to the JSON file containing canvas configuration.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created canvas based on the JSON configuration.</returns>
        </member>
        <member name="M:Genesis.UI.Canvas.LoadWidget(Newtonsoft.Json.Linq.JObject,Genesis.Core.AssetManager,Genesis.UI.UIParser)">
            <summary>
            Loads a widget from provided JSON data using a UI parser and asset manager.
            </summary>
            <param name="data">JSON data containing the configuration of the widget to be created.</param>
            <param name="assets">Asset manager for managing resources such as images, fonts, etc.</param>
            <param name="parser">UI parser that contains the logic for parsing the JSON data.</param>
            <returns>The created widget based on the JSON data.</returns>
        </member>
        <member name="T:Genesis.UI.UIParser">
            <summary>
            This class provides funtions to parse an json object as an widget.
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.#ctor">
            <summary>
            Creates a new instance for a entitiy
            </summary>
        </member>
        <member name="M:Genesis.UI.Widget.AddChildren(Genesis.UI.Widget)">
            <summary>
            Adds a children to the entity. Also sets the perent of the child entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnInit(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Initial the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnUpdate(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Update the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the entity
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.OnDispose(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Dispose the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativePos(Genesis.UI.Canvas)">
            <summary>
            Get the relative postion to the screen.
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetChildren(System.String)">
            <summary>
            Returns the children with the name name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.GetRelativeBounds2D(Genesis.UI.Canvas)">
            <summary>
            Get the bounds relative to the canvas
            </summary>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.IsHover(Genesis.Core.Game,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Rework!!!
            Checks if the mouse hovers over the entity
            </summary>
            <param name="game"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Widget.FindChildren(System.String)">
            <summary>
            Recursively find a child widget with the given name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The widget with the specified name, or null if not found.</returns>
        </member>
        <member name="M:Genesis.UI.Label.#ctor(System.String,Genesis.Math.Vec3,System.String,Genesis.Graphics.Font,System.Drawing.Color)">
            <summary>
            Create a new instance of the label
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="color"></param>
        </member>
        <member name="M:Genesis.UI.Label.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the label
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
        <member name="M:Genesis.UI.Label.GetStringWidht">
            <summary>
            Returns the width from the string in float
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genesis.UI.Label.GetStringBounds(Genesis.Math.Vec3)">
            <summary>
            Returns the display bounds from the string
            </summary>
            <param name="location">Location from the string</param>
            <returns></returns>
        </member>
        <member name="T:Genesis.UI.ProgressBar">
            <summary>
            ProgressBar Class
            </summary>
        </member>
        <member name="M:Genesis.UI.ProgressBar.#ctor(System.String,Genesis.Math.Vec3,Genesis.Math.Vec3)">
            <summary>
            Creates a new progress bar
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="size"></param>
        </member>
        <member name="M:Genesis.UI.ProgressBar.OnRender(Genesis.Core.Game,Genesis.Graphics.IRenderDevice,Genesis.Core.Scene,Genesis.UI.Canvas)">
            <summary>
            Renders the progress bar
            </summary>
            <param name="game"></param>
            <param name="renderDevice"></param>
            <param name="scene"></param>
            <param name="canvas"></param>
        </member>
    </members>
</doc>
